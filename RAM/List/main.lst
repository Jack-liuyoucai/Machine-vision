###############################################################################
#                                                                             #
#                                                       27/Apr/2013  17:10:07 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送      #
#                    接受 像素处理  死机\src\Sources\App\main.c               #
#    Command line =  "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\App\main.c" -lCN         #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\RAM\List\" -lB                       #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\RAM\List\" -o                        #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\RAM\Obj\" --no_cse --no_unroll       #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Cpu\" -I                 #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\App\" -I                 #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\adc\" -I         #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\delay\" -I       #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\FTM\" -I         #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\gpio\" -I        #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\lptmr\" -I       #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\mcg\" -I         #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\PIT\" -I         #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\uart\" -I        #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\oled\" -I        #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\spi\" -On        #
#                    --use_c++_inline                                         #
#    List file    =  C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送      #
#                    接受 像素处理  死机\RAM\List\main.lst                    #
#    Object file  =  C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送      #
#                    接受 像素处理  死机\RAM\Obj\main.o                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送 接受 像素处理  死机\src\Sources\App\main.c
      1          #include "include.h"
      2          //#include "MK60N512VMD100.h"
      3          
      4          //#include <math.h>
      5          
      6          
      7          
      8          #define CCD_SI(x)   gpio_set(PORTE, 0, x)
      9          #define CCD_CLK(x)  gpio_set(PORTE, 1, x)
     10          
     11          #define TEST_TIME0(x) gpio_set(PORTE, 28, x)
     12          #define TEST_TIME1(x) gpio_set(PORTE, 27, x)
     13          
     14          
     15           /*Globle variabls*/
     16           
     17          
     18          /*需调节的参数*/             

   \                                 In section .bss, align 1
     19          uint8 Speed_set=0;
   \                     Speed_set:
   \   00000000                      DS8 1
     20          

   \                                 In section .data, align 1
     21          uint8 WHITE_CENTER=62;//车放在中间时的跑道中心  //需要校准
   \                     WHITE_CENTER:
   \   00000000   0x3E               DC8 62
     22          

   \                                 In section .data, align 4
     23          float ACCE_STATIC = 1124;                         //1123           蓝电池 1124
   \                     ACCE_STATIC:
   \   00000000   0x448C8000         DC32 448C8000H
     24          

   \                                 In section .data, align 4
     25          float angle_kp =440,angle_kd = 4.4;     //角度                   480  4.2       450  5
   \                     angle_kp:
   \   00000000   0x43DC0000         DC32 43DC0000H

   \                                 In section .data, align 4
   \                     angle_kd:
   \   00000000   0x408CCCCD         DC32 408CCCCDH
     26          

   \                                 In section .data, align 4
     27          float speed_kp=40,speed_ki=2.5; //速度
   \                     speed_kp:
   \   00000000   0x42200000         DC32 42200000H

   \                                 In section .data, align 4
   \                     speed_ki:
   \   00000000   0x40200000         DC32 40200000H
     28          

   \                                 In section .data, align 4
     29          float steer_kp=28.5,steer_kd = 29.5; //方向
   \                     steer_kp:
   \   00000000   0x41E40000         DC32 41E40000H

   \                                 In section .data, align 4
   \                     steer_kd:
   \   00000000   0x41EC0000         DC32 41EC0000H
     30          
     31          
     32          /*整体,时间等参数*/

   \                                 In section .bss, align 1
     33          uint8 SpeedControlCount = 0;                  //速控制周期计数值
   \                     SpeedControlCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     34          uint8 g_nCarSpeedCount ;                //1.25ms控制周期计数
   \                     g_nCarSpeedCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     35          uint8 DirectionControlCount = 0;               //方向控制周期
   \                     DirectionControlCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     36          uint8 IntegrationTime;
   \                     IntegrationTime:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     37          uint8 send_data_cnt = 0;
   \                     send_data_cnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     38          uint8 TimerCnt20ms = 0;
   \                     TimerCnt20ms:
   \   00000000                      DS8 1
     39          

   \                                 In section .bss, align 4
     40          float V;
   \                     V:
   \   00000000                      DS8 4
     41          
     42          
     43                                                                                     
     44          
     45          //******************************************************************************
     46          /*直立平衡控制相关参数*/
     47          

   \                                 In section .bss, align 4
     48          float acce=0,gyro=0,w=0;                     //送入滤波的加速度计角度，陀螺仪角速度
   \                     acce:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     gyro:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     w:
   \   00000000                      DS8 4
     49          

   \                                 In section .bss, align 4
     50          float GYRO_STATIC = 0;                                  //零点偏移量
   \                     GYRO_STATIC:
   \   00000000                      DS8 4
     51          

   \                                 In section .bss, align 4
     52          float AD_AngleData[2];             //均值滤波之后的陀螺仪和加速度计传感器数据
   \                     AD_AngleData:
   \   00000000                      DS8 8
     53          

   \                                 In section .bss, align 4
     54          float acce_G=0,acce_angle=0,gyro_angle=0,acce_offset=0,gyro_offset=0;
   \                     acce_G:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     acce_angle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     gyro_angle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     acce_offset:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     gyro_offset:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     55          float g_nCarAngle=0;
   \                     g_nCarAngle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     56          float gyroIntegral=0;                     
   \                     gyroIntegral:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     57          float angle_error=0;               //角度偏差
   \                     angle_error:
   \   00000000                      DS8 4
     58          

   \                                 In section .bss, align 2
     59          int16 anglePD=0;
   \                     anglePD:
   \   00000000                      DS8 2
     60          
     61          //*****************************************************************************
     62          /*速度控制相关参数*/ 

   \                                 In section .bss, align 2
     63          int16 g_nLeftCount=0, g_nRightCount=0;                  //两个电机的速度计数，符号位表示方向
   \                     g_nLeftCount:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     g_nRightCount:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     64          float RealSpeed;
   \                     RealSpeed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     65          float LeftRealSpeed,RightRealSpeed;
   \                     LeftRealSpeed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     RightRealSpeed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     66          float Speed_error,motor_P,motor_I=0;
   \                     Speed_error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     motor_P:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     motor_I:
   \   00000000                      DS8 4
     67          

   \                                 In section .bss, align 2
     68          int16 SpeedPID = 0.0;                                 //速度控制的输出量
   \                     SpeedPID:
   \   00000000                      DS8 2
     69          
     70          //*****************************************************************************
     71          /*获取小车位置偏差相关*/
     72          

   \                                 In section .bss, align 2
     73          uint16 latch;
   \                     latch:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     74          uint16 Pixel[128];
   \                     Pixel:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
     75          uint16 Pixel_fil[128]={0};
   \                     Pixel_fil:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
     76          uint8 CCD_value[130]={0};
   \                     CCD_value:
   \   00000000                      DS8 132
     77          

   \                                 In section .data, align 4
     78          float white_center=63;//跑道中心
   \                     white_center:
   \   00000000   0x427C0000         DC32 427C0000H
     79          

   \                                 In section .bss, align 4
     80          float p_distance=0;//偏差
   \                     p_distance:
   \   00000000                      DS8 4
     81          

   \                                 In section .bss, align 2
     82          uint16 Pixel_top=0;
   \                     Pixel_top:
   \   00000000                      DS8 2

   \                                 In section .data, align 1
     83          uint8 Left_cnt=18;  
   \                     Left_cnt:
   \   00000000   0x12               DC8 18

   \                                 In section .data, align 1
     84          uint8 Right_cnt=110;
   \                     Right_cnt:
   \   00000000   0x6E               DC8 110
     85          
     86          //*****************************************************************************
     87          /*转向控制相关参数*/
     88          

   \                                 In section .bss, align 4
     89           float  Distance[10];
   \                     Distance:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
     90           float error=0;
   \                     error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     91           float last_error;
   \                     last_error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     92           float  dis_error=0;
   \                     dis_error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     93           int16  steerpwm=0;                                     //转向控制输出数量
   \                     steerpwm:
   \   00000000                      DS8 2
     94          
     95          
     96           

   \                                 In section .bss, align 2
     97          int16 LeftSpeedPwm,RightSpeedPwm;
   \                     LeftSpeedPwm:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     RightSpeedPwm:
   \   00000000                      DS8 2
     98          
     99          
    100          
    101          
    102           
    103          /*------------------------------------------------------------------------------
    104                                          初始化                                                     
    105          ------------------------------------------------------------------------------*/
    106          

   \                                 In section .text, align 2, keep-with-next
    107          int abs(int num)     //绝对值函数
    108          {
    109                   if(num<0)
   \                     abs:
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD501             BPL.N    ??abs_0
    110                       return -num;
   \   00000004   0x4240             RSBS     R0,R0,#+0
   \   00000006   0xE7FF             B.N      ??abs_1
    111                   else
    112                       return num;
   \                     ??abs_0:
   \                     ??abs_1:
   \   00000008   0x4770             BX       LR               ;; return
    113          }
    114                                                                                     
    115          /*1.端口初始化*/

   \                                 In section .text, align 2, keep-with-next
    116           void GIPO_init()
    117           {
   \                     GIPO_init:
   \   00000000   0xB580             PUSH     {R7,LR}
    118                gpio_init (PORTE , 28, GPO,LOW);
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x211C             MOVS     R1,#+28
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      BL       gpio_init
    119                gpio_init (PORTE , 27, GPO,LOW);
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x211B             MOVS     R1,#+27
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       gpio_init
    120          //    gpio_init (PORTA, 0, GPI, LOW);
    121          //    gpio_init (PORTA, 1, GPI, LOW);
    122          //    gpio_init (PORTA, 2, GPI, LOW);
    123          //    gpio_init (PORTA, 3, GPI, LOW);
    124          //    gpio_init (PORTA, 4, GPI, LOW);
    125          //    gpio_init (PORTA, 5, GPI, LOW);
    126          //    gpio_init (PORTA, 6, GPI, LOW);
    127          //    gpio_init (PORTA, 7, GPI, LOW);                       
    128          
    129            }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    130            
    131          /*2.陀螺仪初始化*/
    132           

   \                                 In section .text, align 2, keep-with-next
    133           void init_gyro(){
   \                     init_gyro:
   \   00000000   0xB580             PUSH     {R7,LR}
    134             
    135                  //adc_start(ADC0, AD8, ADC_10bit );
    136                  
    137           	GYRO_STATIC =ad_ave(ADC0, AD8, ADC_10bit, 100)*3.22265625;   //16精度* 0.050354
   \   00000002   0x2364             MOVS     R3,#+100
   \   00000004   0x2202             MOVS     R2,#+2
   \   00000006   0x2108             MOVS     R1,#+8
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       ad_ave
   \   0000000E   0x.... 0x....      BL       __aeabi_f2d
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x.... 0x....      LDR.W    R3,??DataTable10  ;; 0x4009c800
   \   00000018   0x.... 0x....      BL       __aeabi_dmul
   \   0000001C   0x.... 0x....      BL       __aeabi_d2f
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000024   0x6008             STR      R0,[R1, #+0]
    138                  //adc_stop(ADC0);
    139           	}
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    140          /*3.CCD初始化*/
    141          

   \                                 In section .text, align 2, keep-with-next
    142          void CCD_init(void)
    143          {
   \                     CCD_init:
   \   00000000   0xB580             PUSH     {R7,LR}
    144            gpio_init (PORTE , 0, GPO,LOW);
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      BL       gpio_init
    145            gpio_init (PORTE , 1, GPO,LOW);
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       gpio_init
    146            adc_init(ADC0, AD12) ;
   \   0000001A   0x210C             MOVS     R1,#+12
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       adc_init
    147            //adc_start(ADC0, AD12, ADC_10bit );
    148            
    149          } 
   \   00000022   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    150          void sensor_init(){
   \                     sensor_init:
   \   00000000   0xB580             PUSH     {R7,LR}
    151              adc_init(ADC0, AD8);
   \   00000002   0x2108             MOVS     R1,#+8
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       adc_init
    152              adc_init(ADC0, AD9);
   \   0000000A   0x2109             MOVS     R1,#+9
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       adc_init
    153              //adc_start(ADC0, AD8, ADC_10bit );
    154              //adc_start(ADC0, AD9, ADC_10bit );
    155          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    156          
    157          /*------------------------------------------------------------------------------
    158                                              AD采样，均值                                                     
    159          ------------------------------------------------------------------------------*/
    160          

   \                                 In section .text, align 4, keep-with-next
    161          void GetADValue(void) //查询方式,8位精度，右对齐，数据存放在ATDDRLx
    162          {  uint8 i=0; 
   \                     GetADValue:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x2400             MOVS     R4,#+0
    163            //adc_start(ADC0, AD8, ADC_10bit );
    164            
    165            AD_AngleData[0] = ad_ave(ADC0, AD8, ADC_10bit,30 );     //结果
   \   00000004   0x231E             MOVS     R3,#+30
   \   00000006   0x2202             MOVS     R2,#+2
   \   00000008   0x2108             MOVS     R1,#+8
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       ad_ave
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00000014   0x6008             STR      R0,[R1, #+0]
    166            
    167            for(i=0;i<=100;i++){
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x0004             MOVS     R4,R0
   \                     ??GetADValue_0:
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C65             CMP      R4,#+101
   \   0000001E   0xD203             BCS.N    ??GetADValue_1
    168              asm("nop");
   \   00000020   0xBF00             nop              
    169              asm("nop");
   \   00000022   0xBF00             nop              
    170            
    171            }
   \   00000024   0x1C64             ADDS     R4,R4,#+1
   \   00000026   0xE7F8             B.N      ??GetADValue_0
    172            
    173           // adc_stop(ADC0);
    174            
    175            //adc_start(ADC0, AD9, ADC_10bit );
    176            
    177            AD_AngleData[1] = ad_ave(ADC0, AD9, ADC_10bit,30 );
   \                     ??GetADValue_1:
   \   00000028   0x231E             MOVS     R3,#+30
   \   0000002A   0x2202             MOVS     R2,#+2
   \   0000002C   0x2109             MOVS     R1,#+9
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       ad_ave
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00000038   0x6048             STR      R0,[R1, #+4]
    178           // adc_stop(ADC0);
    179                        
    180          }
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    181          
    182          
    183          /*------------------------------------------------------------------------------
    184                                                   角度环控制                                                  
    185          ------------------------------------------------------------------------------*/
    186          
    187          
    188          /*2.计算角度*/
    189          
    190          

   \                                 In section .text, align 2, keep-with-next
    191          void GetAngle() 
    192          { 
   \                     GetAngle:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    193                    acce = AD_AngleData[1]*3.22265625;		                        //角度校正  //静态值 360    352
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x.... 0x....      BL       __aeabi_f2d
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable10  ;; 0x4009c800
   \   00000012   0x.... 0x....      BL       __aeabi_dmul
   \   00000016   0x.... 0x....      BL       __aeabi_d2f
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    194                    
    195                    acce_offset=ACCE_STATIC-acce;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x.... 0x....      BL       __aeabi_fsub
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable10_5
   \   00000034   0x6008             STR      R0,[R1, #+0]
    196                    acce_G = acce_offset/800;                                     //这里得到角度的正弦值
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable10_6  ;; 0x44480000
   \   00000040   0x.... 0x....      BL       __aeabi_fdiv
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable10_7
   \   00000048   0x6008             STR      R0,[R1, #+0]
    197                    
    198                     
    199                    if(acce_G >0.3 ) acce_G = 0.3;                                    //算出的值可能大于1或小于-1，是错的，所以限下幅            
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable10_8  ;; 0x3e99999a
   \   00000054   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000058   0xD804             BHI.N    ??GetAngle_0
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable10_8  ;; 0x3e99999a
   \   00000062   0x6001             STR      R1,[R0, #+0]
    200                    if(acce_G <-0.3) acce_G = -0.3;
   \                     ??GetAngle_0:
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable10_9  ;; 0xbe999999
   \   0000006E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000072   0xD204             BCS.N    ??GetAngle_1
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable10_10  ;; 0xbe99999a
   \   0000007C   0x6001             STR      R1,[R0, #+0]
    201                               
    202               
    203                    acce_angle = 180/3.1416*asin(acce_G);                         //asin求反正弦，得出的单位是弧度，*180/pi得到角度值 
   \                     ??GetAngle_1:
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x.... 0x....      BL       __aeabi_f2d
   \   00000088   0x.... 0x....      BL       asin
   \   0000008C   0x.... 0x....      LDR.W    R2,??DataTable10_11  ;; 0xb6774c14
   \   00000090   0x.... 0x....      LDR.W    R3,??DataTable10_12  ;; 0x404ca5d7
   \   00000094   0x.... 0x....      BL       __aeabi_dmul
   \   00000098   0x.... 0x....      BL       __aeabi_d2f
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable10_13
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    204                    
    205                      
    206          	  gyro = AD_AngleData[0]*3.22265625;
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x.... 0x....      BL       __aeabi_f2d
   \   000000AC   0x2200             MOVS     R2,#+0
   \   000000AE   0x.... 0x....      LDR.W    R3,??DataTable10  ;; 0x4009c800
   \   000000B2   0x.... 0x....      BL       __aeabi_dmul
   \   000000B6   0x.... 0x....      BL       __aeabi_d2f
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable10_14
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    207                    
    208                    gyro_offset=  GYRO_STATIC - gyro;
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable10_14
   \   000000CA   0x6809             LDR      R1,[R1, #+0]
   \   000000CC   0x.... 0x....      BL       __aeabi_fsub
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable10_15
   \   000000D4   0x6008             STR      R0,[R1, #+0]
    209                    w= gyro_offset/6.7;                              //角速度值-静态值    w= ( gyro - GYRO_OFF )/6.7;  
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable10_15
   \   000000DA   0x6800             LDR      R0,[R0, #+0]
   \   000000DC   0x.... 0x....      BL       __aeabi_f2d
   \   000000E0   0x.... 0x....      LDR.W    R2,??DataTable10_16  ;; 0xcccccccd
   \   000000E4   0x.... 0x....      LDR.W    R3,??DataTable10_17  ;; 0x401acccc
   \   000000E8   0x.... 0x....      BL       __aeabi_ddiv
   \   000000EC   0x.... 0x....      BL       __aeabi_d2f
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable10_18
   \   000000F4   0x6008             STR      R0,[R1, #+0]
    210                 
    211          
    212                    
    213                    g_nCarAngle =0.9987*(g_nCarAngle+0.001*w)+0.0013*acce_angle;
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable11
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0x.... 0x....      BL       __aeabi_f2d
   \   00000100   0x0004             MOVS     R4,R0
   \   00000102   0x000D             MOVS     R5,R1
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable10_18
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0x.... 0x....      BL       __aeabi_f2d
   \   0000010E   0x.... 0x....      LDR.W    R2,??DataTable11_1  ;; 0xd2f1a9fc
   \   00000112   0x.... 0x....      LDR.W    R3,??DataTable11_2  ;; 0x3f50624d
   \   00000116   0x.... 0x....      BL       __aeabi_dmul
   \   0000011A   0x0022             MOVS     R2,R4
   \   0000011C   0x002B             MOVS     R3,R5
   \   0000011E   0x.... 0x....      BL       __aeabi_dadd
   \   00000122   0x.... 0x....      LDR.W    R2,??DataTable11_3  ;; 0xb3d07c85
   \   00000126   0x.... 0x....      LDR.W    R3,??DataTable11_4  ;; 0x3feff559
   \   0000012A   0x.... 0x....      BL       __aeabi_dmul
   \   0000012E   0x0004             MOVS     R4,R0
   \   00000130   0x000D             MOVS     R5,R1
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable10_13
   \   00000136   0x6800             LDR      R0,[R0, #+0]
   \   00000138   0x.... 0x....      BL       __aeabi_f2d
   \   0000013C   0x.... 0x....      LDR.W    R2,??DataTable11_5  ;; 0x5f06f694
   \   00000140   0x.... 0x....      LDR.W    R3,??DataTable11_6  ;; 0x3f554c98
   \   00000144   0x.... 0x....      BL       __aeabi_dmul
   \   00000148   0x0022             MOVS     R2,R4
   \   0000014A   0x002B             MOVS     R3,R5
   \   0000014C   0x.... 0x....      BL       __aeabi_dadd
   \   00000150   0x.... 0x....      BL       __aeabi_d2f
   \   00000154   0x.... 0x....      LDR.W    R1,??DataTable11
   \   00000158   0x6008             STR      R0,[R1, #+0]
    214                         
    215          }  
   \   0000015A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    216          
    217              
    218          /*3.角度控制*/
    219          
    220            
    221          

   \                                 In section .text, align 2, keep-with-next
    222              void CarAngleAdjust()                                          //要调整输出值与周期之间的比例
    223          {
   \                     CarAngleAdjust:
   \   00000000   0xB510             PUSH     {R4,LR}
    224            anglePD =(int16)(g_nCarAngle* angle_kp  +  angle_kd*w);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       __aeabi_fmul
   \   00000012   0x0004             MOVS     R4,R0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000018   0x6801             LDR      R1,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable10_18
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       __aeabi_fmul
   \   00000024   0x0021             MOVS     R1,R4
   \   00000026   0x.... 0x....      BL       __aeabi_fadd
   \   0000002A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable14
   \   00000032   0x8008             STRH     R0,[R1, #+0]
    225                  
    226                                                                                                  
    227          }
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    228          
    229          
    230          /*------------------------------------------------------------------------------
    231                                                  速度闭环控制                                                 
    232          ------------------------------------------------------------------------------*/ 
    233          
    234          /*速度闭环控制*/                                       
    235          

   \                                 In section .text, align 2, keep-with-next
    236          void  SpeedControl(void)
    237          {
   \                     SpeedControl:
   \   00000000   0xB500             PUSH     {LR}
    238                    g_nRightCount = FTM1_CNT;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable11_10  ;; 0x40039004
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x8001             STRH     R1,[R0, #+0]
    239                    g_nLeftCount = FTM2_CNT ;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable11_11
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable11_12  ;; 0x400b8004
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    240                    FTM1_CNT=0;
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable11_10  ;; 0x40039004
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6001             STR      R1,[R0, #+0]
    241                    FTM2_CNT=0;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable11_12  ;; 0x400b8004
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x6001             STR      R1,[R0, #+0]
    242            
    243                    LeftRealSpeed =g_nRightCount*0.025;	    //比例系数0.062属于经验,对应于200p     p.2125
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   0000002E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000032   0x.... 0x....      BL       __aeabi_i2d
   \   00000036   0x.... 0x....      LDR.W    R2,??DataTable11_13  ;; 0x9999999a
   \   0000003A   0x.... 0x....      LDR.W    R3,??DataTable11_14  ;; 0x3f999999
   \   0000003E   0x.... 0x....      BL       __aeabi_dmul
   \   00000042   0x.... 0x....      BL       __aeabi_d2f
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable11_15
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    244                    RightRealSpeed=g_nLeftCount*0.025;      //比例系数0.025属于经验,对应于500p  
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable11_11
   \   00000050   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000054   0x.... 0x....      BL       __aeabi_i2d
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable11_13  ;; 0x9999999a
   \   0000005C   0x.... 0x....      LDR.W    R3,??DataTable11_14  ;; 0x3f999999
   \   00000060   0x.... 0x....      BL       __aeabi_dmul
   \   00000064   0x.... 0x....      BL       __aeabi_d2f
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    245                                  	                             
    246                    RealSpeed=( LeftRealSpeed + RightRealSpeed )/2;
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable11_15
   \   00000072   0x6801             LDR      R1,[R0, #+0]
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x.... 0x....      BL       __aeabi_fadd
   \   0000007E   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000082   0x.... 0x....      BL       __aeabi_fdiv
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable12_1
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    247                    Speed_error = Speed_set - RealSpeed ;
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x.... 0x....      BL       __aeabi_ui2f
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable12_1
   \   0000009A   0x6809             LDR      R1,[R1, #+0]
   \   0000009C   0x.... 0x....      BL       __aeabi_fsub
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   000000A4   0x6008             STR      R0,[R1, #+0]
    248                    
    249                    if(Speed_error>5)
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable12_4  ;; 0x40a00001
   \   000000B0   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000B4   0xD804             BHI.N    ??SpeedControl_0
    250                              Speed_error = 5;
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable12_5  ;; 0x40a00000
   \   000000BE   0x6001             STR      R1,[R0, #+0]
    251                    if(Speed_error<-5)
   \                     ??SpeedControl_0:
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable12_6  ;; 0xc0a00000
   \   000000CA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000CE   0xD204             BCS.N    ??SpeedControl_1
    252                              Speed_error = -5;      
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable12_6  ;; 0xc0a00000
   \   000000D8   0x6001             STR      R1,[R0, #+0]
    253                   
    254           //P控制//  
    255                 
    256                    motor_P = speed_kp*Speed_error;        
   \                     ??SpeedControl_1:
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable12_7
   \   000000DE   0x6801             LDR      R1,[R0, #+0]
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x.... 0x....      BL       __aeabi_fmul
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   000000EE   0x6008             STR      R0,[R1, #+0]
    257                   
    258          //I控制//   
    259                   // motor_I +=  speed_ki*Speed_error;
    260                    
    261                   
    262                    SpeedPID =(int16)( motor_P );//+ motor_I);                
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable12_8
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x.... 0x....      BL       __aeabi_f2iz
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable15
   \   000000FE   0x8008             STRH     R0,[R1, #+0]
    263          }
   \   00000100   0xBD00             POP      {PC}             ;; return
    264          
    265          
    266          /*------------------------------------------------------------------------------
    267                                           方向控制                                                 
    268          ------------------------------------------------------------------------------*/
    269          
    270          /*1.数据归一化*/
    271          

   \                                 In section .text, align 2, keep-with-next
    272          uint8 Normalized_U8(uint16 data)
    273          {
    274            return (uint8)((uint32)data*255/1024);
   \                     Normalized_U8:
   \   00000000   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000002   0x21FF             MOVS     R1,#+255
   \   00000004   0x4348             MULS     R0,R1,R0
   \   00000006   0x0A80             LSRS     R0,R0,#+10
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x4770             BX       LR               ;; return
    275          }
    276          
    277          /*2.求数组的均值程序*/
    278                                                                      

   \                                 In section .text, align 2, keep-with-next
    279          uint16 PixelAverage(uint8 len, uint16 *data) {
   \                     PixelAverage:
   \   00000000   0xB410             PUSH     {R4}
    280            uint8 i;
    281            uint32 sum = 0;
   \   00000002   0x2300             MOVS     R3,#+0
    282            for(i = 0; i<len; i++) {
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x0022             MOVS     R2,R4
   \                     ??PixelAverage_0:
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x4282             CMP      R2,R0
   \   0000000E   0xD205             BCS.N    ??PixelAverage_1
    283              sum = sum + *data++;
   \   00000010   0x880C             LDRH     R4,[R1, #+0]
   \   00000012   0xFA13 0xF384      UXTAH    R3,R3,R4
   \   00000016   0x1C89             ADDS     R1,R1,#+2
    284            }
   \   00000018   0x1C52             ADDS     R2,R2,#+1
   \   0000001A   0xE7F5             B.N      ??PixelAverage_0
    285            return ((uint16)(sum/len));
   \                     ??PixelAverage_1:
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xFBB3 0xF0F0      UDIV     R0,R3,R0
   \   00000022   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   0xBC10             POP      {R4}
   \   00000026   0x4770             BX       LR               ;; return
    286          }
    287          
    288          /*3.CCD延时程序*/
    289          

   \                                 In section .text, align 4, keep-with-next
    290           void SamplingDelay(void){
    291            // int8 i;
    292          
    293              asm("nop");
   \                     SamplingDelay:
   \   00000000   0xBF00             nop              
    294              asm("nop");
   \   00000002   0xBF00             nop              
    295              asm("nop");
   \   00000004   0xBF00             nop              
    296              asm("nop");
   \   00000006   0xBF00             nop              
    297              asm("nop");
   \   00000008   0xBF00             nop              
    298              asm("nop");
   \   0000000A   0xBF00             nop              
    299              asm("nop");
   \   0000000C   0xBF00             nop              
    300              asm("nop");
   \   0000000E   0xBF00             nop              
    301              asm("nop");
   \   00000010   0xBF00             nop              
    302              asm("nop");
   \   00000012   0xBF00             nop              
    303              asm("nop");
   \   00000014   0xBF00             nop              
    304              asm("nop");
   \   00000016   0xBF00             nop              
    305              asm("nop");
   \   00000018   0xBF00             nop              
    306              asm("nop");
   \   0000001A   0xBF00             nop              
    307              asm("nop");
   \   0000001C   0xBF00             nop              
    308              asm("nop");
   \   0000001E   0xBF00             nop              
    309              asm("nop");
   \   00000020   0xBF00             nop              
    310              asm("nop");
   \   00000022   0xBF00             nop              
    311              asm("nop");
   \   00000024   0xBF00             nop              
    312              asm("nop");
   \   00000026   0xBF00             nop              
    313              asm("nop");
   \   00000028   0xBF00             nop              
    314              asm("nop");
   \   0000002A   0xBF00             nop              
    315              asm("nop");
   \   0000002C   0xBF00             nop              
    316              asm("nop");
   \   0000002E   0xBF00             nop              
    317              asm("nop");
   \   00000030   0xBF00             nop              
    318          //        asm("nop");
    319          //    asm("nop");
    320          //    asm("nop");
    321          //    asm("nop");
    322          //    asm("nop");
    323          //    asm("nop");
    324          //    asm("nop");
    325          //    asm("nop");
    326          //    asm("nop");
    327          //    asm("nop");
    328          //    asm("nop");
    329          //    asm("nop");
    330          }
   \   00000032   0x4770             BX       LR               ;; return
    331          
    332          /*4.CCD启动程序*/
    333          

   \                                 In section .text, align 2, keep-with-next
    334          void ImageCapture(uint16 * ImageData) {
   \                     ImageCapture:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    335          
    336              unsigned char i;
    337              extern uint8 AtemP ;
    338          
    339              CCD_SI(1);            /* SI  = 1 */
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      BL       gpio_set
    340              SamplingDelay();
   \   0000000E   0x.... 0x....      BL       SamplingDelay
    341              CCD_CLK(1);           /* CLK = 1 */
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2004             MOVS     R0,#+4
   \   00000018   0x.... 0x....      BL       gpio_set
    342              SamplingDelay();
   \   0000001C   0x.... 0x....      BL       SamplingDelay
    343              CCD_SI(0);            /* SI  = 0 */
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x2004             MOVS     R0,#+4
   \   00000026   0x.... 0x....      BL       gpio_set
    344              SamplingDelay();
   \   0000002A   0x.... 0x....      BL       SamplingDelay
    345          
    346              
    347          //    for(i = 0; i < 50; i++) {               //Delay 10us for sample the first pixel
    348          //      SamplingDelay() ;  //200ns           
    349          //    } 
    350              //adc_start(ADC0, AD12, ADC_10bit );
    351              
    352              *ImageData =  ad_once(ADC0, AD12, ADC_10bit);
   \   0000002E   0x2202             MOVS     R2,#+2
   \   00000030   0x210C             MOVS     R1,#+12
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       ad_once
   \   00000038   0x8020             STRH     R0,[R4, #+0]
    353              ImageData ++ ;
   \   0000003A   0x1CA4             ADDS     R4,R4,#+2
    354            
    355              
    356              CCD_CLK(0);           /* CLK = 0 */
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x2004             MOVS     R0,#+4
   \   00000042   0x.... 0x....      BL       gpio_set
    357                
    358          
    359              for(i=0; i<127; i++) {
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x0005             MOVS     R5,R0
   \                     ??ImageCapture_0:
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0x2D7F             CMP      R5,#+127
   \   0000004E   0xD21A             BCS.N    ??ImageCapture_1
    360                  SamplingDelay();
   \   00000050   0x.... 0x....      BL       SamplingDelay
    361                  SamplingDelay();
   \   00000054   0x.... 0x....      BL       SamplingDelay
    362                  CCD_CLK(1);       /* CLK = 1 */
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x2004             MOVS     R0,#+4
   \   0000005E   0x.... 0x....      BL       gpio_set
    363                  SamplingDelay();
   \   00000062   0x.... 0x....      BL       SamplingDelay
    364                  SamplingDelay();
   \   00000066   0x.... 0x....      BL       SamplingDelay
    365                  //Sampling Pixel 2~128
    366          
    367                  *ImageData = ad_once(ADC0, AD12, ADC_10bit);
   \   0000006A   0x2202             MOVS     R2,#+2
   \   0000006C   0x210C             MOVS     R1,#+12
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x.... 0x....      BL       ad_once
   \   00000074   0x8020             STRH     R0,[R4, #+0]
    368                  ImageData ++ ;
   \   00000076   0x1CA4             ADDS     R4,R4,#+2
    369                  CCD_CLK(0);       /* CLK = 0 */
   \   00000078   0x2200             MOVS     R2,#+0
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x2004             MOVS     R0,#+4
   \   0000007E   0x.... 0x....      BL       gpio_set
    370                  
    371              }
   \   00000082   0x1C6D             ADDS     R5,R5,#+1
   \   00000084   0xE7E1             B.N      ??ImageCapture_0
    372              //adc_stop(ADC0);
    373              SamplingDelay();
   \                     ??ImageCapture_1:
   \   00000086   0x.... 0x....      BL       SamplingDelay
    374              SamplingDelay();
   \   0000008A   0x.... 0x....      BL       SamplingDelay
    375              CCD_CLK(1);           /* CLK = 1 */
   \   0000008E   0x2201             MOVS     R2,#+1
   \   00000090   0x2101             MOVS     R1,#+1
   \   00000092   0x2004             MOVS     R0,#+4
   \   00000094   0x.... 0x....      BL       gpio_set
    376              SamplingDelay();
   \   00000098   0x.... 0x....      BL       SamplingDelay
    377              SamplingDelay();
   \   0000009C   0x.... 0x....      BL       SamplingDelay
    378              CCD_CLK(0);           /* CLK = 0 */
   \   000000A0   0x2200             MOVS     R2,#+0
   \   000000A2   0x2101             MOVS     R1,#+1
   \   000000A4   0x2004             MOVS     R0,#+4
   \   000000A6   0x.... 0x....      BL       gpio_set
    379          }
   \   000000AA   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    380          
    381          
    382          /*
    383          void mid( )
    384          {
    385              uint16 a, b, c, tmp;
    386              
    387              uint8 i;
    388              
    389              Pixel_fil[0]=Pixel[0];
    390              
    391              for(i=1;i<127;i++){
    392                a =  Pixel[i-1];
    393                b =  Pixel[i];
    394                c =  Pixel[i+1];
    395                tmp = a > b ? a : b;          //tmp取两者最大值
    396                Pixel_fil[i]=c > tmp ?    tmp :  (   c > a  ?    c   :     a  );
    397              }
    398              
    399              Pixel_fil[127]=Pixel[127];
    400                                                            
    401          }
    402          */
    403          #define LATCH_LINE  104

   \                                 In section .bss, align 4
    404          uint8 line_latch[LATCH_LINE]={0};  //灰度值数组 
   \                     line_latch:
   \   00000000                      DS8 104

   \                                 In section .bss, align 2
    405          uint16 black_latch=0;
   \                     black_latch:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    406          uint16 white_latch=0;
   \                     white_latch:
   \   00000000                      DS8 2
    407          

   \                                 In section .text, align 2, keep-with-next
    408          void get_latch(void) //双峰直方图测动态阀值     //如果出现问题，请检查电池是否有电
    409          {
   \                     get_latch:
   \   00000000   0xB430             PUSH     {R4,R5}
    410             uint8 i=0;
   \   00000002   0x2100             MOVS     R1,#+0
    411             uint8 temp=0;
   \   00000004   0x2000             MOVS     R0,#+0
    412            
    413             for (i=0;i<LATCH_LINE;i++) 
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x0011             MOVS     R1,R2
   \                     ??get_latch_0:
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x2968             CMP      R1,#+104
   \   0000000E   0xD206             BCS.N    ??get_latch_1
    414                line_latch[i]=0;
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x548B             STRB     R3,[R1, R2]
   \   0000001A   0x1C49             ADDS     R1,R1,#+1
   \   0000001C   0xE7F5             B.N      ??get_latch_0
    415             
    416             for (i=0;i<127;i++)                           
   \                     ??get_latch_1:
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x0011             MOVS     R1,R2
   \                     ??get_latch_2:
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x297F             CMP      R1,#+127
   \   00000026   0xD218             BCS.N    ??get_latch_3
    417                    line_latch[Pixel[i]/10]++; 
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable14_2
   \   0000002E   0xF832 0x2011      LDRH     R2,[R2, R1, LSL #+1]
   \   00000032   0x230A             MOVS     R3,#+10
   \   00000034   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00000038   0x.... 0x....      LDR.W    R3,??DataTable14_1
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x.... 0x....      LDR.W    R4,??DataTable14_2
   \   00000042   0xF834 0x4011      LDRH     R4,[R4, R1, LSL #+1]
   \   00000046   0x250A             MOVS     R5,#+10
   \   00000048   0xFB94 0xF4F5      SDIV     R4,R4,R5
   \   0000004C   0x.... 0x....      LDR.W    R5,??DataTable14_1
   \   00000050   0x5D64             LDRB     R4,[R4, R5]
   \   00000052   0x1C64             ADDS     R4,R4,#+1
   \   00000054   0x54D4             STRB     R4,[R2, R3]
   \   00000056   0x1C49             ADDS     R1,R1,#+1
   \   00000058   0xE7E3             B.N      ??get_latch_2
    418          
    419                                                          
    420          
    421             for(i=LATCH_LINE;i>LATCH_LINE-50;i--)  
   \                     ??get_latch_3:
   \   0000005A   0x2268             MOVS     R2,#+104
   \   0000005C   0x0011             MOVS     R1,R2
   \                     ??get_latch_4:
   \   0000005E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000060   0x2937             CMP      R1,#+55
   \   00000062   0xD329             BCC.N    ??get_latch_5
    422             {
    423                if(line_latch[i-1]>line_latch[i])
   \   00000064   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000066   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   0000006A   0x5C8A             LDRB     R2,[R1, R2]
   \   0000006C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable14_1
   \   00000072   0x18CB             ADDS     R3,R1,R3
   \   00000074   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   00000078   0x429A             CMP      R2,R3
   \   0000007A   0xD21B             BCS.N    ??get_latch_6
    424                {
    425                    temp= line_latch[i];
   \   0000007C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000007E   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   00000082   0x5C8A             LDRB     R2,[R1, R2]
   \   00000084   0x0010             MOVS     R0,R2
    426                    line_latch[i]=line_latch[i-1];
   \   00000086   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000088   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   0000008C   0x188A             ADDS     R2,R1,R2
   \   0000008E   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   00000092   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000094   0x.... 0x....      LDR.W    R3,??DataTable14_1
   \   00000098   0x54CA             STRB     R2,[R1, R3]
    427                    line_latch[i-1]=temp;
   \   0000009A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009C   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   000000A0   0x188A             ADDS     R2,R1,R2
   \   000000A2   0xF802 0x0C01      STRB     R0,[R2, #-1]
    428                    
    429                    white_latch=(i-1)*10;
   \   000000A6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A8   0x1E4A             SUBS     R2,R1,#+1
   \   000000AA   0x230A             MOVS     R3,#+10
   \   000000AC   0x435A             MULS     R2,R3,R2
   \   000000AE   0x.... 0x....      LDR.W    R3,??DataTable15_1
   \   000000B2   0x801A             STRH     R2,[R3, #+0]
    430                }
    431             
    432             }
   \                     ??get_latch_6:
   \   000000B4   0x1E49             SUBS     R1,R1,#+1
   \   000000B6   0xE7D2             B.N      ??get_latch_4
    433             
    434             
    435             for(i=10;i<40;i++) 
   \                     ??get_latch_5:
   \   000000B8   0x220A             MOVS     R2,#+10
   \   000000BA   0x0011             MOVS     R1,R2
   \                     ??get_latch_7:
   \   000000BC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BE   0x2928             CMP      R1,#+40
   \   000000C0   0xD228             BCS.N    ??get_latch_8
    436             {
    437                if(line_latch[i+1]>line_latch[i])
   \   000000C2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000C4   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   000000C8   0x5C8A             LDRB     R2,[R1, R2]
   \   000000CA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000CC   0x.... 0x....      LDR.W    R3,??DataTable14_1
   \   000000D0   0x18CB             ADDS     R3,R1,R3
   \   000000D2   0x785B             LDRB     R3,[R3, #+1]
   \   000000D4   0x429A             CMP      R2,R3
   \   000000D6   0xD21B             BCS.N    ??get_latch_9
    438                {
    439                    temp= line_latch[i];
   \   000000D8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000DA   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   000000DE   0x5C8A             LDRB     R2,[R1, R2]
   \   000000E0   0x0010             MOVS     R0,R2
    440                    line_latch[i]=line_latch[i-1];
   \   000000E2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E4   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   000000E8   0x188A             ADDS     R2,R1,R2
   \   000000EA   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   000000EE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F0   0x.... 0x....      LDR.W    R3,??DataTable14_1
   \   000000F4   0x54CA             STRB     R2,[R1, R3]
    441                    line_latch[i-1]=temp;
   \   000000F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F8   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   000000FC   0x188A             ADDS     R2,R1,R2
   \   000000FE   0xF802 0x0C01      STRB     R0,[R2, #-1]
    442                    
    443                    black_latch=(i+1)*10;
   \   00000102   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000104   0x1C4A             ADDS     R2,R1,#+1
   \   00000106   0x230A             MOVS     R3,#+10
   \   00000108   0x435A             MULS     R2,R3,R2
   \   0000010A   0x.... 0x....      LDR.W    R3,??DataTable15_2
   \   0000010E   0x801A             STRH     R2,[R3, #+0]
    444                }
    445             
    446             }
   \                     ??get_latch_9:
   \   00000110   0x1C49             ADDS     R1,R1,#+1
   \   00000112   0xE7D3             B.N      ??get_latch_7
    447            
    448             
    449             latch=(white_latch+black_latch)/2;
   \                     ??get_latch_8:
   \   00000114   0x.... 0x....      LDR.W    R2,??DataTable15_1
   \   00000118   0x8812             LDRH     R2,[R2, #+0]
   \   0000011A   0x.... 0x....      LDR.W    R3,??DataTable15_2
   \   0000011E   0x881B             LDRH     R3,[R3, #+0]
   \   00000120   0xFA13 0xF282      UXTAH    R2,R3,R2
   \   00000124   0x2302             MOVS     R3,#+2
   \   00000126   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   0000012A   0x.... 0x....      LDR.W    R3,??DataTable15_3
   \   0000012E   0x801A             STRH     R2,[R3, #+0]
    450          
    451          }
   \   00000130   0xBC30             POP      {R4,R5}
   \   00000132   0x4770             BX       LR               ;; return
    452          
    453          
    454          /*5.采样值二值化*/
    455          

   \                                 In section .text, align 2, keep-with-next
    456          void pixel_binarize(uint16 *Pixel_data)
    457            {    
    458              unsigned char i;    
    459                
    460              for(i=0;i<128;i++)
   \                     pixel_binarize:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x0011             MOVS     R1,R2
   \                     ??pixel_binarize_0:
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x2980             CMP      R1,#+128
   \   00000008   0xD214             BCS.N    ??pixel_binarize_1
    461                {
    462                
    463                  if(*Pixel_data++>=latch)
   \   0000000A   0x0002             MOVS     R2,R0
   \   0000000C   0x1C90             ADDS     R0,R2,#+2
   \   0000000E   0x8812             LDRH     R2,[R2, #+0]
   \   00000010   0x.... 0x....      LDR.W    R3,??DataTable15_3
   \   00000014   0x881B             LDRH     R3,[R3, #+0]
   \   00000016   0x429A             CMP      R2,R3
   \   00000018   0xD305             BCC.N    ??pixel_binarize_2
    464                     CCD_value[i]=1;
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0x.... 0x....      LDR.W    R2,??DataTable15_4
   \   00000020   0x2301             MOVS     R3,#+1
   \   00000022   0x548B             STRB     R3,[R1, R2]
   \   00000024   0xE004             B.N      ??pixel_binarize_3
    465                  else
    466                     CCD_value[i]=0; 
   \                     ??pixel_binarize_2:
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x.... 0x....      LDR.W    R2,??DataTable15_4
   \   0000002C   0x2300             MOVS     R3,#+0
   \   0000002E   0x548B             STRB     R3,[R1, R2]
    467                }    
   \                     ??pixel_binarize_3:
   \   00000030   0x1C49             ADDS     R1,R1,#+1
   \   00000032   0xE7E7             B.N      ??pixel_binarize_0
    468            }
   \                     ??pixel_binarize_1:
   \   00000034   0x4770             BX       LR               ;; return
    469            
    470           
    471          
    472          
    473          /*6.偏差获取*/

   \                                 In section .bss, align 1
    474          uint8 ccd_scan_flag=0;
   \                     ccd_scan_flag:
   \   00000000                      DS8 1

   \                                 In section .data, align 2
    475          uint16 ccd_scan_num=100;
   \                     ccd_scan_num:
   \   00000000   0x0064             DC16 100

   \                                 In section .data, align 1
    476          uint8 Left_cnt1=63;
   \                     Left_cnt1:
   \   00000000   0x3F               DC8 63

   \                                 In section .data, align 1
    477          uint8 Left_cnt2=63;
   \                     Left_cnt2:
   \   00000000   0x3F               DC8 63

   \                                 In section .data, align 1
    478          uint8 Right_cnt1=63;
   \                     Right_cnt1:
   \   00000000   0x3F               DC8 63

   \                                 In section .data, align 1
    479          uint8 Right_cnt2=63;
   \                     Right_cnt2:
   \   00000000   0x3F               DC8 63

   \                                 In section .data, align 1
    480          uint8 last_Right_cnt=63;
   \                     last_Right_cnt:
   \   00000000   0x3F               DC8 63

   \                                 In section .data, align 1
    481          uint8 last_Left_cnt=63;
   \                     last_Left_cnt:
   \   00000000   0x3F               DC8 63
    482          
    483          

   \                                 In section .text, align 2, keep-with-next
    484          void edge_error(void) 
    485          {
   \                     edge_error:
   \   00000000   0xB510             PUSH     {R4,LR}
    486              
    487              uint8 i=63;
   \   00000002   0x243F             MOVS     R4,#+63
    488          //    if(ccd_scan_num>0){
    489          //      ccd_scan_num--;
    490          //      if(ccd_scan_num==0)
    491          //        ccd_scan_flag=1;
    492          //	}
    493              
    494               //for(i=(ccd_scan_flag ? Left_cnt+10 : 63);i> 0;i--)
    495              i=63;
   \   00000004   0x203F             MOVS     R0,#+63
   \   00000006   0x0004             MOVS     R4,R0
    496                 while(CCD_value[i]) 
   \                     ??edge_error_0:
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \   0000000E   0x5C20             LDRB     R0,[R4, R0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD001             BEQ.N    ??edge_error_1
    497                 {
    498                   i--;
   \   00000014   0x1E64             SUBS     R4,R4,#+1
   \   00000016   0xE7F7             B.N      ??edge_error_0
    499                 }
    500               Left_cnt=i;
   \                     ??edge_error_1:
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   0000001C   0x7004             STRB     R4,[R0, #+0]
    501               //for(i=(ccd_scan_flag ? Right_cnt-10 : 63);i<128;i++)
    502               i=63;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0x0004             MOVS     R4,R0
    503                 while(CCD_value[i]) 
   \                     ??edge_error_2:
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \   00000028   0x5C20             LDRB     R0,[R4, R0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD001             BEQ.N    ??edge_error_3
    504                 {
    505                  i++;
   \   0000002E   0x1C64             ADDS     R4,R4,#+1
   \   00000030   0xE7F7             B.N      ??edge_error_2
    506          
    507                 }
    508                Right_cnt=i;
   \                     ??edge_error_3:
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   00000036   0x7004             STRB     R4,[R0, #+0]
    509          
    510              white_center=(Left_cnt+Right_cnt)/2.0;//计算白线中心值  
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable15_6
   \   00000042   0x7809             LDRB     R1,[R1, #+0]
   \   00000044   0x1808             ADDS     R0,R1,R0
   \   00000046   0x.... 0x....      BL       __aeabi_i2d
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   00000050   0x.... 0x....      BL       __aeabi_ddiv
   \   00000054   0x.... 0x....      BL       __aeabi_d2f
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   0000005C   0x6008             STR      R0,[R1, #+0]
    511              p_distance=white_center-WHITE_CENTER;//计算偏差
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable15_8
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x.... 0x....      BL       __aeabi_ui2f
   \   00000068   0x0001             MOVS     R1,R0
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable15_7
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x.... 0x....      BL       __aeabi_fsub
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable15_9
   \   00000078   0x6008             STR      R0,[R1, #+0]
    512              
    513              if(Right_cnt-Left_cnt>108||Right_cnt-Left_cnt<60)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \   00000084   0x7809             LDRB     R1,[R1, #+0]
   \   00000086   0x1A40             SUBS     R0,R0,R1
   \   00000088   0x286D             CMP      R0,#+109
   \   0000008A   0xDA08             BGE.N    ??edge_error_4
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \   00000096   0x7809             LDRB     R1,[R1, #+0]
   \   00000098   0x1A40             SUBS     R0,R0,R1
   \   0000009A   0x283C             CMP      R0,#+60
   \   0000009C   0xDA03             BGE.N    ??edge_error_5
    514               p_distance= 0;
   \                     ??edge_error_4:
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable15_9
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x6001             STR      R1,[R0, #+0]
    515              
    516          } 
   \                     ??edge_error_5:
   \   000000A6   0xBD10             POP      {R4,PC}          ;; return
    517          
    518           

   \                                 In section .text, align 2, keep-with-next
    519          void edge_error1(void) 
    520          {
   \                     edge_error1:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    521              
    522              uint8 i=0;
   \   00000002   0x2400             MOVS     R4,#+0
    523           // uint8 j=0;
    524              if(ccd_scan_num>0){
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable15_10
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD30F             BCC.N    ??edge_error1_0
    525               ccd_scan_num--;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable15_10
   \   00000012   0x8800             LDRH     R0,[R0, #+0]
   \   00000014   0x1E40             SUBS     R0,R0,#+1
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable15_10
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
    526                if(ccd_scan_num==0)
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable15_10
   \   00000020   0x8800             LDRH     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD103             BNE.N    ??edge_error1_0
    527                  ccd_scan_flag=1;
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable15_11
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x7001             STRB     R1,[R0, #+0]
    528          	}
    529              
    530               //for(i=(ccd_scan_flag ? Left_cnt+10 : 63);i> 0;i--)
    531              //i=(uint8)white_center;
    532              //i=(Left_cnt+Right_cnt)/2 ;
    533              i=63;
   \                     ??edge_error1_0:
   \   0000002E   0x203F             MOVS     R0,#+63
   \   00000030   0x0004             MOVS     R4,R0
    534                 while(CCD_value[i]) 
   \                     ??edge_error1_1:
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \   00000038   0x5C20             LDRB     R0,[R4, R0]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD001             BEQ.N    ??edge_error1_2
    535                 {
    536                   i--;
   \   0000003E   0x1E64             SUBS     R4,R4,#+1
   \   00000040   0xE7F7             B.N      ??edge_error1_1
    537                 }
    538                 
    539               Left_cnt1=i;
   \                     ??edge_error1_2:
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable15_12
   \   00000046   0x7004             STRB     R4,[R0, #+0]
    540               
    541               while(!CCD_value[i]){
   \                     ??edge_error1_3:
   \   00000048   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \   0000004E   0x5C20             LDRB     R0,[R4, R0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD101             BNE.N    ??edge_error1_4
    542                 i--;
   \   00000054   0x1E64             SUBS     R4,R4,#+1
   \   00000056   0xE7F7             B.N      ??edge_error1_3
    543               }
    544               if(i==0)
   \                     ??edge_error1_4:
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x2C00             CMP      R4,#+0
   \   0000005C   0xD106             BNE.N    ??edge_error1_5
    545                 Left_cnt= Left_cnt1;
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable15_12
   \   00000066   0x7809             LDRB     R1,[R1, #+0]
   \   00000068   0x7001             STRB     R1,[R0, #+0]
   \   0000006A   0xE033             B.N      ??edge_error1_6
    546               else{
    547                 
    548                 while(CCD_value[i]) {i--;}
   \                     ??edge_error1_5:
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \   00000072   0x5C20             LDRB     R0,[R4, R0]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD001             BEQ.N    ??edge_error1_7
   \   00000078   0x1E64             SUBS     R4,R4,#+1
   \   0000007A   0xE7F7             B.N      ??edge_error1_5
    549                 
    550                 if(i==0)  Left_cnt= Left_cnt1;
   \                     ??edge_error1_7:
   \   0000007C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007E   0x2C00             CMP      R4,#+0
   \   00000080   0xD106             BNE.N    ??edge_error1_8
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable15_12
   \   0000008A   0x7809             LDRB     R1,[R1, #+0]
   \   0000008C   0x7001             STRB     R1,[R0, #+0]
   \   0000008E   0xE021             B.N      ??edge_error1_6
    551          
    552                 else{ 
    553                   Left_cnt2=i;
   \                     ??edge_error1_8:
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable15_13
   \   00000094   0x7004             STRB     R4,[R0, #+0]
    554                   Left_cnt=(abs(Left_cnt-Left_cnt1)<abs(Left_cnt-Left_cnt2))?Left_cnt1:Left_cnt2;
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   0000009A   0x7800             LDRB     R0,[R0, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable15_12
   \   000000A0   0x7809             LDRB     R1,[R1, #+0]
   \   000000A2   0x1A40             SUBS     R0,R0,R1
   \   000000A4   0x.... 0x....      BL       abs
   \   000000A8   0x0005             MOVS     R5,R0
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   000000AE   0x7800             LDRB     R0,[R0, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable15_13
   \   000000B4   0x7809             LDRB     R1,[R1, #+0]
   \   000000B6   0x1A40             SUBS     R0,R0,R1
   \   000000B8   0x.... 0x....      BL       abs
   \   000000BC   0x4285             CMP      R5,R0
   \   000000BE   0xDA03             BGE.N    ??edge_error1_9
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable15_12
   \   000000C4   0x7800             LDRB     R0,[R0, #+0]
   \   000000C6   0xE002             B.N      ??edge_error1_10
   \                     ??edge_error1_9:
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable15_13
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \                     ??edge_error1_10:
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \   000000D2   0x7008             STRB     R0,[R1, #+0]
    555                 }
    556                  
    557               }
    558               
    559                
    560                
    561                i=63;
   \                     ??edge_error1_6:
   \   000000D4   0x203F             MOVS     R0,#+63
   \   000000D6   0x0004             MOVS     R4,R0
    562                 while(CCD_value[i]) 
   \                     ??edge_error1_11:
   \   000000D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \   000000DE   0x5C20             LDRB     R0,[R4, R0]
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD001             BEQ.N    ??edge_error1_12
    563                 {
    564                  i++;
   \   000000E4   0x1C64             ADDS     R4,R4,#+1
   \   000000E6   0xE7F7             B.N      ??edge_error1_11
    565          
    566                 }
    567                Right_cnt1=i;
   \                     ??edge_error1_12:
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable15_14
   \   000000EC   0x7004             STRB     R4,[R0, #+0]
    568                
    569                while(!CCD_value[i]){
   \                     ??edge_error1_13:
   \   000000EE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \   000000F4   0x5C20             LDRB     R0,[R4, R0]
   \   000000F6   0x2800             CMP      R0,#+0
   \   000000F8   0xD101             BNE.N    ??edge_error1_14
    570                 i++;
   \   000000FA   0x1C64             ADDS     R4,R4,#+1
   \   000000FC   0xE7F7             B.N      ??edge_error1_13
    571               }
    572               if(i==127)
   \                     ??edge_error1_14:
   \   000000FE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000100   0x2C7F             CMP      R4,#+127
   \   00000102   0xD106             BNE.N    ??edge_error1_15
    573                 Right_cnt= Right_cnt1;
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable15_14
   \   0000010C   0x7809             LDRB     R1,[R1, #+0]
   \   0000010E   0x7001             STRB     R1,[R0, #+0]
   \   00000110   0xE033             B.N      ??edge_error1_16
    574               else{
    575                 
    576                 while(CCD_value[i]) {i++;}
   \                     ??edge_error1_15:
   \   00000112   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \   00000118   0x5C20             LDRB     R0,[R4, R0]
   \   0000011A   0x2800             CMP      R0,#+0
   \   0000011C   0xD001             BEQ.N    ??edge_error1_17
   \   0000011E   0x1C64             ADDS     R4,R4,#+1
   \   00000120   0xE7F7             B.N      ??edge_error1_15
    577                 
    578                 if(i==127)  Left_cnt= Left_cnt1;
   \                     ??edge_error1_17:
   \   00000122   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000124   0x2C7F             CMP      R4,#+127
   \   00000126   0xD106             BNE.N    ??edge_error1_18
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable15_12
   \   00000130   0x7809             LDRB     R1,[R1, #+0]
   \   00000132   0x7001             STRB     R1,[R0, #+0]
   \   00000134   0xE021             B.N      ??edge_error1_16
    579          
    580                 else 
    581                 { 
    582                   Right_cnt2=i;
   \                     ??edge_error1_18:
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable15_15
   \   0000013A   0x7004             STRB     R4,[R0, #+0]
    583                    Left_cnt=(abs(Right_cnt-Right_cnt1)<abs(Right_cnt-Right_cnt2))?Right_cnt1:Right_cnt2;
   \   0000013C   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   00000140   0x7800             LDRB     R0,[R0, #+0]
   \   00000142   0x.... 0x....      LDR.W    R1,??DataTable15_14
   \   00000146   0x7809             LDRB     R1,[R1, #+0]
   \   00000148   0x1A40             SUBS     R0,R0,R1
   \   0000014A   0x.... 0x....      BL       abs
   \   0000014E   0x0005             MOVS     R5,R0
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   00000154   0x7800             LDRB     R0,[R0, #+0]
   \   00000156   0x.... 0x....      LDR.W    R1,??DataTable15_15
   \   0000015A   0x7809             LDRB     R1,[R1, #+0]
   \   0000015C   0x1A40             SUBS     R0,R0,R1
   \   0000015E   0x.... 0x....      BL       abs
   \   00000162   0x4285             CMP      R5,R0
   \   00000164   0xDA03             BGE.N    ??edge_error1_19
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable15_14
   \   0000016A   0x7800             LDRB     R0,[R0, #+0]
   \   0000016C   0xE002             B.N      ??edge_error1_20
   \                     ??edge_error1_19:
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable15_15
   \   00000172   0x7800             LDRB     R0,[R0, #+0]
   \                     ??edge_error1_20:
   \   00000174   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \   00000178   0x7008             STRB     R0,[R1, #+0]
    584                 }
    585                  
    586               }
    587               
    588               if(ccd_scan_flag){
   \                     ??edge_error1_16:
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable15_11
   \   0000017E   0x7800             LDRB     R0,[R0, #+0]
   \   00000180   0x2800             CMP      R0,#+0
   \   00000182   0xD021             BEQ.N    ??edge_error1_21
    589               if(abs(Left_cnt-last_Left_cnt)>8||abs(Right_cnt-last_Right_cnt)>8)
   \   00000184   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   00000188   0x7800             LDRB     R0,[R0, #+0]
   \   0000018A   0x.... 0x....      LDR.W    R1,??DataTable15_16
   \   0000018E   0x7809             LDRB     R1,[R1, #+0]
   \   00000190   0x1A40             SUBS     R0,R0,R1
   \   00000192   0x.... 0x....      BL       abs
   \   00000196   0x2809             CMP      R0,#+9
   \   00000198   0xDA0A             BGE.N    ??edge_error1_22
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   0000019E   0x7800             LDRB     R0,[R0, #+0]
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable15_17
   \   000001A4   0x7809             LDRB     R1,[R1, #+0]
   \   000001A6   0x1A40             SUBS     R0,R0,R1
   \   000001A8   0x.... 0x....      BL       abs
   \   000001AC   0x2809             CMP      R0,#+9
   \   000001AE   0xDB0B             BLT.N    ??edge_error1_21
    590               {
    591                 Left_cnt=last_Left_cnt;
   \                     ??edge_error1_22:
   \   000001B0   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   000001B4   0x.... 0x....      LDR.W    R1,??DataTable15_16
   \   000001B8   0x7809             LDRB     R1,[R1, #+0]
   \   000001BA   0x7001             STRB     R1,[R0, #+0]
    592                 Right_cnt=last_Right_cnt;
   \   000001BC   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   000001C0   0x.... 0x....      LDR.W    R1,??DataTable15_17
   \   000001C4   0x7809             LDRB     R1,[R1, #+0]
   \   000001C6   0x7001             STRB     R1,[R0, #+0]
    593               }
    594               }
    595          
    596              white_center=(Left_cnt+Right_cnt)/2.0;//计算白线中心值  
   \                     ??edge_error1_21:
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   000001CC   0x7800             LDRB     R0,[R0, #+0]
   \   000001CE   0x.... 0x....      LDR.W    R1,??DataTable15_6
   \   000001D2   0x7809             LDRB     R1,[R1, #+0]
   \   000001D4   0x1808             ADDS     R0,R1,R0
   \   000001D6   0x.... 0x....      BL       __aeabi_i2d
   \   000001DA   0x2200             MOVS     R2,#+0
   \   000001DC   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   000001E0   0x.... 0x....      BL       __aeabi_ddiv
   \   000001E4   0x.... 0x....      BL       __aeabi_d2f
   \   000001E8   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   000001EC   0x6008             STR      R0,[R1, #+0]
    597              p_distance=white_center-WHITE_CENTER;//计算偏差
   \   000001EE   0x.... 0x....      LDR.W    R0,??DataTable15_8
   \   000001F2   0x7800             LDRB     R0,[R0, #+0]
   \   000001F4   0x.... 0x....      BL       __aeabi_ui2f
   \   000001F8   0x0001             MOVS     R1,R0
   \   000001FA   0x.... 0x....      LDR.W    R0,??DataTable15_7
   \   000001FE   0x6800             LDR      R0,[R0, #+0]
   \   00000200   0x.... 0x....      BL       __aeabi_fsub
   \   00000204   0x.... 0x....      LDR.W    R1,??DataTable15_9
   \   00000208   0x6008             STR      R0,[R1, #+0]
    598              
    599              if(Right_cnt-Left_cnt>108||Right_cnt-Left_cnt<50)
   \   0000020A   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   0000020E   0x7800             LDRB     R0,[R0, #+0]
   \   00000210   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \   00000214   0x7809             LDRB     R1,[R1, #+0]
   \   00000216   0x1A40             SUBS     R0,R0,R1
   \   00000218   0x286D             CMP      R0,#+109
   \   0000021A   0xDA08             BGE.N    ??edge_error1_23
   \   0000021C   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   00000220   0x7800             LDRB     R0,[R0, #+0]
   \   00000222   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \   00000226   0x7809             LDRB     R1,[R1, #+0]
   \   00000228   0x1A40             SUBS     R0,R0,R1
   \   0000022A   0x2832             CMP      R0,#+50
   \   0000022C   0xDA03             BGE.N    ??edge_error1_24
    600               p_distance= 0;
   \                     ??edge_error1_23:
   \   0000022E   0x.... 0x....      LDR.W    R0,??DataTable15_9
   \   00000232   0x2100             MOVS     R1,#+0
   \   00000234   0x6001             STR      R1,[R0, #+0]
    601                                               
    602              
    603               last_Left_cnt  =Left_cnt;
   \                     ??edge_error1_24:
   \   00000236   0x.... 0x....      LDR.W    R0,??DataTable15_16
   \   0000023A   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \   0000023E   0x7809             LDRB     R1,[R1, #+0]
   \   00000240   0x7001             STRB     R1,[R0, #+0]
    604               last_Right_cnt=Right_cnt;
   \   00000242   0x.... 0x....      LDR.W    R0,??DataTable15_17
   \   00000246   0x.... 0x....      LDR.W    R1,??DataTable15_6
   \   0000024A   0x7809             LDRB     R1,[R1, #+0]
   \   0000024C   0x7001             STRB     R1,[R0, #+0]
    605               
    606               
    607              
    608          } 
   \   0000024E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    609          
    610           
    611                                                                                                               
    612          /*7.方向输出*/  

   \                                 In section .bss, align 4
    613          float last_dis_error=0;
   \                     last_dis_error:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    614          void CarDirectionAdjust()
    615          {
   \                     CarDirectionAdjust:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    616                uint8 i;	
    617                
    618                for(i=0;i<10-1;i++)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0006             MOVS     R6,R0
   \                     ??CarDirectionAdjust_0:
   \   00000006   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000008   0x2E09             CMP      R6,#+9
   \   0000000A   0xD20C             BCS.N    ??CarDirectionAdjust_1
    619                {
    620                     Distance[i]=Distance[i+1];
   \   0000000C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable15_18
   \   00000012   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable15_18
   \   0000001E   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
    621                }
   \   00000022   0x1C76             ADDS     R6,R6,#+1
   \   00000024   0xE7EF             B.N      ??CarDirectionAdjust_0
    622                     Distance[9]=p_distance;
   \                     ??CarDirectionAdjust_1:
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable15_18
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable15_9
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0x6241             STR      R1,[R0, #+36]
    623                
    624                 
    625          
    626                 error=p_distance;     //sum/5;
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable15_19
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable15_9
   \   0000003A   0x6809             LDR      R1,[R1, #+0]
   \   0000003C   0x6001             STR      R1,[R0, #+0]
    627                 
    628                 dis_error=0.8*(Distance[9]-Distance[5])+0.2*last_dis_error;
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable15_18
   \   00000042   0x6A40             LDR      R0,[R0, #+36]
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable15_18
   \   00000048   0x6949             LDR      R1,[R1, #+20]
   \   0000004A   0x.... 0x....      BL       __aeabi_fsub
   \   0000004E   0x.... 0x....      BL       __aeabi_f2d
   \   00000052   0x.... 0x....      LDR.W    R2,??DataTable11_13  ;; 0x9999999a
   \   00000056   0x.... 0x....      LDR.W    R3,??DataTable15_20  ;; 0x3fe99999
   \   0000005A   0x.... 0x....      BL       __aeabi_dmul
   \   0000005E   0x0004             MOVS     R4,R0
   \   00000060   0x000D             MOVS     R5,R1
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable15_21
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x.... 0x....      BL       __aeabi_f2d
   \   0000006C   0x.... 0x....      LDR.W    R2,??DataTable11_13  ;; 0x9999999a
   \   00000070   0x.... 0x....      LDR.W    R3,??DataTable15_22  ;; 0x3fc99999
   \   00000074   0x.... 0x....      BL       __aeabi_dmul
   \   00000078   0x0022             MOVS     R2,R4
   \   0000007A   0x002B             MOVS     R3,R5
   \   0000007C   0x.... 0x....      BL       __aeabi_dadd
   \   00000080   0x.... 0x....      BL       __aeabi_d2f
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable15_23
   \   00000088   0x6008             STR      R0,[R1, #+0]
    629                // dis_error=error-last_error;
    630                 
    631                 last_dis_error=dis_error;
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable15_21
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable15_23
   \   00000092   0x6809             LDR      R1,[R1, #+0]
   \   00000094   0x6001             STR      R1,[R0, #+0]
    632                 
    633                 last_error=error;
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable15_24
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable15_19
   \   0000009E   0x6809             LDR      R1,[R1, #+0]
   \   000000A0   0x6001             STR      R1,[R0, #+0]
    634          
    635              steerpwm=(int16)(steer_kp*error+ steer_kd* dis_error);     //       
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable15_25
   \   000000A6   0x6801             LDR      R1,[R0, #+0]
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable15_19
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0x.... 0x....      BL       __aeabi_fmul
   \   000000B2   0x0004             MOVS     R4,R0
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable15_26
   \   000000B8   0x6801             LDR      R1,[R0, #+0]
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable15_23
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x.... 0x....      BL       __aeabi_fmul
   \   000000C4   0x0021             MOVS     R1,R4
   \   000000C6   0x.... 0x....      BL       __aeabi_fadd
   \   000000CA   0x.... 0x....      BL       __aeabi_f2iz
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable15_27
   \   000000D2   0x8008             STRH     R0,[R1, #+0]
    636              
    637          }
   \   000000D4   0xBD70             POP      {R4-R6,PC}       ;; return
    638          
    639          
    640          /*------------------------------------------------------------------------------
    641                                            电机输出                                                    
    642                                    ( 角度+速度+方向=pwm输出)                                          
    643          ------------------------------------------------------------------------------*/
    644          
    645          

   \                                 In section .text, align 2, keep-with-next
    646          void CarControlOut()
    647          {
   \                     CarControlOut:
   \   00000000   0xB500             PUSH     {LR}
    648           
    649                    RightSpeedPwm = anglePD- SpeedPID+steerpwm;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable15
   \   0000000C   0x8809             LDRH     R1,[R1, #+0]
   \   0000000E   0x1A40             SUBS     R0,R0,R1
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable15_27
   \   00000014   0x8809             LDRH     R1,[R1, #+0]
   \   00000016   0x1808             ADDS     R0,R1,R0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable15_28
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
    650                    LeftSpeedPwm = anglePD- SpeedPID-steerpwm;
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable15
   \   00000028   0x8809             LDRH     R1,[R1, #+0]
   \   0000002A   0x1A40             SUBS     R0,R0,R1
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable15_27
   \   00000030   0x8809             LDRH     R1,[R1, #+0]
   \   00000032   0x1A40             SUBS     R0,R0,R1
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable15_29
   \   00000038   0x8008             STRH     R0,[R1, #+0]
    651                    
    652                    
    653                    
    654                    if(RightSpeedPwm>2500)  RightSpeedPwm = 2500 ;
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable15_28
   \   0000003E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000042   0xF640 0x11C5      MOVW     R1,#+2501
   \   00000046   0x4288             CMP      R0,R1
   \   00000048   0xDB04             BLT.N    ??CarControlOut_0
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable15_28
   \   0000004E   0xF640 0x11C4      MOVW     R1,#+2500
   \   00000052   0x8001             STRH     R1,[R0, #+0]
    655                    if(RightSpeedPwm<-2500)  RightSpeedPwm = -2500 ;
   \                     ??CarControlOut_0:
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable15_28
   \   00000058   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable15_30  ;; 0xfffff63c
   \   00000060   0x4288             CMP      R0,R1
   \   00000062   0xDA04             BGE.N    ??CarControlOut_1
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable15_28
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable15_30  ;; 0xfffff63c
   \   0000006C   0x8001             STRH     R1,[R0, #+0]
    656                    if(LeftSpeedPwm>2500)   LeftSpeedPwm =2500;
   \                     ??CarControlOut_1:
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable15_29
   \   00000072   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000076   0xF640 0x11C5      MOVW     R1,#+2501
   \   0000007A   0x4288             CMP      R0,R1
   \   0000007C   0xDB04             BLT.N    ??CarControlOut_2
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable15_29
   \   00000082   0xF640 0x11C4      MOVW     R1,#+2500
   \   00000086   0x8001             STRH     R1,[R0, #+0]
    657                    if(LeftSpeedPwm<-2500)  LeftSpeedPwm = -2500;
   \                     ??CarControlOut_2:
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable15_29
   \   0000008C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable15_30  ;; 0xfffff63c
   \   00000094   0x4288             CMP      R0,R1
   \   00000096   0xDA04             BGE.N    ??CarControlOut_3
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable15_29
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable15_30  ;; 0xfffff63c
   \   000000A0   0x8001             STRH     R1,[R0, #+0]
    658                    
    659                    
    660               
    661                    
    662                    if(g_nCarAngle > 15||g_nCarAngle<-15)
   \                     ??CarControlOut_3:
   \   000000A2   0x....             LDR.N    R0,??DataTable11
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable15_31  ;; 0x41700001
   \   000000AA   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000AE   0xD906             BLS.N    ??CarControlOut_4
   \   000000B0   0x....             LDR.N    R0,??DataTable11
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable15_32  ;; 0xc1700000
   \   000000B8   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000BC   0xD207             BCS.N    ??CarControlOut_5
    663                    {
    664                            LeftSpeedPwm = 0;
   \                     ??CarControlOut_4:
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable15_29
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x8001             STRH     R1,[R0, #+0]
    665                            RightSpeedPwm = 0;
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable15_28
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x8001             STRH     R1,[R0, #+0]
    666                    }
    667                    
    668           //左轮//
    669                    if( LeftSpeedPwm > 0 )
   \                     ??CarControlOut_5:
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable15_29
   \   000000D2   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000D6   0x2801             CMP      R0,#+1
   \   000000D8   0xDB0A             BLT.N    ??CarControlOut_6
    670                    {
    671                             FTM0_C0V = LeftSpeedPwm;                   
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable15_33  ;; 0x40038010
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable15_29
   \   000000E2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000E6   0x6001             STR      R1,[R0, #+0]
    672                             FTM0_C1V = 0;
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable15_34  ;; 0x40038018
   \   000000EC   0x2100             MOVS     R1,#+0
   \   000000EE   0x6001             STR      R1,[R0, #+0]
    673                             
    674                              
    675                    }
    676                    if( LeftSpeedPwm <= 0)
   \                     ??CarControlOut_6:
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable15_29
   \   000000F4   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000F8   0x2801             CMP      R0,#+1
   \   000000FA   0xDA0B             BGE.N    ??CarControlOut_7
    677                    {
    678                             FTM0_C0V = 0;
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable15_33  ;; 0x40038010
   \   00000100   0x2100             MOVS     R1,#+0
   \   00000102   0x6001             STR      R1,[R0, #+0]
    679                             FTM0_C1V = -LeftSpeedPwm;
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable15_34  ;; 0x40038018
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable15_29
   \   0000010C   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000110   0x4249             RSBS     R1,R1,#+0
   \   00000112   0x6001             STR      R1,[R0, #+0]
    680                           
    681                    }
    682          //右轮//
    683                    if(  RightSpeedPwm > 0 )
   \                     ??CarControlOut_7:
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable15_28
   \   00000118   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000011C   0x2801             CMP      R0,#+1
   \   0000011E   0xDB0A             BLT.N    ??CarControlOut_8
    684                    {
    685                             FTM0_C3V = RightSpeedPwm;
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable15_35  ;; 0x40038028
   \   00000124   0x.... 0x....      LDR.W    R1,??DataTable15_28
   \   00000128   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000012C   0x6001             STR      R1,[R0, #+0]
    686                             FTM0_C2V = 0;
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable15_36  ;; 0x40038020
   \   00000132   0x2100             MOVS     R1,#+0
   \   00000134   0x6001             STR      R1,[R0, #+0]
    687                     }
    688                    if(  RightSpeedPwm <= 0)
   \                     ??CarControlOut_8:
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable15_28
   \   0000013A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000013E   0x2801             CMP      R0,#+1
   \   00000140   0xDA0B             BGE.N    ??CarControlOut_9
    689                    { 
    690                            
    691                             FTM0_C3V = 0;
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable15_35  ;; 0x40038028
   \   00000146   0x2100             MOVS     R1,#+0
   \   00000148   0x6001             STR      R1,[R0, #+0]
    692                             FTM0_C2V = -RightSpeedPwm;
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable15_36  ;; 0x40038020
   \   0000014E   0x.... 0x....      LDR.W    R1,??DataTable15_28
   \   00000152   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000156   0x4249             RSBS     R1,R1,#+0
   \   00000158   0x6001             STR      R1,[R0, #+0]
    693                    }
    694          }
   \                     ??CarControlOut_9:
   \   0000015A   0xBD00             POP      {PC}             ;; return
    695          
    696          /*------------------------------------------------------------------------------
    697                                      串口部分              
    698          ------------------------------------------------------------------------------*/
    699          
    700          /*发送像素点*/
    701          
    702          /*拉普*/
    703          

   \                                 In section .text, align 2, keep-with-next
    704          void SendImageData1(uint16 * ImageData) {
   \                     SendImageData1:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    705          
    706              uint8 i;
    707          
    708                  for(i=0; i<128; i++)
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
   \                     ??SendImageData1_0:
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x2D80             CMP      R5,#+128
   \   0000000C   0xD214             BCS.N    ??SendImageData1_1
    709              {
    710                //串口发送AD值，可用于线性CCD调试助手
    711                if(Normalized_U8(* ImageData)==0xFF) 
   \   0000000E   0x8820             LDRH     R0,[R4, #+0]
   \   00000010   0x.... 0x....      BL       Normalized_U8
   \   00000014   0x28FF             CMP      R0,#+255
   \   00000016   0xD104             BNE.N    ??SendImageData1_2
    712                  uart_putchar (UART0,0xFE ); //遇到FF用FE替换即可
   \   00000018   0x21FE             MOVS     R1,#+254
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       uart_putchar
   \   00000020   0xE007             B.N      ??SendImageData1_3
    713                else
    714                  uart_putchar (UART0,Normalized_U8(* ImageData) );
   \                     ??SendImageData1_2:
   \   00000022   0x8820             LDRH     R0,[R4, #+0]
   \   00000024   0x.... 0x....      BL       Normalized_U8
   \   00000028   0x0001             MOVS     R1,R0
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       uart_putchar
    715                ImageData ++;
   \                     ??SendImageData1_3:
   \   00000032   0x1CA4             ADDS     R4,R4,#+2
    716              }
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \   00000036   0xE7E7             B.N      ??SendImageData1_0
    717              
    718              
    719              uart_putchar (UART0, 0xFF);                //此字节用于线性CCD调试助手识别换行
   \                     ??SendImageData1_1:
   \   00000038   0x21FF             MOVS     R1,#+255
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       uart_putchar
    720              
    721          }
   \   00000040   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    722           
    723          /*蓝宙*/
    724          

   \                                 In section .text, align 2, keep-with-next
    725          void SendHex(unsigned char hex) {
   \                     SendHex:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    726            unsigned char temp;
    727            temp = hex >> 4;
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x0920             LSRS     R0,R4,#+4
   \   00000008   0x0005             MOVS     R5,R0
    728            if(temp < 10) {
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D0A             CMP      R5,#+10
   \   0000000E   0xD206             BCS.N    ??SendHex_0
    729              uart_putchar(UART0,temp + '0');
   \   00000010   0xF115 0x0130      ADDS     R1,R5,#+48
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       uart_putchar
   \   0000001C   0xE005             B.N      ??SendHex_1
    730            } else {
    731              uart_putchar(UART0,temp - 10 + 'A');
   \                     ??SendHex_0:
   \   0000001E   0xF115 0x0137      ADDS     R1,R5,#+55
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       uart_putchar
    732            }
    733            temp = hex & 0x0F;
   \                     ??SendHex_1:
   \   0000002A   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   0000002E   0x0005             MOVS     R5,R0
    734            if(temp < 10) {
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D0A             CMP      R5,#+10
   \   00000034   0xD206             BCS.N    ??SendHex_2
    735              uart_putchar(UART0,temp + '0');
   \   00000036   0xF115 0x0130      ADDS     R1,R5,#+48
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      BL       uart_putchar
   \   00000042   0xE005             B.N      ??SendHex_3
    736            } else {
    737             uart_putchar(UART0,temp - 10 + 'A');
   \                     ??SendHex_2:
   \   00000044   0xF115 0x0137      ADDS     R1,R5,#+55
   \   00000048   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      BL       uart_putchar
    738            }
    739          }
   \                     ??SendHex_3:
   \   00000050   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    740          
    741          

   \                                 In section .text, align 2, keep-with-next
    742          void SendImageData2( uint16 * ImageData) {
   \                     SendImageData2:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    743          
    744              unsigned char i;
    745              unsigned char crc = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    746          
    747              /* Send Data */
    748              uart_putchar(UART0,'*');
   \   00000006   0x212A             MOVS     R1,#+42
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       uart_putchar
    749             // uart_putchar(UART0,'L');
    750             // uart_putchar(UART0,'D');
    751          
    752              SendHex(0);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       SendHex
    753              SendHex(0);
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       SendHex
    754              SendHex(0);
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       SendHex
    755              SendHex(0);
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       SendHex
    756          
    757              for(i=0; i<128; i++) {
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x0005             MOVS     R5,R0
   \                     ??SendImageData2_0:
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D80             CMP      R5,#+128
   \   0000002E   0xD208             BCS.N    ??SendImageData2_1
    758                SendHex(Normalized_U8(*ImageData++));
   \   00000030   0x8820             LDRH     R0,[R4, #+0]
   \   00000032   0x.... 0x....      BL       Normalized_U8
   \   00000036   0x1CA4             ADDS     R4,R4,#+2
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x.... 0x....      BL       SendHex
    759              }
   \   0000003E   0x1C6D             ADDS     R5,R5,#+1
   \   00000040   0xE7F3             B.N      ??SendImageData2_0
    760          
    761              SendHex(crc);
   \                     ??SendImageData2_1:
   \   00000042   0x0030             MOVS     R0,R6
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x.... 0x....      BL       SendHex
    762              uart_putchar(UART0,'#');
   \   0000004A   0x2123             MOVS     R1,#+35
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       uart_putchar
    763          }
   \   00000052   0xBD70             POP      {R4-R6,PC}       ;; return
    764          
    765          /*超级示波器*/
    766          

   \                                 In section .bss, align 4
    767          float OutData[4] = { 0 };
   \                     OutData:
   \   00000000                      DS8 16
    768          

   \                                 In section .text, align 2, keep-with-next
    769          unsigned short CRC_CHECK(unsigned char *Buf, unsigned char CRC_CNT)
    770          {
   \                     CRC_CHECK:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0002             MOVS     R2,R0
    771              unsigned short CRC_Temp;
    772              unsigned char i,j;
    773              CRC_Temp = 0xffff;
   \   00000004   0xF64F 0x75FF      MOVW     R5,#+65535
   \   00000008   0x0028             MOVS     R0,R5
    774          
    775              for (i=0;i<CRC_CNT; i++){      
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x002B             MOVS     R3,R5
   \                     ??CRC_CHECK_0:
   \   0000000E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x428B             CMP      R3,R1
   \   00000014   0xD216             BCS.N    ??CRC_CHECK_1
    776                  CRC_Temp ^= Buf[i];
   \   00000016   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000018   0x5C9D             LDRB     R5,[R3, R2]
   \   0000001A   0x4068             EORS     R0,R5,R0
    777                  for (j=0;j<8;j++) {
   \   0000001C   0x2500             MOVS     R5,#+0
   \   0000001E   0x002C             MOVS     R4,R5
   \                     ??CRC_CHECK_2:
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x2C08             CMP      R4,#+8
   \   00000024   0xD20C             BCS.N    ??CRC_CHECK_3
    778                      if (CRC_Temp & 0x01)
   \   00000026   0x07C5             LSLS     R5,R0,#+31
   \   00000028   0xD506             BPL.N    ??CRC_CHECK_4
    779                          CRC_Temp = (CRC_Temp >>1 ) ^ 0xa001;
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0x0840             LSRS     R0,R0,#+1
   \   0000002E   0xF480 0x4020      EOR      R0,R0,#0xA000
   \   00000032   0xF090 0x0001      EORS     R0,R0,#0x1
   \   00000036   0xE001             B.N      ??CRC_CHECK_5
    780                      else
    781                          CRC_Temp = CRC_Temp >> 1;
   \                     ??CRC_CHECK_4:
   \   00000038   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003A   0x0840             LSRS     R0,R0,#+1
    782                  }
   \                     ??CRC_CHECK_5:
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \   0000003E   0xE7EF             B.N      ??CRC_CHECK_2
    783              }
   \                     ??CRC_CHECK_3:
   \   00000040   0x1C5B             ADDS     R3,R3,#+1
   \   00000042   0xE7E4             B.N      ??CRC_CHECK_0
    784              return(CRC_Temp);
   \                     ??CRC_CHECK_1:
   \   00000044   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000046   0xBC30             POP      {R4,R5}
   \   00000048   0x4770             BX       LR               ;; return
    785          }
    786          

   \                                 In section .bss, align 1
    787          uint8 j=0;
   \                     j:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
    788          void OutPut_Data(void)
    789          {
   \                     OutPut_Data:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    790            int temp[4] = {0};
   \   00000004   0xA807             ADD      R0,SP,#+28
   \   00000006   0x2110             MOVS     R1,#+16
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
    791            unsigned int temp1[4] = {0};
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
    792            unsigned char databuf[10] = {0};
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0xC00E             STM      R0!,{R1-R3}
   \   0000001E   0x380C             SUBS     R0,R0,#+12
    793            unsigned char i;
    794            unsigned short CRC16 = 0;
   \   00000020   0x2500             MOVS     R5,#+0
    795            for(i=0;i<4;i++)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x0004             MOVS     R4,R0
   \                     ??OutPut_Data_0:
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x2C04             CMP      R4,#+4
   \   0000002A   0xD214             BCS.N    ??OutPut_Data_1
    796             {
    797              
    798              temp[i]  = (int)OutData[i];
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable15_37
   \   00000032   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000036   0x.... 0x....      BL       __aeabi_f2iz
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0xA907             ADD      R1,SP,#+28
   \   0000003E   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    799              temp1[i] = (unsigned int)temp[i];
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0xA803             ADD      R0,SP,#+12
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0xA907             ADD      R1,SP,#+28
   \   0000004A   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000004E   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    800              
    801             }
   \   00000052   0x1C64             ADDS     R4,R4,#+1
   \   00000054   0xE7E7             B.N      ??OutPut_Data_0
    802             
    803            for(i=0;i<4;i++) 
   \                     ??OutPut_Data_1:
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x0004             MOVS     R4,R0
   \                     ??OutPut_Data_2:
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0x2C04             CMP      R4,#+4
   \   0000005E   0xD219             BCS.N    ??OutPut_Data_3
    804            {
    805              databuf[i*2]   = (unsigned char)(temp1[i]%256);
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0xA803             ADD      R0,SP,#+12
   \   00000064   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000068   0xF44F 0x7180      MOV      R1,#+256
   \   0000006C   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000070   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000074   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000076   0xA800             ADD      R0,SP,#+0
   \   00000078   0xF800 0x2014      STRB     R2,[R0, R4, LSL #+1]
    806              databuf[i*2+1] = (unsigned char)(temp1[i]/256);
   \   0000007C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007E   0xA803             ADD      R0,SP,#+12
   \   00000080   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000084   0x0A00             LSRS     R0,R0,#+8
   \   00000086   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000088   0xA900             ADD      R1,SP,#+0
   \   0000008A   0xEB11 0x0144      ADDS     R1,R1,R4, LSL #+1
   \   0000008E   0x7048             STRB     R0,[R1, #+1]
    807            }
   \   00000090   0x1C64             ADDS     R4,R4,#+1
   \   00000092   0xE7E2             B.N      ??OutPut_Data_2
    808            
    809            CRC16 = CRC_CHECK(databuf,8);
   \                     ??OutPut_Data_3:
   \   00000094   0x2108             MOVS     R1,#+8
   \   00000096   0xA800             ADD      R0,SP,#+0
   \   00000098   0x.... 0x....      BL       CRC_CHECK
   \   0000009C   0x0005             MOVS     R5,R0
    810            databuf[8] = CRC16%256;
   \   0000009E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A0   0xF44F 0x7080      MOV      R0,#+256
   \   000000A4   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   000000A8   0xFB01 0x5110      MLS      R1,R1,R0,R5
   \   000000AC   0xF88D 0x1008      STRB     R1,[SP, #+8]
    811            databuf[9] = CRC16/256;
   \   000000B0   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B2   0xF44F 0x7080      MOV      R0,#+256
   \   000000B6   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   000000BA   0xF88D 0x0009      STRB     R0,[SP, #+9]
    812            
    813            
    814            UART_D_REG(UARTx[UART0])= databuf[j];
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable15_38
   \   000000C2   0x7800             LDRB     R0,[R0, #+0]
   \   000000C4   0xA900             ADD      R1,SP,#+0
   \   000000C6   0x5C40             LDRB     R0,[R0, R1]
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable15_39
   \   000000CC   0x6809             LDR      R1,[R1, #+0]
   \   000000CE   0x71C8             STRB     R0,[R1, #+7]
    815            j++;
   \   000000D0   0x....             LDR.N    R0,??DataTable15_38
   \   000000D2   0x7800             LDRB     R0,[R0, #+0]
   \   000000D4   0x1C40             ADDS     R0,R0,#+1
   \   000000D6   0x....             LDR.N    R1,??DataTable15_38
   \   000000D8   0x7008             STRB     R0,[R1, #+0]
    816            if(j==10) j=0;
   \   000000DA   0x....             LDR.N    R0,??DataTable15_38
   \   000000DC   0x7800             LDRB     R0,[R0, #+0]
   \   000000DE   0x280A             CMP      R0,#+10
   \   000000E0   0xD102             BNE.N    ??OutPut_Data_4
   \   000000E2   0x....             LDR.N    R0,??DataTable15_38
   \   000000E4   0x2100             MOVS     R1,#+0
   \   000000E6   0x7001             STRB     R1,[R0, #+0]
    817            
    818            //for(i=0;i<10;i++)
    819             // uart_putchar(UART0,databuf[i]);
    820            
    821          }
   \                     ??OutPut_Data_4:
   \   000000E8   0xB00B             ADD      SP,SP,#+44
   \   000000EA   0xBD30             POP      {R4,R5,PC}       ;; return
    822          
    823          /*上位机*/

   \                                 In section .bss, align 1
    824          uint8 put_cnt=0;
   \                     put_cnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    825          uint8 put_date[11]={0};
   \                     put_date:
   \   00000000                      DS8 12

   \                                 In section .text, align 2, keep-with-next
    826          void PutDate(){
   \                     PutDate:
   \   00000000   0xB500             PUSH     {LR}
    827            
    828             
    829            
    830             
    831              put_date[0]=255;
   \   00000002   0x....             LDR.N    R0,??DataTable15_40
   \   00000004   0x21FF             MOVS     R1,#+255
   \   00000006   0x7001             STRB     R1,[R0, #+0]
    832              put_date[1]=(uint8)w*10;
   \   00000008   0x....             LDR.N    R0,??DataTable15_41
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000010   0x210A             MOVS     R1,#+10
   \   00000012   0x4348             MULS     R0,R1,R0
   \   00000014   0x....             LDR.N    R1,??DataTable15_40
   \   00000016   0x7048             STRB     R0,[R1, #+1]
    833              put_date[2]=(uint16)acce& 0x00ff;
   \   00000018   0x....             LDR.N    R0,??DataTable15_42
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000020   0x....             LDR.N    R1,??DataTable15_40
   \   00000022   0x7088             STRB     R0,[R1, #+2]
    834              put_date[3]=(uint16)acce>>8;
   \   00000024   0x....             LDR.N    R0,??DataTable15_42
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x.... 0x....      BL       __aeabi_f2iz
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0x0A00             LSRS     R0,R0,#+8
   \   00000030   0x....             LDR.N    R1,??DataTable15_40
   \   00000032   0x70C8             STRB     R0,[R1, #+3]
    835              put_date[4]=(uint8)GYRO_STATIC/10;
   \   00000034   0x....             LDR.N    R0,??DataTable15_43
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x.... 0x....      BL       __aeabi_f2iz
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x210A             MOVS     R1,#+10
   \   00000040   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000044   0x....             LDR.N    R1,??DataTable15_40
   \   00000046   0x7108             STRB     R0,[R1, #+4]
    836              put_date[5]=latch/10;
   \   00000048   0x....             LDR.N    R0,??DataTable15_3
   \   0000004A   0x8800             LDRH     R0,[R0, #+0]
   \   0000004C   0x210A             MOVS     R1,#+10
   \   0000004E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000052   0x....             LDR.N    R1,??DataTable15_40
   \   00000054   0x7148             STRB     R0,[R1, #+5]
    837              put_date[6]=(uint8)p_distance;
   \   00000056   0x....             LDR.N    R0,??DataTable15_9
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000005E   0x....             LDR.N    R1,??DataTable15_40
   \   00000060   0x7188             STRB     R0,[R1, #+6]
    838              put_date[7]=Pixel[63]/10;
   \   00000062   0x....             LDR.N    R0,??DataTable14_2
   \   00000064   0xF8B0 0x007E      LDRH     R0,[R0, #+126]
   \   00000068   0x210A             MOVS     R1,#+10
   \   0000006A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000006E   0x....             LDR.N    R1,??DataTable15_40
   \   00000070   0x71C8             STRB     R0,[R1, #+7]
    839              put_date[8]=Left_cnt;
   \   00000072   0x....             LDR.N    R0,??DataTable15_40
   \   00000074   0x....             LDR.N    R1,??DataTable15_5
   \   00000076   0x7809             LDRB     R1,[R1, #+0]
   \   00000078   0x7201             STRB     R1,[R0, #+8]
    840              put_date[9]=Right_cnt;
   \   0000007A   0x....             LDR.N    R0,??DataTable15_40
   \   0000007C   0x....             LDR.N    R1,??DataTable15_6
   \   0000007E   0x7809             LDRB     R1,[R1, #+0]
   \   00000080   0x7241             STRB     R1,[R0, #+9]
    841              put_date[10]=254;
   \   00000082   0x....             LDR.N    R0,??DataTable15_40
   \   00000084   0x21FE             MOVS     R1,#+254
   \   00000086   0x7281             STRB     R1,[R0, #+10]
    842              
    843              
    844          //    put_date[0]=255;
    845          //    put_date[1]=1;
    846          //    put_date[2]=2;
    847          //    put_date[3]=2;
    848          //    put_date[4]=3;
    849          //    put_date[5]=5;
    850          //    put_date[6]=6;
    851          //    put_date[7]=10;
    852          //    put_date[8]=0;
    853          //    put_date[9]=7;
    854          //    put_date[10]=254;
    855              
    856              
    857              
    858             UART_D_REG(UARTx[UART0])= put_date[put_cnt];
   \   00000088   0x....             LDR.N    R0,??DataTable15_44
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x....             LDR.N    R1,??DataTable15_40
   \   0000008E   0x5C40             LDRB     R0,[R0, R1]
   \   00000090   0x....             LDR.N    R1,??DataTable15_39
   \   00000092   0x6809             LDR      R1,[R1, #+0]
   \   00000094   0x71C8             STRB     R0,[R1, #+7]
    859             //    uart_putchar(UART0,123);
    860               put_cnt++;
   \   00000096   0x....             LDR.N    R0,??DataTable15_44
   \   00000098   0x7800             LDRB     R0,[R0, #+0]
   \   0000009A   0x1C40             ADDS     R0,R0,#+1
   \   0000009C   0x....             LDR.N    R1,??DataTable15_44
   \   0000009E   0x7008             STRB     R0,[R1, #+0]
    861              
    862               if(put_cnt==11) put_cnt=0;
   \   000000A0   0x....             LDR.N    R0,??DataTable15_44
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0x280B             CMP      R0,#+11
   \   000000A6   0xD102             BNE.N    ??PutDate_0
   \   000000A8   0x....             LDR.N    R0,??DataTable15_44
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x7001             STRB     R1,[R0, #+0]
    863              
    864              
    865              
    866          //    uart_putchar(UART0,w);
    867          //    uart_putchar(UART0,acce);
    868          //    uart_putchar(UART0,GYRO_STATIC);
    869          //    uart_putchar(UART0,latch);
    870          //    uart_putchar(UART0,p_distance);
    871          //    uart_putchar(UART0,Pixel[63]);
    872          //    uart_putchar(UART0,Left_cnt);
    873          //    uart_putchar(UART0,Right_cnt);
    874          
    875            //uart_putchar(UART0,'#');
    876            
    877          }
   \                     ??PutDate_0:
   \   000000AE   0xBD00             POP      {PC}             ;; return

   \                                 In section .bss, align 4
    878          uint8 send_date[9]={0};
   \                     send_date:
   \   00000000                      DS8 12

   \                                 In section .bss, align 1
    879          uint8 send_cnt=0;
   \                     send_cnt:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
    880          void SendDate(){
   \                     SendDate:
   \   00000000   0xB500             PUSH     {LR}
    881                         
    882                 speed_kp =send_date[1];
   \   00000002   0x....             LDR.N    R0,??DataTable15_45
   \   00000004   0x7840             LDRB     R0,[R0, #+1]
   \   00000006   0x.... 0x....      BL       __aeabi_ui2f
   \   0000000A   0x....             LDR.N    R1,??DataTable15_46
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    883                             
    884                 speed_ki = send_date[2]/10.0;
   \   0000000E   0x....             LDR.N    R0,??DataTable15_45
   \   00000010   0x7880             LDRB     R0,[R0, #+2]
   \   00000012   0x.... 0x....      BL       __aeabi_ui2d
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x....             LDR.N    R3,??DataTable15_47  ;; 0x40240000
   \   0000001A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000001E   0x.... 0x....      BL       __aeabi_d2f
   \   00000022   0x....             LDR.N    R1,??DataTable15_48
   \   00000024   0x6008             STR      R0,[R1, #+0]
    885                 
    886                 
    887                 steer_kp = (send_date[4]*256+send_date[3])/10.0; 
   \   00000026   0x....             LDR.N    R0,??DataTable15_45
   \   00000028   0x7900             LDRB     R0,[R0, #+4]
   \   0000002A   0xF44F 0x7180      MOV      R1,#+256
   \   0000002E   0x....             LDR.N    R2,??DataTable15_45
   \   00000030   0x78D2             LDRB     R2,[R2, #+3]
   \   00000032   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000036   0x.... 0x....      BL       __aeabi_i2d
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x....             LDR.N    R3,??DataTable15_47  ;; 0x40240000
   \   0000003E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000042   0x.... 0x....      BL       __aeabi_d2f
   \   00000046   0x....             LDR.N    R1,??DataTable15_25
   \   00000048   0x6008             STR      R0,[R1, #+0]
    888                 steer_kd = (send_date[5]*256+send_date[6])/10.0;
   \   0000004A   0x....             LDR.N    R0,??DataTable15_45
   \   0000004C   0x7940             LDRB     R0,[R0, #+5]
   \   0000004E   0xF44F 0x7180      MOV      R1,#+256
   \   00000052   0x....             LDR.N    R2,??DataTable15_45
   \   00000054   0x7992             LDRB     R2,[R2, #+6]
   \   00000056   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000005A   0x.... 0x....      BL       __aeabi_i2d
   \   0000005E   0x2200             MOVS     R2,#+0
   \   00000060   0x....             LDR.N    R3,??DataTable15_47  ;; 0x40240000
   \   00000062   0x.... 0x....      BL       __aeabi_ddiv
   \   00000066   0x.... 0x....      BL       __aeabi_d2f
   \   0000006A   0x....             LDR.N    R1,??DataTable15_26
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    889                                     
    890                 
    891                 Speed_set =  send_date[7];
   \   0000006E   0x....             LDR.N    R0,??DataTable15_45
   \   00000070   0x79C0             LDRB     R0,[R0, #+7]
   \   00000072   0x....             LDR.N    R1,??DataTable15_49
   \   00000074   0x7008             STRB     R0,[R1, #+0]
    892                 
    893               //  i=0;
    894                 
    895          
    896               //  stop_flag =  send_date[7];
    897          
    898          
    899          }
   \   00000076   0xBD00             POP      {PC}             ;; return
    900          
    901          
    902          /*------------------------------------------------------------------------------
    903                                      主函数              
    904          ------------------------------------------------------------------------------*/
    905          
    906          

   \                                 In section .text, align 4, keep-with-next
    907            void  main(void)
    908          {
   \                     main:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    909            volatile uint8 i;
    910          
    911            uint16 *pixel_pt;
    912            DisableInterrupts;                             //禁止总中断
   \   00000004   0xB672             CPSID i         
    913             
    914            pixel_pt = Pixel;
   \   00000006   0x....             LDR.N    R0,??DataTable14_2
   \   00000008   0x0004             MOVS     R4,R0
    915            for(i=0; i<128; i++) {
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \                     ??main_0:
   \   00000010   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000014   0x2880             CMP      R0,#+128
   \   00000016   0xD208             BCS.N    ??main_1
    916              *pixel_pt++ = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x8020             STRH     R0,[R4, #+0]
   \   0000001C   0x1CA4             ADDS     R4,R4,#+2
    917            }
   \   0000001E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000028   0xE7F2             B.N      ??main_0
    918            
    919            CCD_init() ;
   \                     ??main_1:
   \   0000002A   0x.... 0x....      BL       CCD_init
    920            adc_init(ADC0, AD14) ;
   \   0000002E   0x210E             MOVS     R1,#+14
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       adc_init
    921            sensor_init();
   \   00000036   0x.... 0x....      BL       sensor_init
    922            
    923            FTM_PWM_init( );
   \   0000003A   0x.... 0x....      BL       FTM_PWM_init
    924            FTM_QUAD_init( );
   \   0000003E   0x.... 0x....      BL       FTM_QUAD_init
    925            
    926           // GIPO_init();
    927            
    928            LCD_Init();
   \   00000042   0x.... 0x....      BL       LCD_Init
    929            
    930            pit_init(PIT0, 100000);                          //初始化PIT0，定时时间为： 1ms
   \   00000046   0x....             LDR.N    R1,??DataTable15_50  ;; 0x186a0
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      BL       pit_init
    931            delayms(1000);
   \   0000004E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000052   0x.... 0x....      BL       delayms
    932            
    933            uart_init (UART0 ,9600);                      //初始化UART0，输出脚PTA15，输入脚PTA14，串口频率 9600
   \   00000056   0xF44F 0x5116      MOV      R1,#+9600
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x.... 0x....      BL       uart_init
    934           // uart_irq_EN(UART0);
    935            
    936            //adc_start(ADC0, AD14, ADC_10bit );
    937            V=ad_once(ADC0, AD14, ADC_10bit)*9.9/1024.0;
   \   00000060   0x2202             MOVS     R2,#+2
   \   00000062   0x210E             MOVS     R1,#+14
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      BL       ad_once
   \   0000006A   0x.... 0x....      BL       __aeabi_ui2d
   \   0000006E   0x....             LDR.N    R2,??DataTable15_51  ;; 0xcccccccd
   \   00000070   0x....             LDR.N    R3,??DataTable15_52  ;; 0x4023cccc
   \   00000072   0x.... 0x....      BL       __aeabi_dmul
   \   00000076   0x2200             MOVS     R2,#+0
   \   00000078   0x....             LDR.N    R3,??DataTable15_53  ;; 0x40900000
   \   0000007A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000007E   0x.... 0x....      BL       __aeabi_d2f
   \   00000082   0x....             LDR.N    R1,??DataTable15_54
   \   00000084   0x6008             STR      R0,[R1, #+0]
    938          
    939            
    940            
    941            pre_show();
   \   00000086   0x.... 0x....      BL       pre_show
    942            
    943            init_gyro();
   \   0000008A   0x.... 0x....      BL       init_gyro
    944            
    945            EnableInterrupts;			              //开总中断
   \   0000008E   0xB662             CPSIE i         
    946            while(1){   
    947              if(SpeedControlCount==99)
   \                     ??main_2:
   \   00000090   0x....             LDR.N    R0,??DataTable15_55
   \   00000092   0x7800             LDRB     R0,[R0, #+0]
   \   00000094   0x2863             CMP      R0,#+99
   \   00000096   0xD1FB             BNE.N    ??main_2
    948                  redraw();             //4.08ms
   \   00000098   0x.... 0x....      BL       redraw
   \   0000009C   0xE7F8             B.N      ??main_2
    949              
    950          //    if(TimerCnt20ms==5)
    951          //      KeyScan();                 //按键扫描
    952              
    953              //if(SpeedControlCount==50)
    954          //    if((UART_S1_REG(UARTx[UART0]) & UART_S1_TDRE_MASK))
    955          //      PutDate();
    956          //    
    957          // //   if((UART_S1_REG(UARTx[UART0]) & UART_S1_TDRE_MASK)){
    958          ////    OutData[0] = acce_angle*10;
    959          ////    OutData[1] = (g_nCarAngle*10);
    960          ////    OutData[2] = w*10;
    961          ////    OutPut_Data();}
    962          //    
    963          //      if(UART_S1_REG(UARTx[UART0]) & UART_S1_RDRF_MASK)         //查询是否接受到数据
    964          //      
    965          //      {send_date[send_cnt]=UART_D_REG(UARTx[UART0]);
    966          //       send_cnt++;
    967          //       if(send_cnt==8) send_cnt=0;
    968          //      }
    969          //       
    970          //      
    971          //      if(send_date[0]==255&&send_date[8]==253)
    972          //         SendDate();
    973          
    974            }
    975            
    976            
    977           
    978          }
    979          
    980          
    981          
    982          /*------------------------------------------------------------------------------
    983                                                中断                                      
    984          ------------------------------------------------------------------------------*/
    985          
    986          
    987          

   \                                 In section .text, align 2, keep-with-next
    988          void PIT0_isr( )
    989          {
   \                     PIT0_isr:
   \   00000000   0xB580             PUSH     {R7,LR}
    990               
    991               //TEST_TIME0(1);
    992               GetADValue();                 //200采样两路角度传感器信 
   \   00000002   0x.... 0x....      BL       GetADValue
    993               //TEST_TIME0(0);
    994               GetAngle();                     
   \   00000006   0x.... 0x....      BL       GetAngle
    995               
    996               CarAngleAdjust();      //60
   \   0000000A   0x.... 0x....      BL       CarAngleAdjust
    997                                           
    998                TimerCnt20ms++;  
   \   0000000E   0x....             LDR.N    R0,??DataTable15_56
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x....             LDR.N    R1,??DataTable15_56
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    999              if(TimerCnt20ms >=10)
   \   00000018   0x....             LDR.N    R0,??DataTable15_56
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x280A             CMP      R0,#+10
   \   0000001E   0xD30E             BCC.N    ??PIT0_isr_0
   1000              { //TEST_TIME0(1);
   1001                TimerCnt20ms=0;
   \   00000020   0x....             LDR.N    R0,??DataTable15_56
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x7001             STRB     R1,[R0, #+0]
   1002                ImageCapture(Pixel);   // 280
   \   00000026   0x....             LDR.N    R0,??DataTable15_57
   \   00000028   0x.... 0x....      BL       ImageCapture
   1003                
   1004                //latch=PixelAverage(128, Pixel);
   1005                
   1006                get_latch();
   \   0000002C   0x.... 0x....      BL       get_latch
   1007                
   1008                pixel_binarize(Pixel);
   \   00000030   0x....             LDR.N    R0,??DataTable15_57
   \   00000032   0x.... 0x....      BL       pixel_binarize
   1009                
   1010                edge_error();               //40
   \   00000036   0x.... 0x....      BL       edge_error
   1011                CarDirectionAdjust();
   \   0000003A   0x.... 0x....      BL       CarDirectionAdjust
   1012                //TEST_TIME0(0);
   1013                  
   1014              }
   1015                SpeedControlCount++;
   \                     ??PIT0_isr_0:
   \   0000003E   0x....             LDR.N    R0,??DataTable15_55
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable15_55
   \   00000046   0x7008             STRB     R0,[R1, #+0]
   1016          
   1017              if(SpeedControlCount >= 100){
   \   00000048   0x....             LDR.N    R0,??DataTable15_55
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x2864             CMP      R0,#+100
   \   0000004E   0xD304             BCC.N    ??PIT0_isr_1
   1018          
   1019                SpeedControlCount = 0;
   \   00000050   0x....             LDR.N    R0,??DataTable15_55
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x7001             STRB     R1,[R0, #+0]
   1020                
   1021                SpeedControl();               //12
   \   00000056   0x.... 0x....      BL       SpeedControl
   1022          
   1023              }
   1024          
   1025               
   1026               CarControlOut();               //12
   \                     ??PIT0_isr_1:
   \   0000005A   0x.... 0x....      BL       CarControlOut
   1027                                             //590
   1028              
   1029               PIT_Flag_Clear(PIT0);       //清中断标志位
   \   0000005E   0x....             LDR.N    R0,??DataTable15_58  ;; 0x4003710c
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000066   0x....             LDR.N    R1,??DataTable15_58  ;; 0x4003710c
   \   00000068   0x6008             STR      R0,[R1, #+0]
   1030          
   1031               // TEST_TIME0(0);
   1032              
   1033              
   1034              
   1035              
   1036                /* Send data to CCDView every 100ms */
   1037                  //TEST_TIME0(1);
   1038                  //SendImageData2(Pixel);
   1039                  //TEST_TIME0(0);
   1040            
   1041            
   1042          //                   OutData[1] = d_steerpwm*20;
   1043          //                   OutData[2] = percent[0]*10;
   1044          //                   OutData[0] = (AD_DirectionData[0]*10);
   1045          //                   OutData[1] = (AD_DirectionData[2]*10);   
   1046          //                   OutData[0] = angle*10;
   1047          //                   OutData[1] = (g_nCarAngle*10);
   1048          //                   OutData[0] = RightSpeedPwm;
   1049          //                   OutData[1] = LeftSpeedPwm; 
   1050          //                   OutData[2] = p_distance*50;
   1051          //                   OutData[3] =angle_dot*10;
   1052          //                   OutData[3] = ((int)anglePD)/5;
   1053          //                   OutData[2] = w*10;
   1054          //                   OutData[2] = 194*10;
   1055          //                   OutData[3] = ( LeftSpeed_filter + RightSpeed_filter )*5;
   1056          //                   OutData[0] = LeftSpeed_filter*10;
   1057          //                   OutData[1] = RightSpeed_filter*10;
   1058          //                   OutData[2] = ((int)anglePD);
   1059          //                   OutData[2] = speedset*10;;
   1060          //                   OutData[3] = ((int)SpeedPIDout);
   1061          //                   OutData[3] =  steerpwm;
   1062          //                   OutData[1] = dis_error*10;
   1063          //                   OutData[3] = ( LeftSpeed_filter + RightSpeed_filter )*5;
   1064          //                  OutData[1] = ((int)anglePD);
   1065          //                   OutData[0] = ((int)SpeedPIDout);
   1066          //                   OutPut_Data();  
   1067                  
   1068              
   1069               
   1070             
   1071          }
   \   0000006A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x4009C800         DC32     0x4009c800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     GYRO_STATIC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     AD_AngleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     acce

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     ACCE_STATIC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     acce_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x44480000         DC32     0x44480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     acce_G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x3E99999A         DC32     0x3e99999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0xBE999999         DC32     0xbe999999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0xBE99999A         DC32     0xbe99999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0xB6774C14         DC32     0xb6774c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x404CA5D7         DC32     0x404ca5d7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     acce_angle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x........         DC32     gyro

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x........         DC32     gyro_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0xCCCCCCCD         DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x401ACCCC         DC32     0x401acccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x........         DC32     w

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     g_nCarAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0xD2F1A9FC         DC32     0xd2f1a9fc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x3F50624D         DC32     0x3f50624d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0xB3D07C85         DC32     0xb3d07c85

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x3FEFF559         DC32     0x3feff559

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x5F06F694         DC32     0x5f06f694

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x3F554C98         DC32     0x3f554c98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     angle_kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     angle_kd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     g_nRightCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x40039004         DC32     0x40039004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x........         DC32     g_nLeftCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x400B8004         DC32     0x400b8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \   00000000   0x3F999999         DC32     0x3f999999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \   00000000   0x........         DC32     LeftRealSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     RightRealSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     RealSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     Speed_set

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     Speed_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x40A00001         DC32     0x40a00001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x40A00000         DC32     0x40a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0xC0A00000         DC32     0xc0a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     speed_kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     motor_P

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     anglePD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     line_latch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     Pixel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     SpeedPID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     white_latch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x........         DC32     black_latch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x........         DC32     latch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0x........         DC32     CCD_value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0x........         DC32     Left_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \   00000000   0x........         DC32     Right_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \   00000000   0x........         DC32     white_center

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \   00000000   0x........         DC32     WHITE_CENTER

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \   00000000   0x........         DC32     p_distance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \   00000000   0x........         DC32     ccd_scan_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \   00000000   0x........         DC32     ccd_scan_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \   00000000   0x........         DC32     Left_cnt1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \   00000000   0x........         DC32     Left_cnt2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \   00000000   0x........         DC32     Right_cnt1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \   00000000   0x........         DC32     Right_cnt2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \   00000000   0x........         DC32     last_Left_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_17:
   \   00000000   0x........         DC32     last_Right_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_18:
   \   00000000   0x........         DC32     Distance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_19:
   \   00000000   0x........         DC32     error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_20:
   \   00000000   0x3FE99999         DC32     0x3fe99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_21:
   \   00000000   0x........         DC32     last_dis_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_22:
   \   00000000   0x3FC99999         DC32     0x3fc99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_23:
   \   00000000   0x........         DC32     dis_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_24:
   \   00000000   0x........         DC32     last_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_25:
   \   00000000   0x........         DC32     steer_kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_26:
   \   00000000   0x........         DC32     steer_kd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_27:
   \   00000000   0x........         DC32     steerpwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_28:
   \   00000000   0x........         DC32     RightSpeedPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_29:
   \   00000000   0x........         DC32     LeftSpeedPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_30:
   \   00000000   0xFFFFF63C         DC32     0xfffff63c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_31:
   \   00000000   0x41700001         DC32     0x41700001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_32:
   \   00000000   0xC1700000         DC32     0xc1700000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_33:
   \   00000000   0x40038010         DC32     0x40038010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_34:
   \   00000000   0x40038018         DC32     0x40038018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_35:
   \   00000000   0x40038028         DC32     0x40038028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_36:
   \   00000000   0x40038020         DC32     0x40038020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_37:
   \   00000000   0x........         DC32     OutData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_38:
   \   00000000   0x........         DC32     j

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_39:
   \   00000000   0x........         DC32     UARTx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_40:
   \   00000000   0x........         DC32     put_date

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_41:
   \   00000000   0x........         DC32     w

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_42:
   \   00000000   0x........         DC32     acce

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_43:
   \   00000000   0x........         DC32     GYRO_STATIC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_44:
   \   00000000   0x........         DC32     put_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_45:
   \   00000000   0x........         DC32     send_date

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_46:
   \   00000000   0x........         DC32     speed_kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_47:
   \   00000000   0x40240000         DC32     0x40240000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_48:
   \   00000000   0x........         DC32     speed_ki

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_49:
   \   00000000   0x........         DC32     Speed_set

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_50:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_51:
   \   00000000   0xCCCCCCCD         DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_52:
   \   00000000   0x4023CCCC         DC32     0x4023cccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_53:
   \   00000000   0x40900000         DC32     0x40900000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_54:
   \   00000000   0x........         DC32     V

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_55:
   \   00000000   0x........         DC32     SpeedControlCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_56:
   \   00000000   0x........         DC32     TimerCnt20ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_57:
   \   00000000   0x........         DC32     Pixel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_58:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   1072          
   1073          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  CCD_init
              8 -> adc_init
              8 -> gpio_init
        8  CRC_CHECK
        8  CarAngleAdjust
              8 -> __aeabi_f2iz
              8 -> __aeabi_fadd
              8 -> __aeabi_fmul
        4  CarControlOut
              4 -> __aeabi_cfcmple
              4 -> __aeabi_cfrcmple
       16  CarDirectionAdjust
             16 -> __aeabi_d2f
             16 -> __aeabi_dadd
             16 -> __aeabi_dmul
             16 -> __aeabi_f2d
             16 -> __aeabi_f2iz
             16 -> __aeabi_fadd
             16 -> __aeabi_fmul
             16 -> __aeabi_fsub
        8  GIPO_init
              8 -> gpio_init
        8  GetADValue
              8 -> ad_ave
       16  GetAngle
             16 -> __aeabi_cfcmple
             16 -> __aeabi_cfrcmple
             16 -> __aeabi_d2f
             16 -> __aeabi_dadd
             16 -> __aeabi_ddiv
             16 -> __aeabi_dmul
             16 -> __aeabi_f2d
             16 -> __aeabi_fdiv
             16 -> __aeabi_fsub
             16 -> asin
       16  ImageCapture
             16 -> SamplingDelay
             16 -> ad_once
             16 -> gpio_set
        0  Normalized_U8
       56  OutPut_Data
             56 -> CRC_CHECK
             56 -> __aeabi_f2iz
             56 -> __aeabi_memclr4
        8  PIT0_isr
              8 -> CarAngleAdjust
              8 -> CarControlOut
              8 -> CarDirectionAdjust
              8 -> GetADValue
              8 -> GetAngle
              8 -> ImageCapture
              8 -> SpeedControl
              8 -> edge_error
              8 -> get_latch
              8 -> pixel_binarize
        4  PixelAverage
        4  PutDate
              4 -> __aeabi_f2iz
        0  SamplingDelay
        4  SendDate
              4 -> __aeabi_d2f
              4 -> __aeabi_ddiv
              4 -> __aeabi_i2d
              4 -> __aeabi_ui2d
              4 -> __aeabi_ui2f
       16  SendHex
             16 -> uart_putchar
       16  SendImageData1
             16 -> Normalized_U8
             16 -> uart_putchar
       16  SendImageData2
             16 -> Normalized_U8
             16 -> SendHex
             16 -> uart_putchar
        4  SpeedControl
              4 -> __aeabi_cfcmple
              4 -> __aeabi_cfrcmple
              4 -> __aeabi_d2f
              4 -> __aeabi_dmul
              4 -> __aeabi_f2iz
              4 -> __aeabi_fadd
              4 -> __aeabi_fdiv
              4 -> __aeabi_fmul
              4 -> __aeabi_fsub
              4 -> __aeabi_i2d
              4 -> __aeabi_ui2f
        0  abs
        8  edge_error
              8 -> __aeabi_d2f
              8 -> __aeabi_ddiv
              8 -> __aeabi_fsub
              8 -> __aeabi_i2d
              8 -> __aeabi_ui2f
       16  edge_error1
             16 -> __aeabi_d2f
             16 -> __aeabi_ddiv
             16 -> __aeabi_fsub
             16 -> __aeabi_i2d
             16 -> __aeabi_ui2f
             16 -> abs
        8  get_latch
        8  init_gyro
              8 -> __aeabi_d2f
              8 -> __aeabi_dmul
              8 -> __aeabi_f2d
              8 -> ad_ave
       16  main
             16 -> CCD_init
             16 -> FTM_PWM_init
             16 -> FTM_QUAD_init
             16 -> LCD_Init
             16 -> __aeabi_d2f
             16 -> __aeabi_ddiv
             16 -> __aeabi_dmul
             16 -> __aeabi_ui2d
             16 -> ad_once
             16 -> adc_init
             16 -> delayms
             16 -> init_gyro
             16 -> pit_init
             16 -> pre_show
             16 -> redraw
             16 -> sensor_init
             16 -> uart_init
        0  pixel_binarize
        8  sensor_init
              8 -> adc_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {0}>
      16  ?<Constant {0}>_1
      12  ?<Constant {0}>_2
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_18
       4  ??DataTable15_19
       4  ??DataTable15_2
       4  ??DataTable15_20
       4  ??DataTable15_21
       4  ??DataTable15_22
       4  ??DataTable15_23
       4  ??DataTable15_24
       4  ??DataTable15_25
       4  ??DataTable15_26
       4  ??DataTable15_27
       4  ??DataTable15_28
       4  ??DataTable15_29
       4  ??DataTable15_3
       4  ??DataTable15_30
       4  ??DataTable15_31
       4  ??DataTable15_32
       4  ??DataTable15_33
       4  ??DataTable15_34
       4  ??DataTable15_35
       4  ??DataTable15_36
       4  ??DataTable15_37
       4  ??DataTable15_38
       4  ??DataTable15_39
       4  ??DataTable15_4
       4  ??DataTable15_40
       4  ??DataTable15_41
       4  ??DataTable15_42
       4  ??DataTable15_43
       4  ??DataTable15_44
       4  ??DataTable15_45
       4  ??DataTable15_46
       4  ??DataTable15_47
       4  ??DataTable15_48
       4  ??DataTable15_49
       4  ??DataTable15_5
       4  ??DataTable15_50
       4  ??DataTable15_51
       4  ??DataTable15_52
       4  ??DataTable15_53
       4  ??DataTable15_54
       4  ??DataTable15_55
       4  ??DataTable15_56
       4  ??DataTable15_57
       4  ??DataTable15_58
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       4  ACCE_STATIC
       8  AD_AngleData
      36  CCD_init
     132  CCD_value
      74  CRC_CHECK
      54  CarAngleAdjust
     348  CarControlOut
     214  CarDirectionAdjust
       1  DirectionControlCount
      40  Distance
      28  GIPO_init
       4  GYRO_STATIC
      60  GetADValue
     348  GetAngle
     172  ImageCapture
       1  IntegrationTime
       4  LeftRealSpeed
       2  LeftSpeedPwm
       1  Left_cnt
       1  Left_cnt1
       1  Left_cnt2
      12  Normalized_U8
      16  OutData
     236  OutPut_Data
     108  PIT0_isr
     256  Pixel
      40  PixelAverage
     256  Pixel_fil
       2  Pixel_top
     176  PutDate
       4  RealSpeed
       4  RightRealSpeed
       2  RightSpeedPwm
       1  Right_cnt
       1  Right_cnt1
       1  Right_cnt2
      52  SamplingDelay
     120  SendDate
      82  SendHex
      66  SendImageData1
      84  SendImageData2
     258  SpeedControl
       1  SpeedControlCount
       2  SpeedPID
       4  Speed_error
       1  Speed_set
       1  TimerCnt20ms
       4  V
       1  WHITE_CENTER
      10  abs
       4  acce
       4  acce_G
       4  acce_angle
       4  acce_offset
       2  anglePD
       4  angle_error
       4  angle_kd
       4  angle_kp
       2  black_latch
       1  ccd_scan_flag
       2  ccd_scan_num
       4  dis_error
     168  edge_error
     592  edge_error1
       4  error
       4  g_nCarAngle
       1  g_nCarSpeedCount
       2  g_nLeftCount
       2  g_nRightCount
     308  get_latch
       4  gyro
       4  gyroIntegral
       4  gyro_angle
       4  gyro_offset
      40  init_gyro
       1  j
       1  last_Left_cnt
       1  last_Right_cnt
       4  last_dis_error
       4  last_error
       2  latch
     104  line_latch
     158  main
       4  motor_I
       4  motor_P
       4  p_distance
      54  pixel_binarize
       1  put_cnt
      12  put_date
       1  send_cnt
       1  send_data_cnt
      12  send_date
      20  sensor_init
       4  speed_ki
       4  speed_kp
       4  steer_kd
       4  steer_kp
       2  steerpwm
       4  w
       4  white_center
       2  white_latch

 
   965 bytes in section .bss
    43 bytes in section .data
    44 bytes in section .rodata
 4 342 bytes in section .text
 
 4 342 bytes of CODE  memory
    44 bytes of CONST memory
 1 008 bytes of DATA  memory

Errors: none
Warnings: none
