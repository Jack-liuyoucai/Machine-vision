###############################################################################
#                                                                             #
#                                                       27/Apr/2013  13:44:42 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送      #
#                    接受 像素处理  死机\src\Sources\Drivers\oled\oled.c      #
#    Command line =  "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\oled\oled.c"     #
#                    -lCN "C:\Users\Administrator\Desktop\4.25屏幕 下位机     #
#                    发送 接受 像素处理  死机\RAM\List\" -lB                  #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\RAM\List\" -o                        #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\RAM\Obj\" --no_cse --no_unroll       #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Cpu\" -I                 #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\App\" -I                 #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\adc\" -I         #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\delay\" -I       #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\FTM\" -I         #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\gpio\" -I        #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\lptmr\" -I       #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\mcg\" -I         #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\PIT\" -I         #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\uart\" -I        #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\oled\" -I        #
#                    "C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送     #
#                    接受 像素处理  死机\src\Sources\Drivers\spi\" -On        #
#                    --use_c++_inline                                         #
#    List file    =  C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送      #
#                    接受 像素处理  死机\RAM\List\oled.lst                    #
#    Object file  =  C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送      #
#                    接受 像素处理  死机\RAM\Obj\oled.o                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\4.25屏幕 下位机 发送 接受 像素处理  死机\src\Sources\Drivers\oled\oled.c
      1          #include "include.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
      2          #include "oled.h"
      3          
      4          #define X_WIDTH 128
      5          #define Y_WIDTH 64
      6          
      7          
      8          extern float V;
      9          extern uint8 WHITE_CENTER;
     10          extern float angle_kp;
     11          extern float angle_kd;
     12          extern float RealSpeed;
     13          extern float acce_angle;
     14          extern float speed_kp;
     15          extern float speed_ki;
     16          extern int16 g_nLeftCount;
     17          extern int16 g_nRightCount;
     18          
     19          extern uint8 Left_cnt;
     20          extern uint8 Right_cnt;
     21          
     22          extern float steer_kp;
     23          extern float steer_kd;
     24          
     25          extern float g_nCarAngle;
     26          extern float acce,w;
     27          extern float GYRO_STATIC,ACCE_STATIC;           //零点偏移量
     28          
     29          
     30          extern uint16 latch;
     31          extern float p_distance;
     32          extern float white_center;
     33          
     34          extern int8 IntegrationTime;
     35          extern int16 LeftSpeedPwm;
     36          extern int16 RightSpeedPwm;
     37          extern int16 anglePD;
     38          extern int16 SpeedPID;
     39          extern int16 steerpwm;
     40          
     41          extern uint16 black_latch;
     42          extern uint16 white_latch;
     43          
     44          extern  uint16 Pixel[128];              //
     45          extern  uint8 CCD_value[128];
     46          

   \                                 In section .bss, align 4
     47          uint8 g_aucImageTable[60][128]; //用于在OLED屏上显示的图片缓存
   \                     g_aucImageTable:
   \   00000000                      DS8 7680
     48          
     49          
     50          extern uint8 Speed_set;
     51          extern char delaytime;
     52          

   \                                 In section .bss, align 1
     53          unsigned char page_num=0;     //页序号
   \                     page_num:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     54          unsigned char line_num=0;     //行序号
   \                     line_num:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     55          unsigned char re_display=1;   //预显示标志位 
   \                     re_display:
   \   00000000   0x01               DC8 1
     56          
     57          
     58          
     59          
     60          
     61          //======================================
     62          // 128X64I液晶底层驱动[6X8]字体库

   \                                 In section .rodata, align 4
     63          const unsigned char F6x8[][6] =
   \                     F6x8:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x2F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x07 0x00    
   \              0x07 0x00    
   \              0x00 0x14    
   \              0x7F         
   \   00000015   0x14 0x7F          DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
   \              0x14 0x00    
   \              0x24 0x2A    
   \              0x7F 0x2A    
   \              0x12 0x00    
   \              0x62 0x64    
   \              0x08 0x13    
   \              0x23 0x00    
   \              0x36         
   \   00000026   0x49 0x55          DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
   \              0x22 0x50    
   \              0x00 0x00    
   \              0x05 0x03    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1C 0x22    
   \              0x41 0x00    
   \              0x00 0x00    
   \              0x41 0x22    
   \   0000003A   0x1C 0x00          DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
   \              0x00 0x14    
   \              0x08 0x3E    
   \              0x08 0x14    
   \              0x00 0x08    
   \              0x08 0x3E    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x60 0x00    
   \   0000004E   0x00 0x08          DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x60 0x60    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x10 0x08    
   \              0x04 0x02    
   \              0x00 0x3E    
   \              0x51         
   \   00000063   0x49 0x45          DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
   \              0x3E 0x00    
   \              0x00 0x42    
   \              0x7F 0x40    
   \              0x00 0x00    
   \              0x42 0x61    
   \              0x51 0x49    
   \              0x46 0x00    
   \              0x21 0x41    
   \   00000075   0x45 0x4B          DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
   \              0x31 0x00    
   \              0x18 0x14    
   \              0x12 0x7F    
   \              0x10 0x00    
   \              0x27 0x45    
   \              0x45 0x45    
   \              0x39 0x00    
   \              0x3C         
   \   00000086   0x4A 0x49          DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
   \              0x49 0x30    
   \              0x00 0x01    
   \              0x71 0x09    
   \              0x05 0x03    
   \              0x00 0x36    
   \              0x49 0x49    
   \              0x49 0x36    
   \              0x00 0x06    
   \              0x49         
   \   00000099   0x49 0x29          DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
   \              0x1E 0x00    
   \              0x00 0x36    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x00 0x56    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x08 0x14    
   \              0x22         
   \   000000AC   0x41 0x00          DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
   \              0x00 0x14    
   \              0x14 0x14    
   \              0x14 0x14    
   \              0x00 0x00    
   \              0x41 0x22    
   \              0x14 0x08    
   \              0x00 0x02    
   \              0x01 0x51    
   \              0x09         
   \   000000BF   0x06 0x00          DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
   \              0x32 0x49    
   \              0x59 0x51    
   \              0x3E 0x00    
   \              0x7C 0x12    
   \              0x11 0x12    
   \              0x7C 0x00    
   \              0x7F 0x49    
   \              0x49         
   \   000000D0   0x49 0x36          DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x22    
   \              0x00 0x7F    
   \              0x41 0x41    
   \              0x22 0x1C    
   \              0x00 0x7F    
   \              0x49         
   \   000000E1   0x49 0x49          DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
   \              0x41 0x00    
   \              0x7F 0x09    
   \              0x09 0x09    
   \              0x01 0x00    
   \              0x3E 0x41    
   \              0x49 0x49    
   \              0x7A 0x00    
   \              0x7F 0x08    
   \   000000F3   0x08 0x08          DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
   \              0x7F 0x00    
   \              0x00 0x41    
   \              0x7F 0x41    
   \              0x00 0x00    
   \              0x20 0x40    
   \              0x41 0x3F    
   \              0x01 0x00    
   \              0x7F 0x08    
   \   00000105   0x14 0x22          DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
   \              0x41 0x00    
   \              0x7F 0x40    
   \              0x40 0x40    
   \              0x40 0x00    
   \              0x7F 0x02    
   \              0x0C 0x02    
   \              0x7F 0x00    
   \              0x7F         
   \   00000116   0x04 0x08          DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
   \              0x10 0x7F    
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x3E    
   \              0x00 0x7F    
   \              0x09 0x09    
   \              0x09 0x06    
   \              0x00 0x3E    
   \              0x41         
   \   00000129   0x51 0x21          DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
   \              0x5E 0x00    
   \              0x7F 0x09    
   \              0x19 0x29    
   \              0x46 0x00    
   \              0x46 0x49    
   \              0x49 0x49    
   \              0x31 0x00    
   \              0x01 0x01    
   \   0000013B   0x7F 0x01          DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
   \              0x01 0x00    
   \              0x3F 0x40    
   \              0x40 0x40    
   \              0x3F 0x00    
   \              0x1F 0x20    
   \              0x40 0x20    
   \              0x1F 0x00    
   \              0x3F 0x40    
   \   0000014D   0x38 0x40          DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
   \              0x3F 0x00    
   \              0x63 0x14    
   \              0x08 0x14    
   \              0x63 0x00    
   \              0x07 0x08    
   \              0x70 0x08    
   \              0x07 0x00    
   \              0x61 0x51    
   \              0x49         
   \   00000160   0x45 0x43          DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
   \              0x00 0x00    
   \              0x7F 0x41    
   \              0x41 0x00    
   \              0x00 0x55    
   \              0x2A 0x55    
   \              0x2A 0x55    
   \              0x00 0x00    
   \              0x41 0x41    
   \   00000172   0x7F 0x00          DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
   \              0x00 0x04    
   \              0x02 0x01    
   \              0x02 0x04    
   \              0x00 0x40    
   \              0x40 0x40    
   \              0x40 0x40    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x04 0x00    
   \   00000186   0x00 0x20          DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
   \              0x54 0x54    
   \              0x54 0x78    
   \              0x00 0x7F    
   \              0x48 0x44    
   \              0x44 0x38    
   \              0x00 0x38    
   \              0x44 0x44    
   \              0x44         
   \   00000197   0x20 0x00          DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
   \              0x38 0x44    
   \              0x44 0x48    
   \              0x7F 0x00    
   \              0x38 0x54    
   \              0x54 0x54    
   \              0x18 0x00    
   \              0x08 0x7E    
   \              0x09 0x01    
   \   000001A9   0x02 0x00          DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
   \              0x18 0xA4    
   \              0xA4 0xA4    
   \              0x7C 0x00    
   \              0x7F 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x00 0x44    
   \              0x7D         
   \   000001BA   0x40 0x00          DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
   \              0x00 0x40    
   \              0x80 0x84    
   \              0x7D 0x00    
   \              0x00 0x7F    
   \              0x10 0x28    
   \              0x44 0x00    
   \              0x00 0x00    
   \              0x41         
   \   000001CB   0x7F 0x40          DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
   \              0x00 0x00    
   \              0x7C 0x04    
   \              0x18 0x04    
   \              0x78 0x00    
   \              0x7C 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x38 0x44    
   \   000001DD   0x44 0x44          DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
   \              0x38 0x00    
   \              0xFC 0x24    
   \              0x24 0x24    
   \              0x18 0x00    
   \              0x18 0x24    
   \              0x24 0x18    
   \              0xFC 0x00    
   \              0x7C         
   \   000001EE   0x08 0x04          DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
   \              0x04 0x08    
   \              0x00 0x48    
   \              0x54 0x54    
   \              0x54 0x20    
   \              0x00 0x04    
   \              0x3F 0x44    
   \              0x40 0x20    
   \              0x00 0x3C    
   \              0x40         
   \   00000201   0x40 0x20          DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
   \              0x7C 0x00    
   \              0x1C 0x20    
   \              0x40 0x20    
   \              0x1C 0x00    
   \              0x3C 0x40    
   \              0x30 0x40    
   \              0x3C 0x00    
   \              0x44         
   \   00000212   0x28 0x10          DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
   \              0x28 0x44    
   \              0x00 0x1C    
   \              0xA0 0xA0    
   \              0xA0 0x7C    
   \              0x00 0x44    
   \              0x64 0x54    
   \              0x4C 0x44    
   \   00000222   0x14 0x14          DC8 20, 20, 20, 20, 20, 20
   \              0x14 0x14    
   \              0x14 0x14    
     64          {
     65              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
     66              { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
     67              { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
     68              { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
     69              { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
     70              { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
     71              { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
     72              { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
     73              { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
     74              { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
     75              { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
     76              { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
     77              { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
     78              { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
     79              { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
     80              { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
     81              { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
     82              { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
     83              { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
     84              { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
     85              { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
     86              { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
     87              { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
     88              { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
     89              { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
     90              { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
     91              { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
     92              { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
     93              { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
     94              { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
     95              { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
     96              { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
     97              { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
     98              { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
     99              { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
    100              { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
    101              { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
    102              { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
    103              { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
    104              { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
    105              { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
    106              { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
    107              { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
    108              { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
    109              { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
    110              { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
    111              { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
    112              { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
    113              { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
    114              { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
    115              { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
    116              { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
    117              { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
    118              { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
    119              { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
    120              { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
    121              { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
    122              { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
    123              { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
    124              { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
    125              { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
    126              { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
    127              { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
    128              { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
    129              { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
    130              { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
    131              { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
    132              { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
    133              { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
    134              { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
    135              { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
    136              { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
    137              { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
    138              { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
    139              { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
    140              { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
    141              { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
    142              { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
    143              { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
    144              { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
    145              { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
    146              { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
    147              { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
    148              { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
    149              { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
    150              { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
    151              { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
    152              { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
    153              { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
    154              { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
    155              { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
    156              { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
    157          };
    158          //======================================================
    159          // 128X64I液晶底层驱动[8X16]字体库
    160          // 设计者: powerint
    161          // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
    162          // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
    163          //======================================================

   \                                 In section .rodata, align 4
    164          const unsigned char F8X16[]=
   \                     F8X16:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xF8    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x33    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x0C 0x06    
   \              0x10 0x0C    
   \              0x06 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002B   0x00 0x00          DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
   \              0x00 0x00    
   \              0x00 0x40    
   \              0xC0 0x78    
   \              0x40 0xC0    
   \              0x78 0x40    
   \              0x00 0x04    
   \              0x3F 0x04    
   \              0x04 0x3F    
   \   0000003D   0x04 0x04          DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
   \              0x00 0x00    
   \              0x70 0x88    
   \              0xFC 0x08    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x18 0x20    
   \              0xFF 0x21    
   \              0x1E 0x00    
   \   0000004F   0x00 0xF0          DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
   \              0x08 0xF0    
   \              0x00 0xE0    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x21 0x1C    
   \              0x03 0x1E    
   \              0x21 0x1E    
   \              0x00 0x00    
   \   00000061   0xF0 0x08          DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
   \              0x88 0x70    
   \              0x00 0x00    
   \              0x00 0x1E    
   \              0x21 0x23    
   \              0x24 0x19    
   \              0x27 0x21    
   \              0x10 0x10    
   \              0x16         
   \   00000072   0x0E 0x00          DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE0    
   \              0x18 0x04    
   \              0x02         
   \   00000087   0x00 0x00          DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
   \              0x00 0x00    
   \              0x07 0x18    
   \              0x20 0x40    
   \              0x00 0x00    
   \              0x02 0x04    
   \              0x18 0xE0    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40 0x20    
   \   0000009B   0x18 0x07          DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
   \              0x00 0x00    
   \              0x00 0x40    
   \              0x40 0x80    
   \              0xF0 0x80    
   \              0x40 0x40    
   \              0x00 0x02    
   \              0x02 0x01    
   \              0x0F 0x01    
   \              0x02         
   \   000000AE   0x02 0x00          DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x01    
   \              0x01 0x1F    
   \              0x01 0x01    
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C4   0x00 0x00          DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x80 0xB0    
   \              0x70 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000D9   0x01 0x01          DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x30 0x30    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000EF   0x00 0x00          DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x60 0x18    
   \              0x04 0x00    
   \              0x60 0x18    
   \              0x06 0x01    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xE0 0x10    
   \   00000103   0x08 0x08          DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
   \              0x10 0xE0    
   \              0x00 0x00    
   \              0x0F 0x10    
   \              0x20 0x20    
   \              0x10 0x0F    
   \              0x00 0x00    
   \              0x10 0x10    
   \              0xF8 0x00    
   \   00000115   0x00 0x00          DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
   \              0x00 0x00    
   \              0x20 0x20    
   \              0x3F 0x20    
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x70 0x08    
   \              0x08 0x08    
   \              0x88 0x70    
   \              0x00         
   \   00000128   0x00 0x30          DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
   \              0x28 0x24    
   \              0x22 0x21    
   \              0x30 0x00    
   \              0x00 0x30    
   \              0x08 0x88    
   \              0x88 0x48    
   \              0x30 0x00    
   \              0x00 0x18    
   \   0000013A   0x20 0x20          DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
   \              0x20 0x11    
   \              0x0E 0x00    
   \              0x00 0x00    
   \              0xC0 0x20    
   \              0x10 0xF8    
   \              0x00 0x00    
   \              0x00 0x07    
   \              0x04 0x24    
   \   0000014C   0x24 0x3F          DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
   \              0x24 0x00    
   \              0x00 0xF8    
   \              0x08 0x88    
   \              0x88 0x08    
   \              0x08 0x00    
   \              0x00 0x19    
   \              0x21 0x20    
   \              0x20 0x11    
   \   0000015E   0x0E 0x00          DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
   \              0x00 0xE0    
   \              0x10 0x88    
   \              0x88 0x18    
   \              0x00 0x00    
   \              0x00 0x0F    
   \              0x11 0x20    
   \              0x20 0x11    
   \              0x0E 0x00    
   \   00000170   0x00 0x38          DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
   \              0x08 0x08    
   \              0xC8 0x38    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x3F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x70    
   \              0x88 0x08    
   \   00000184   0x08 0x88          DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
   \              0x70 0x00    
   \              0x00 0x1C    
   \              0x22 0x21    
   \              0x21 0x22    
   \              0x1C 0x00    
   \              0x00 0xE0    
   \              0x10 0x08    
   \              0x08 0x10    
   \   00000196   0xE0 0x00          DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x31 0x22    
   \              0x22 0x11    
   \              0x0F 0x00    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0xC0 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001A9   0x00 0x00          DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
   \              0x30 0x30    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x60 0x00    
   \   000001BD   0x00 0x00          DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x40 0x20    
   \              0x10 0x08    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x04 0x08    
   \              0x10 0x20    
   \              0x00 0x40    
   \   000001D1   0x40 0x40          DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
   \              0x40 0x40    
   \              0x40 0x40    
   \              0x00 0x04    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x00 0x00    
   \              0x08 0x10    
   \              0x20 0x40    
   \   000001E5   0x80 0x00          DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
   \              0x00 0x00    
   \              0x20 0x10    
   \              0x08 0x04    
   \              0x02 0x01    
   \              0x00 0x00    
   \              0x70 0x48    
   \              0x08 0x08    
   \              0x08 0xF0    
   \              0x00 0x00    
   \   000001F9   0x00 0x00          DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
   \              0x30 0x36    
   \              0x01 0x00    
   \              0x00 0xC0    
   \              0x30 0xC8    
   \              0x28 0xE8    
   \              0x10 0xE0    
   \              0x00 0x07    
   \              0x18 0x27    
   \   0000020B   0x24 0x23          DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
   \              0x14 0x0B    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x38 0xE0    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x3C 0x23    
   \              0x02 0x02    
   \   0000021D   0x27 0x38          DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
   \              0x20 0x08    
   \              0xF8 0x88    
   \              0x88 0x88    
   \              0x70 0x00    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x20 0x20    
   \   0000022D   0x11 0x0E          DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
   \              0x00 0xC0    
   \              0x30 0x08    
   \              0x08 0x08    
   \              0x08 0x38    
   \              0x00 0x07    
   \              0x18 0x20    
   \              0x20 0x20    
   \              0x10 0x08    
   \              0x00         
   \   00000240   0x08 0xF8          DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
   \              0x08 0x08    
   \              0x08 0x10    
   \              0xE0 0x00    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x20 0x10    
   \              0x0F 0x00    
   \              0x08 0xF8    
   \   00000252   0x88 0x88          DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
   \              0xE8 0x08    
   \              0x10 0x00    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x23 0x20    
   \              0x18 0x00    
   \              0x08 0xF8    
   \              0x88         
   \   00000263   0x88 0xE8          DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
   \              0x08 0x10    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x00 0x03    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x30 0x08    
   \              0x08 0x08    
   \              0x38         
   \   00000276   0x00 0x00          DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
   \              0x07 0x18    
   \              0x20 0x20    
   \              0x22 0x1E    
   \              0x02 0x00    
   \              0x08 0xF8    
   \              0x08 0x00    
   \              0x00 0x08    
   \              0xF8 0x08    
   \              0x20         
   \   00000289   0x3F 0x21          DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
   \              0x01 0x01    
   \              0x21 0x3F    
   \              0x20 0x00    
   \              0x08 0x08    
   \              0xF8 0x08    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x20 0x20    
   \              0x3F         
   \   0000029C   0x20 0x20          DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x08    
   \              0xF8 0x08    
   \              0x08 0x00    
   \              0xC0 0x80    
   \              0x80 0x80    
   \              0x7F 0x00    
   \   000002AE   0x00 0x00          DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
   \              0x08 0xF8    
   \              0x88 0xC0    
   \              0x28 0x18    
   \              0x08 0x00    
   \              0x20 0x3F    
   \              0x20 0x01    
   \              0x26 0x38    
   \              0x20 0x00    
   \   000002C0   0x08 0xF8          DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x30 0x00    
   \              0x08 0xF8    
   \   000002D2   0xF8 0x00          DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
   \              0xF8 0xF8    
   \              0x08 0x00    
   \              0x20 0x3F    
   \              0x00 0x3F    
   \              0x00 0x3F    
   \              0x20 0x00    
   \              0x08 0xF8    
   \              0x30         
   \   000002E3   0xC0 0x00          DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
   \              0x08 0xF8    
   \              0x08 0x20    
   \              0x3F 0x20    
   \              0x00 0x07    
   \              0x18 0x3F    
   \              0x00 0xE0    
   \              0x10 0x08    
   \              0x08 0x08    
   \   000002F5   0x10 0xE0          DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
   \              0x00 0x0F    
   \              0x10 0x20    
   \              0x20 0x20    
   \              0x10 0x0F    
   \              0x00 0x08    
   \              0xF8 0x08    
   \              0x08 0x08    
   \              0x08 0xF0    
   \   00000307   0x00 0x20          DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
   \              0x3F 0x21    
   \              0x01 0x01    
   \              0x01 0x00    
   \              0x00 0xE0    
   \              0x10 0x08    
   \              0x08 0x08    
   \              0x10 0xE0    
   \              0x00 0x0F    
   \              0x18         
   \   0000031A   0x24 0x24          DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
   \              0x38 0x50    
   \              0x4F 0x00    
   \              0x08 0xF8    
   \              0x88 0x88    
   \              0x88 0x88    
   \              0x70 0x00    
   \              0x20 0x3F    
   \   0000032A   0x20 0x00          DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
   \              0x03 0x0C    
   \              0x30 0x20    
   \              0x00 0x70    
   \              0x88 0x08    
   \              0x08 0x08    
   \              0x38 0x00    
   \              0x00 0x38    
   \              0x20 0x21    
   \   0000033C   0x21 0x22          DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
   \              0x1C 0x00    
   \              0x18 0x08    
   \              0x08 0xF8    
   \              0x08 0x08    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x20 0x3F    
   \              0x20 0x00    
   \              0x00         
   \   0000034F   0x00 0x08          DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
   \              0xF8 0x08    
   \              0x00 0x00    
   \              0x08 0xF8    
   \              0x08 0x00    
   \              0x1F 0x20    
   \              0x20 0x20    
   \              0x20 0x1F    
   \              0x00 0x08    
   \              0x78         
   \   00000362   0x88 0x00          DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
   \              0x00 0xC8    
   \              0x38 0x08    
   \              0x00 0x00    
   \              0x07 0x38    
   \              0x0E 0x01    
   \              0x00 0x00    
   \              0xF8 0x08    
   \              0x00 0xF8    
   \              0x00         
   \   00000375   0x08 0xF8          DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
   \              0x00 0x03    
   \              0x3C 0x07    
   \              0x00 0x07    
   \              0x3C 0x03    
   \              0x00 0x08    
   \              0x18 0x68    
   \              0x80 0x80    
   \              0x68 0x18    
   \   00000387   0x08 0x20          DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
   \              0x30 0x2C    
   \              0x03 0x03    
   \              0x2C 0x30    
   \              0x20 0x08    
   \              0x38 0xC8    
   \              0x00 0xC8    
   \              0x38 0x08    
   \              0x00 0x00    
   \              0x00         
   \   0000039A   0x20 0x3F          DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x10 0x08    
   \              0x08 0x08    
   \              0xC8 0x38    
   \              0x08 0x00    
   \              0x20 0x38    
   \              0x26 0x21    
   \              0x20         
   \   000003AD   0x20 0x18          DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFE 0x02    
   \              0x02 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7F 0x40    
   \              0x40 0x40    
   \              0x00 0x00    
   \   000003C1   0x0C 0x30          DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
   \              0xC0 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x06    
   \              0x38 0xC0    
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x02 0xFE    
   \   000003D5   0x00 0x00          DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
   \              0x00 0x00    
   \              0x40 0x40    
   \              0x40 0x7F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x04    
   \              0x02 0x02    
   \              0x02 0x04    
   \              0x00 0x00    
   \              0x00         
   \   000003EA   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x80         
   \   000003FD   0x80 0x80          DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x80 0x00    
   \              0x02 0x02    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000412   0x80 0x80          DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x19    
   \              0x24 0x22    
   \              0x22 0x22    
   \              0x3F 0x20    
   \              0x08 0xF8    
   \              0x00         
   \   00000423   0x80 0x80          DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3F 0x11    
   \              0x20 0x20    
   \              0x11 0x0E    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x80    
   \   00000435   0x80 0x00          DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
   \              0x00 0x00    
   \              0x0E 0x11    
   \              0x20 0x20    
   \              0x20 0x11    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x88         
   \   00000446   0xF8 0x00          DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
   \              0x00 0x0E    
   \              0x11 0x20    
   \              0x20 0x10    
   \              0x3F 0x20    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00         
   \   00000457   0x00 0x00          DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
   \              0x1F 0x22    
   \              0x22 0x22    
   \              0x22 0x13    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0xF0 0x88    
   \              0x88 0x88    
   \   00000467   0x18 0x00          DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
   \              0x20 0x20    
   \              0x3F 0x20    
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00         
   \   00000478   0x00 0x6B          DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
   \              0x94 0x94    
   \              0x94 0x93    
   \              0x60 0x00    
   \              0x08 0xF8    
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x00 0x00    
   \   00000488   0x20 0x3F          DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
   \              0x21 0x00    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x00 0x80    
   \              0x98 0x98    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x20    
   \   0000049A   0x20 0x3F          DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
   \              0x20 0x20    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x98 0x98    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x80         
   \   000004AB   0x80 0x80          DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
   \              0x7F 0x00    
   \              0x00 0x08    
   \              0xF8 0x00    
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x00 0x20    
   \              0x3F 0x24    
   \              0x02         
   \   000004BC   0x2D 0x30          DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
   \              0x20 0x00    
   \              0x00 0x08    
   \              0x08 0xF8    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x00         
   \   000004CF   0x00 0x80          DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x00 0x3F    
   \              0x20 0x00    
   \   000004DF   0x3F 0x80          DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
   \              0x80 0x00    
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x20    
   \              0x3F 0x21    
   \              0x00 0x00    
   \              0x20 0x3F    
   \              0x20         
   \   000004F0   0x00 0x00          DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x1F    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x1F 0x00    
   \              0x80         
   \   00000501   0x80 0x00          DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0xFF 0xA1    
   \              0x20 0x20    
   \              0x11 0x0E    
   \              0x00 0x00    
   \              0x00         
   \   00000512   0x00 0x80          DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x0E    
   \              0x11 0x20    
   \              0x20 0xA0    
   \              0xFF 0x80    
   \              0x80         
   \   00000521   0x80 0x80          DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x00 0x20    
   \              0x20 0x3F    
   \              0x21 0x20    
   \              0x00 0x01    
   \              0x00 0x00    
   \              0x00         
   \   00000532   0x80 0x80          DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x33    
   \              0x24 0x24    
   \              0x24 0x24    
   \              0x19 0x00    
   \              0x00 0x80    
   \   00000542   0x80 0xE0          DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1F    
   \              0x20 0x20    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x00 0x00    
   \   00000554   0x00 0x80          DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
   \              0x80 0x00    
   \              0x00 0x1F    
   \              0x20 0x20    
   \              0x20 0x10    
   \              0x3F 0x20    
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00         
   \   00000565   0x80 0x80          DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
   \              0x80 0x00    
   \              0x01 0x0E    
   \              0x30 0x08    
   \              0x06 0x01    
   \              0x00 0x80    
   \              0x80 0x00    
   \              0x80 0x00    
   \              0x80         
   \   00000576   0x80 0x80          DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
   \              0x0F 0x30    
   \              0x0C 0x03    
   \              0x0C 0x30    
   \              0x0F 0x00    
   \              0x00 0x80    
   \              0x80 0x00    
   \              0x80 0x80    
   \   00000586   0x80 0x00          DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
   \              0x00 0x20    
   \              0x31 0x2E    
   \              0x0E 0x31    
   \              0x20 0x00    
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x80    
   \              0x80         
   \   00000597   0x80 0x80          DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
   \              0x81 0x8E    
   \              0x70 0x18    
   \              0x06 0x01    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x80         
   \   000005A6   0x80 0x00          DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
   \              0x00 0x21    
   \              0x30 0x2C    
   \              0x22 0x21    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x7C    
   \              0x02 0x02    
   \              0x00         
   \   000005B9   0x00 0x00          DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
   \              0x00 0x00    
   \              0x3F 0x40    
   \              0x40 0x00    
   \              0x00 0x00    
   \              0x00 0xFF    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFF    
   \   000005CD   0x00 0x00          DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x7C 0x80    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40 0x40    
   \              0x3F 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005E1   0x06 0x01          DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x02    
   \              0x02 0x04    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    165          {
    166            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
    167            0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
    168            0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
    169            0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
    170            0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
    171            0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
    172            0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
    173            0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
    174            0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
    175            0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
    176            0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
    177            0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
    178            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
    179            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
    180            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
    181            0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
    182            0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
    183            0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
    184            0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
    185            0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
    186            0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
    187            0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
    188            0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
    189            0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
    190            0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
    191            0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
    192            0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
    193            0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
    194            0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
    195            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
    196            0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
    197            0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
    198            0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
    199            0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
    200            0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
    201            0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
    202            0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
    203            0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
    204            0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
    205            0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
    206            0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
    207            0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
    208            0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
    209            0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
    210            0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
    211            0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
    212            0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
    213            0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
    214            0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
    215            0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
    216            0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
    217            0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
    218            0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
    219            0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
    220            0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
    221            0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
    222            0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
    223            0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
    224            0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
    225            0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
    226            0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
    227            0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
    228            0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
    229            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
    230            0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
    231            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
    232            0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
    233            0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
    234            0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
    235            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
    236            0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
    237            0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
    238            0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
    239            0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
    240            0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
    241            0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
    242            0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
    243            0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
    244            0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
    245            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
    246            0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
    247            0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
    248            0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
    249            0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
    250            0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
    251            0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
    252            0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
    253            0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
    254            0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
    255            0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
    256            0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
    257            0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
    258            0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
    259            0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
    260            0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
    261          
    262          };
    263          
    264          

   \                                 In section .text, align 4, keep-with-next
    265          void LCD_WrDat(byte data)
    266          {
    267                  byte i=8;
   \                     LCD_WrDat:
   \   00000000   0x2108             MOVS     R1,#+8
    268          	GPIOC_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(7));
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   00000010   0x601A             STR      R2,[R3, #+0]
    269                  asm("nop");
   \   00000012   0xBF00             nop              
    270                  asm("nop");
   \   00000014   0xBF00             nop              
    271                  asm("nop");
   \   00000016   0xBF00             nop              
    272                  asm("nop");
   \   00000018   0xBF00             nop              
    273                  asm("nop");
   \   0000001A   0xBF00             nop              
    274                  GPIOC_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(10));
   \   0000001C   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   00000020   0x6812             LDR      R2,[R2, #+0]
   \   00000022   0xF432 0x6280      BICS     R2,R2,#0x400
   \   00000026   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   0000002A   0x601A             STR      R2,[R3, #+0]
    275                  asm("nop");
   \   0000002C   0xBF00             nop              
    276                  asm("nop");
   \   0000002E   0xBF00             nop              
    277                  asm("nop");
   \   00000030   0xBF00             nop              
    278                  asm("nop");
   \   00000032   0xBF00             nop              
    279                  asm("nop");    
   \   00000034   0xBF00             nop              
    280                  while(i--)
   \                     ??LCD_WrDat_0:
   \   00000036   0x000A             MOVS     R2,R1
   \   00000038   0x1E51             SUBS     R1,R2,#+1
   \   0000003A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003C   0x2A00             CMP      R2,#+0
   \   0000003E   0xD02A             BEQ.N    ??LCD_WrDat_1
    281                  {
    282                  if(data&0x80){GPIOC_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(9));}
   \   00000040   0x0602             LSLS     R2,R0,#+24
   \   00000042   0xD509             BPL.N    ??LCD_WrDat_2
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   00000048   0x6812             LDR      R2,[R2, #+0]
   \   0000004A   0xF44F 0x7300      MOV      R3,#+512
   \   0000004E   0x431A             ORRS     R2,R3,R2
   \   00000050   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   00000054   0x601A             STR      R2,[R3, #+0]
   \   00000056   0xE007             B.N      ??LCD_WrDat_3
    283                  else{GPIOC_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(9));}
   \                     ??LCD_WrDat_2:
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   0000005C   0x6812             LDR      R2,[R2, #+0]
   \   0000005E   0xF432 0x7200      BICS     R2,R2,#0x200
   \   00000062   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   00000066   0x601A             STR      R2,[R3, #+0]
    284                  GPIOC_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(10)); 
   \                     ??LCD_WrDat_3:
   \   00000068   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   0000006C   0x6812             LDR      R2,[R2, #+0]
   \   0000006E   0xF452 0x6280      ORRS     R2,R2,#0x400
   \   00000072   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   00000076   0x601A             STR      R2,[R3, #+0]
    285                  asm("nop");
   \   00000078   0xBF00             nop              
    286                  asm("nop");
   \   0000007A   0xBF00             nop              
    287                  asm("nop");
   \   0000007C   0xBF00             nop              
    288                  asm("nop");
   \   0000007E   0xBF00             nop              
    289                  asm("nop");           
   \   00000080   0xBF00             nop              
    290                  GPIOC_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(10));   
   \   00000082   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   00000086   0x6812             LDR      R2,[R2, #+0]
   \   00000088   0xF432 0x6280      BICS     R2,R2,#0x400
   \   0000008C   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   00000090   0x601A             STR      R2,[R3, #+0]
    291                  data<<=1;    
   \   00000092   0x0040             LSLS     R0,R0,#+1
   \   00000094   0xE7CF             B.N      ??LCD_WrDat_0
    292            }
    293          }
   \                     ??LCD_WrDat_1:
   \   00000096   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
    294          void LCD_WrCmd(byte cmd)
    295          {
    296               byte i=8;
   \                     LCD_WrCmd:
   \   00000000   0x2108             MOVS     R1,#+8
    297               GPIOC_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(7));
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0xF032 0x0280      BICS     R2,R2,#0x80
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   00000010   0x601A             STR      R2,[R3, #+0]
    298               GPIOC_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(10));
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0xF432 0x6280      BICS     R2,R2,#0x400
   \   0000001C   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   00000020   0x601A             STR      R2,[R3, #+0]
    299               while(i--)
   \                     ??LCD_WrCmd_0:
   \   00000022   0x000A             MOVS     R2,R1
   \   00000024   0x1E51             SUBS     R1,R2,#+1
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0x2A00             CMP      R2,#+0
   \   0000002A   0xD02A             BEQ.N    ??LCD_WrCmd_1
    300               {
    301               if(cmd&0x80){GPIOC_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(9));}
   \   0000002C   0x0602             LSLS     R2,R0,#+24
   \   0000002E   0xD509             BPL.N    ??LCD_WrCmd_2
   \   00000030   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   00000034   0x6812             LDR      R2,[R2, #+0]
   \   00000036   0xF44F 0x7300      MOV      R3,#+512
   \   0000003A   0x431A             ORRS     R2,R3,R2
   \   0000003C   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   00000040   0x601A             STR      R2,[R3, #+0]
   \   00000042   0xE007             B.N      ??LCD_WrCmd_3
    302               else{GPIOC_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(9));}
   \                     ??LCD_WrCmd_2:
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   00000048   0x6812             LDR      R2,[R2, #+0]
   \   0000004A   0xF432 0x7200      BICS     R2,R2,#0x200
   \   0000004E   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   00000052   0x601A             STR      R2,[R3, #+0]
    303               GPIOC_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(10));
   \                     ??LCD_WrCmd_3:
   \   00000054   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   00000058   0x6812             LDR      R2,[R2, #+0]
   \   0000005A   0xF452 0x6280      ORRS     R2,R2,#0x400
   \   0000005E   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   00000062   0x601A             STR      R2,[R3, #+0]
    304                asm("nop");
   \   00000064   0xBF00             nop              
    305                asm("nop");
   \   00000066   0xBF00             nop              
    306                asm("nop");
   \   00000068   0xBF00             nop              
    307                asm("nop");
   \   0000006A   0xBF00             nop              
    308                asm("nop");          
   \   0000006C   0xBF00             nop              
    309               GPIOC_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(10));    
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400ff080
   \   00000072   0x6812             LDR      R2,[R2, #+0]
   \   00000074   0xF432 0x6280      BICS     R2,R2,#0x400
   \   00000078   0x.... 0x....      LDR.W    R3,??DataTable8  ;; 0x400ff080
   \   0000007C   0x601A             STR      R2,[R3, #+0]
    310               cmd<<=1;   
   \   0000007E   0x0040             LSLS     R0,R0,#+1
   \   00000080   0xE7CF             B.N      ??LCD_WrCmd_0
    311             } 	
    312          }
   \                     ??LCD_WrCmd_1:
   \   00000082   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    313          void LCD_Set_Pos(byte x, byte y)
    314          { 
   \                     LCD_Set_Pos:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    315            LCD_WrCmd(0xb0+y);
   \   00000006   0xF1B5 0x0050      SUBS     R0,R5,#+80
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       LCD_WrCmd
    316            LCD_WrCmd(((x&0xf0)>>4)|0x10);
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x0920             LSRS     R0,R4,#+4
   \   00000014   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      BL       LCD_WrCmd
    317            LCD_WrCmd((x&0x0f)|0x01); 
   \   0000001E   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   00000022   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       LCD_WrCmd
    318          } 
   \   0000002C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    319          void LCD_Fill(byte bmp_data)
    320          {
   \                     LCD_Fill:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    321          	byte y,x;
    322          	
    323          	for(y=0;y<8;y++)
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
   \                     ??LCD_Fill_0:
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x2D08             CMP      R5,#+8
   \   0000000C   0xD217             BCS.N    ??LCD_Fill_1
    324          	{
    325          		LCD_WrCmd(0xb0+y);
   \   0000000E   0xF1B5 0x0050      SUBS     R0,R5,#+80
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       LCD_WrCmd
    326          		LCD_WrCmd(0x01);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       LCD_WrCmd
    327          		LCD_WrCmd(0x10);
   \   0000001E   0x2010             MOVS     R0,#+16
   \   00000020   0x.... 0x....      BL       LCD_WrCmd
    328          		for(x=0;x<X_WIDTH;x++)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x0006             MOVS     R6,R0
   \                     ??LCD_Fill_2:
   \   00000028   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002A   0x2E80             CMP      R6,#+128
   \   0000002C   0xD205             BCS.N    ??LCD_Fill_3
    329          			LCD_WrDat(bmp_data);
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x.... 0x....      BL       LCD_WrDat
   \   00000036   0x1C76             ADDS     R6,R6,#+1
   \   00000038   0xE7F6             B.N      ??LCD_Fill_2
    330          	}
   \                     ??LCD_Fill_3:
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \   0000003C   0xE7E4             B.N      ??LCD_Fill_0
    331          }
   \                     ??LCD_Fill_1:
   \   0000003E   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    332          void LCD_CLS(void)
    333          {
   \                     LCD_CLS:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    334          	byte y,x;	
    335          	for(y=0;y<8;y++)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
   \                     ??LCD_CLS_0:
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C08             CMP      R4,#+8
   \   0000000A   0xD216             BCS.N    ??LCD_CLS_1
    336          	{
    337          		LCD_WrCmd(0xb0+y);
   \   0000000C   0xF1B4 0x0050      SUBS     R0,R4,#+80
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       LCD_WrCmd
    338          		LCD_WrCmd(0x01);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       LCD_WrCmd
    339          		LCD_WrCmd(0x10); 
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0x.... 0x....      BL       LCD_WrCmd
    340          		for(x=0;x<X_WIDTH;x++)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x0005             MOVS     R5,R0
   \                     ??LCD_CLS_2:
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x2D80             CMP      R5,#+128
   \   0000002A   0xD204             BCS.N    ??LCD_CLS_3
    341                          {   
    342          			LCD_WrDat(0);
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       LCD_WrDat
    343          
    344                          }
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \   00000034   0xE7F7             B.N      ??LCD_CLS_2
    345                  }
   \                     ??LCD_CLS_3:
   \   00000036   0x1C64             ADDS     R4,R4,#+1
   \   00000038   0xE7E5             B.N      ??LCD_CLS_0
    346          }
   \                     ??LCD_CLS_1:
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    347          void LCD_clear_L(unsigned char x,unsigned char y)
    348          {
   \                     LCD_clear_L:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    349          	LCD_WrCmd(0xb0+y);
   \   00000006   0xF1B5 0x0050      SUBS     R0,R5,#+80
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       LCD_WrCmd
    350          	LCD_WrCmd(0x01);
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       LCD_WrCmd
    351          	LCD_WrCmd(0x10); 
   \   00000016   0x2010             MOVS     R0,#+16
   \   00000018   0x.... 0x....      BL       LCD_WrCmd
    352                  LCD_Set_Pos(x,y);
   \   0000001C   0x0029             MOVS     R1,R5
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       LCD_Set_Pos
    353          	for(;x<X_WIDTH;x++)
   \                     ??LCD_clear_L_0:
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C80             CMP      R4,#+128
   \   0000002C   0xD204             BCS.N    ??LCD_clear_L_1
    354                  {
    355          		LCD_WrDat(0);	
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       LCD_WrDat
    356                  }
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \   00000036   0xE7F7             B.N      ??LCD_clear_L_0
    357          }
   \                     ??LCD_clear_L_1:
   \   00000038   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    358          void LCD_DLY_ms(word ms)
    359          {                         
    360            word a;
    361            while(ms)
   \                     LCD_DLY_ms:
   \                     ??LCD_DLY_ms_0:
   \   00000000   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD009             BEQ.N    ??LCD_DLY_ms_1
    362            {
    363              a=10000;
   \   00000006   0xF242 0x7210      MOVW     R2,#+10000
   \   0000000A   0x0011             MOVS     R1,R2
    364              while(a--);
   \                     ??LCD_DLY_ms_2:
   \   0000000C   0x000A             MOVS     R2,R1
   \   0000000E   0x1E51             SUBS     R1,R2,#+1
   \   00000010   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000012   0x2A00             CMP      R2,#+0
   \   00000014   0xD1FA             BNE.N    ??LCD_DLY_ms_2
    365              ms--;
   \   00000016   0x1E40             SUBS     R0,R0,#+1
   \   00000018   0xE7F2             B.N      ??LCD_DLY_ms_0
    366            }
    367            return;
   \                     ??LCD_DLY_ms_1:
   \   0000001A   0x4770             BX       LR               ;; return
    368          }
    369          

   \                                 In section .text, align 2, keep-with-next
    370          void LCD_Init(void)        
    371          {
   \                     LCD_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
    372                  // pin10,pin9为GPIO口 
    373          	PORTC_PCR10=(0|PORT_PCR_MUX(1));
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable8_1  ;; 0x4004b028
   \   00000006   0xF44F 0x7180      MOV      R1,#+256
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    374          	PORTC_PCR9=(0|PORT_PCR_MUX(1)); 
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable8_2  ;; 0x4004b024
   \   00000010   0xF44F 0x7180      MOV      R1,#+256
   \   00000014   0x6001             STR      R1,[R0, #+0]
    375          	PORTC_PCR8=(0|PORT_PCR_MUX(1));
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004b020
   \   0000001A   0xF44F 0x7180      MOV      R1,#+256
   \   0000001E   0x6001             STR      R1,[R0, #+0]
    376          	PORTC_PCR7=(0|PORT_PCR_MUX(1)); 
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x4004b01c
   \   00000024   0xF44F 0x7180      MOV      R1,#+256
   \   00000028   0x6001             STR      R1,[R0, #+0]
    377          	
    378          	GPIOC_PDDR=GPIO_PDDR_PDD(GPIO_PIN(10)|GPIO_PIN(9)|GPIO_PIN(8)|GPIO_PIN(7));
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x400ff094
   \   0000002E   0xF44F 0x61F0      MOV      R1,#+1920
   \   00000032   0x6001             STR      R1,[R0, #+0]
    379          	
    380          	GPIOC_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(10)); 	
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable8  ;; 0x400ff080
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable8  ;; 0x400ff080
   \   00000042   0x6008             STR      R0,[R1, #+0]
    381          	
    382          	GPIOC_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(8));
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable8  ;; 0x400ff080
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0xF430 0x7080      BICS     R0,R0,#0x100
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable8  ;; 0x400ff080
   \   00000052   0x6008             STR      R0,[R1, #+0]
    383          	LCD_DLY_ms(100);
   \   00000054   0x2064             MOVS     R0,#+100
   \   00000056   0x.... 0x....      BL       LCD_DLY_ms
    384          	GPIOC_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(8));
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable8  ;; 0x400ff080
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF44F 0x7180      MOV      R1,#+256
   \   00000064   0x4308             ORRS     R0,R1,R0
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable8  ;; 0x400ff080
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    385                  
    386                     
    387                  gpio_init  (PORTD, 14, GPI_UP, HIGH);//按键扫描   
   \   0000006C   0x2301             MOVS     R3,#+1
   \   0000006E   0x2203             MOVS     R2,#+3
   \   00000070   0x210E             MOVS     R1,#+14
   \   00000072   0x2003             MOVS     R0,#+3
   \   00000074   0x.... 0x....      BL       gpio_init
    388                  gpio_init  (PORTD, 15, GPI_UP, HIGH);//刷屏使能   
   \   00000078   0x2301             MOVS     R3,#+1
   \   0000007A   0x2203             MOVS     R2,#+3
   \   0000007C   0x210F             MOVS     R1,#+15
   \   0000007E   0x2003             MOVS     R0,#+3
   \   00000080   0x.... 0x....      BL       gpio_init
    389                  gpio_init  (PORTC, 12, GPI_UP, HIGH); //翻页   
   \   00000084   0x2301             MOVS     R3,#+1
   \   00000086   0x2203             MOVS     R2,#+3
   \   00000088   0x210C             MOVS     R1,#+12
   \   0000008A   0x2002             MOVS     R0,#+2
   \   0000008C   0x.... 0x....      BL       gpio_init
    390                  gpio_init  (PORTC, 13, GPI_UP, HIGH);  
   \   00000090   0x2301             MOVS     R3,#+1
   \   00000092   0x2203             MOVS     R2,#+3
   \   00000094   0x210D             MOVS     R1,#+13
   \   00000096   0x2002             MOVS     R0,#+2
   \   00000098   0x.... 0x....      BL       gpio_init
    391                  gpio_init  (PORTC, 14, GPI_UP, HIGH);   
   \   0000009C   0x2301             MOVS     R3,#+1
   \   0000009E   0x2203             MOVS     R2,#+3
   \   000000A0   0x210E             MOVS     R1,#+14
   \   000000A2   0x2002             MOVS     R0,#+2
   \   000000A4   0x.... 0x....      BL       gpio_init
    392                  gpio_init  (PORTC, 15, GPI_UP, HIGH);   
   \   000000A8   0x2301             MOVS     R3,#+1
   \   000000AA   0x2203             MOVS     R2,#+3
   \   000000AC   0x210F             MOVS     R1,#+15
   \   000000AE   0x2002             MOVS     R0,#+2
   \   000000B0   0x.... 0x....      BL       gpio_init
    393                  gpio_init  (PORTC, 16, GPI_UP, HIGH);
   \   000000B4   0x2301             MOVS     R3,#+1
   \   000000B6   0x2203             MOVS     R2,#+3
   \   000000B8   0x2110             MOVS     R1,#+16
   \   000000BA   0x2002             MOVS     R0,#+2
   \   000000BC   0x.... 0x....      BL       gpio_init
    394                  gpio_init  (PORTC, 17, GPI_UP, HIGH); 
   \   000000C0   0x2301             MOVS     R3,#+1
   \   000000C2   0x2203             MOVS     R2,#+3
   \   000000C4   0x2111             MOVS     R1,#+17
   \   000000C6   0x2002             MOVS     R0,#+2
   \   000000C8   0x.... 0x....      BL       gpio_init
    395             
    396          
    397            LCD_WrCmd(0xae);//--turn off oled panel
   \   000000CC   0x20AE             MOVS     R0,#+174
   \   000000CE   0x.... 0x....      BL       LCD_WrCmd
    398            LCD_WrCmd(0x00);//---set low column address
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x.... 0x....      BL       LCD_WrCmd
    399            LCD_WrCmd(0x10);//---set high column address
   \   000000D8   0x2010             MOVS     R0,#+16
   \   000000DA   0x.... 0x....      BL       LCD_WrCmd
    400            LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
   \   000000DE   0x2040             MOVS     R0,#+64
   \   000000E0   0x.... 0x....      BL       LCD_WrCmd
    401            LCD_WrCmd(0x81);//--set contrast control register
   \   000000E4   0x2081             MOVS     R0,#+129
   \   000000E6   0x.... 0x....      BL       LCD_WrCmd
    402            LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
   \   000000EA   0x20CF             MOVS     R0,#+207
   \   000000EC   0x.... 0x....      BL       LCD_WrCmd
    403            LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
   \   000000F0   0x20A1             MOVS     R0,#+161
   \   000000F2   0x.... 0x....      BL       LCD_WrCmd
    404            LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
   \   000000F6   0x20C8             MOVS     R0,#+200
   \   000000F8   0x.... 0x....      BL       LCD_WrCmd
    405            LCD_WrCmd(0xa6);//--set normal display
   \   000000FC   0x20A6             MOVS     R0,#+166
   \   000000FE   0x.... 0x....      BL       LCD_WrCmd
    406            LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
   \   00000102   0x20A8             MOVS     R0,#+168
   \   00000104   0x.... 0x....      BL       LCD_WrCmd
    407            LCD_WrCmd(0x3f);//--1/64 duty
   \   00000108   0x203F             MOVS     R0,#+63
   \   0000010A   0x.... 0x....      BL       LCD_WrCmd
    408            LCD_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
   \   0000010E   0x20D3             MOVS     R0,#+211
   \   00000110   0x.... 0x....      BL       LCD_WrCmd
    409            LCD_WrCmd(0x00);//-not offset
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x.... 0x....      BL       LCD_WrCmd
    410            LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
   \   0000011A   0x20D5             MOVS     R0,#+213
   \   0000011C   0x.... 0x....      BL       LCD_WrCmd
    411            LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
   \   00000120   0x2080             MOVS     R0,#+128
   \   00000122   0x.... 0x....      BL       LCD_WrCmd
    412            LCD_WrCmd(0xd9);//--set pre-charge period
   \   00000126   0x20D9             MOVS     R0,#+217
   \   00000128   0x.... 0x....      BL       LCD_WrCmd
    413            LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   \   0000012C   0x20F1             MOVS     R0,#+241
   \   0000012E   0x.... 0x....      BL       LCD_WrCmd
    414            LCD_WrCmd(0xda);//--set com pins hardware configuration
   \   00000132   0x20DA             MOVS     R0,#+218
   \   00000134   0x.... 0x....      BL       LCD_WrCmd
    415            LCD_WrCmd(0x12);
   \   00000138   0x2012             MOVS     R0,#+18
   \   0000013A   0x.... 0x....      BL       LCD_WrCmd
    416            LCD_WrCmd(0xdb);//--set vcomh
   \   0000013E   0x20DB             MOVS     R0,#+219
   \   00000140   0x.... 0x....      BL       LCD_WrCmd
    417            LCD_WrCmd(0x40);//Set VCOM Deselect Level
   \   00000144   0x2040             MOVS     R0,#+64
   \   00000146   0x.... 0x....      BL       LCD_WrCmd
    418            LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
   \   0000014A   0x2020             MOVS     R0,#+32
   \   0000014C   0x.... 0x....      BL       LCD_WrCmd
    419            LCD_WrCmd(0x02);//
   \   00000150   0x2002             MOVS     R0,#+2
   \   00000152   0x.... 0x....      BL       LCD_WrCmd
    420            LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
   \   00000156   0x208D             MOVS     R0,#+141
   \   00000158   0x.... 0x....      BL       LCD_WrCmd
    421            LCD_WrCmd(0x14);//--set(0x10) disable
   \   0000015C   0x2014             MOVS     R0,#+20
   \   0000015E   0x.... 0x....      BL       LCD_WrCmd
    422            LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
   \   00000162   0x20A4             MOVS     R0,#+164
   \   00000164   0x.... 0x....      BL       LCD_WrCmd
    423            LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
   \   00000168   0x20A6             MOVS     R0,#+166
   \   0000016A   0x.... 0x....      BL       LCD_WrCmd
    424            LCD_WrCmd(0xaf);//--turn on oled panel
   \   0000016E   0x20AF             MOVS     R0,#+175
   \   00000170   0x.... 0x....      BL       LCD_WrCmd
    425            LCD_Fill(0x00);  //初始清屏
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x.... 0x....      BL       LCD_Fill
    426            LCD_Set_Pos(0,0);  
   \   0000017A   0x2100             MOVS     R1,#+0
   \   0000017C   0x2000             MOVS     R0,#+0
   \   0000017E   0x.... 0x....      BL       LCD_Set_Pos
    427          	
    428          } 
   \   00000182   0xBD01             POP      {R0,PC}          ;; return
    429          //==============================================================
    430          //函数名： void LCD_PutPixel(byte x,byte y)
    431          //功能描述：绘制一个点（x,y）
    432          //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
    433          //返回：无
    434          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    435          void LCD_PutPixel(byte x,byte y)
    436          {
   \                     LCD_PutPixel:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    437          	byte data1;  //data1当前点的数据 
    438          	 
    439                  LCD_Set_Pos(x,y); 
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LCD_Set_Pos
    440          	data1 = 0x01<<(y%8); 	
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x2108             MOVS     R1,#+8
   \   00000018   0xFB95 0xF2F1      SDIV     R2,R5,R1
   \   0000001C   0xFB02 0x5211      MLS      R2,R2,R1,R5
   \   00000020   0x4090             LSLS     R0,R0,R2
   \   00000022   0x0006             MOVS     R6,R0
    441          	LCD_WrCmd(0xb0+(y>>3));
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x08E8             LSRS     R0,R5,#+3
   \   00000028   0x3850             SUBS     R0,R0,#+80
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       LCD_WrCmd
    442          	LCD_WrCmd(((x&0xf0)>>4)|0x10);
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x0920             LSRS     R0,R4,#+4
   \   00000034   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x.... 0x....      BL       LCD_WrCmd
    443          	LCD_WrCmd((x&0x0f)|0x00);
   \   0000003E   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   00000042   0x.... 0x....      BL       LCD_WrCmd
    444          	LCD_WrDat(data1); 	 	
   \   00000046   0x0030             MOVS     R0,R6
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x.... 0x....      BL       LCD_WrDat
    445          }
   \   0000004E   0xBD70             POP      {R4-R6,PC}       ;; return
    446          //==============================================================
    447          //函数名： void LCD_Rectangle(byte x1,byte y1,
    448          //                   byte x2,byte y2,byte color,byte gif)
    449          //功能描述：绘制一个实心矩形
    450          //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
    451          //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
    452          //返回：无
    453          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    454          void LCD_Rectangle(byte x1,byte y1,byte x2,byte y2,byte gif)
    455          {
   \                     LCD_Rectangle:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
    456          	byte n; 
    457          		
    458          	LCD_Set_Pos(x1,y1>>3);
   \   0000000E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000010   0x08F1             LSRS     R1,R6,#+3
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       LCD_Set_Pos
    459          	for(n=x1;n<=x2;n++)
   \   0000001A   0x46A9             MOV      R9,R5
   \                     ??LCD_Rectangle_0:
   \   0000001C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000022   0x454F             CMP      R7,R9
   \   00000024   0xD313             BCC.N    ??LCD_Rectangle_1
    460          	{
    461          		LCD_WrDat(0x01<<(y1%8)); 			
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002A   0x2108             MOVS     R1,#+8
   \   0000002C   0xFB96 0xF2F1      SDIV     R2,R6,R1
   \   00000030   0xFB02 0x6211      MLS      R2,R2,R1,R6
   \   00000034   0x4090             LSLS     R0,R0,R2
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       LCD_WrDat
    462          		if(gif == 1) 	LCD_DLY_ms(50);
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0x2C01             CMP      R4,#+1
   \   00000040   0xD102             BNE.N    ??LCD_Rectangle_2
   \   00000042   0x2032             MOVS     R0,#+50
   \   00000044   0x.... 0x....      BL       LCD_DLY_ms
    463          	}  
   \                     ??LCD_Rectangle_2:
   \   00000048   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000004C   0xE7E6             B.N      ??LCD_Rectangle_0
    464          	LCD_Set_Pos(x1,y2>>3);
   \                     ??LCD_Rectangle_1:
   \   0000004E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000052   0xEA5F 0x01D8      LSRS     R1,R8,#+3
   \   00000056   0x0028             MOVS     R0,R5
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x.... 0x....      BL       LCD_Set_Pos
    465                  for(n=x1;n<=x2;n++)
   \   0000005E   0x46A9             MOV      R9,R5
   \                     ??LCD_Rectangle_3:
   \   00000060   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000062   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000066   0x454F             CMP      R7,R9
   \   00000068   0xD314             BCC.N    ??LCD_Rectangle_4
    466          	{
    467          		LCD_WrDat(0x01<<(y2%8)); 			
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000070   0x2108             MOVS     R1,#+8
   \   00000072   0xFB98 0xF2F1      SDIV     R2,R8,R1
   \   00000076   0xFB02 0x8211      MLS      R2,R2,R1,R8
   \   0000007A   0x4090             LSLS     R0,R0,R2
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x.... 0x....      BL       LCD_WrDat
    468          		if(gif == 1) 	LCD_DLY_ms(5);
   \   00000082   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000084   0x2C01             CMP      R4,#+1
   \   00000086   0xD102             BNE.N    ??LCD_Rectangle_5
   \   00000088   0x2005             MOVS     R0,#+5
   \   0000008A   0x.... 0x....      BL       LCD_DLY_ms
    469          	}
   \                     ??LCD_Rectangle_5:
   \   0000008E   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000092   0xE7E5             B.N      ??LCD_Rectangle_3
    470          	
    471          } 
   \                     ??LCD_Rectangle_4:
   \   00000094   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    472          //==============================================================
    473          //功能描述：写入一组标准ASCII字符
    474          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
    475          //返回：无
    476          //============================================================== 

   \                                 In section .text, align 2, keep-with-next
    477          void write_6_8_char(byte x,byte y,byte ucData) 
    478          {
   \                     write_6_8_char:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x4688             MOV      R8,R1
   \   00000008   0x0015             MOVS     R5,R2
    479              byte i, ucDataTmp;       
    480              ucDataTmp = ucData-32;
   \   0000000A   0xF1B5 0x0020      SUBS     R0,R5,#+32
   \   0000000E   0x0007             MOVS     R7,R0
    481              if(x > 126)
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C7F             CMP      R4,#+127
   \   00000014   0xD303             BCC.N    ??write_6_8_char_0
    482              {
    483                  x= 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x0004             MOVS     R4,R0
    484                  y++;
   \   0000001A   0xF118 0x0801      ADDS     R8,R8,#+1
    485              }
    486              
    487              LCD_Set_Pos(x, y);
   \                     ??write_6_8_char_0:
   \   0000001E   0x4641             MOV      R1,R8
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       LCD_Set_Pos
    488              
    489              for(i = 0; i < 6; i++)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x0006             MOVS     R6,R0
   \                     ??write_6_8_char_1:
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x2E06             CMP      R6,#+6
   \   00000032   0xD20B             BCS.N    ??write_6_8_char_2
    490              {     
    491                  LCD_WrDat(F6x8[ucDataTmp][i]);  
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x2006             MOVS     R0,#+6
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable10
   \   0000003E   0xFB00 0x1007      MLA      R0,R0,R7,R1
   \   00000042   0x5C30             LDRB     R0,[R6, R0]
   \   00000044   0x.... 0x....      BL       LCD_WrDat
    492              }
   \   00000048   0x1C76             ADDS     R6,R6,#+1
   \   0000004A   0xE7F0             B.N      ??write_6_8_char_1
    493          }
   \                     ??write_6_8_char_2:
   \   0000004C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    494          //==============================================================
    495          //功能描述：写入一组标准ASCII字符串
    496          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
    497          //返回：无
    498          //==============================================================  

   \                                 In section .text, align 2, keep-with-next
    499          void write_6_8_string(byte x,byte y,byte ch[])
    500          {
   \                     write_6_8_string:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    501            byte c=0,i=0,j=0;      
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
    502            while (ch[j]!='\0')
   \                     ??write_6_8_string_0:
   \   00000014   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000018   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD02B             BEQ.N    ??write_6_8_string_1
    503            {    
    504              c =ch[j]-32;
   \   00000020   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000024   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   00000028   0x3820             SUBS     R0,R0,#+32
   \   0000002A   0x0007             MOVS     R7,R0
    505              if(x>126){x=0;y++;}
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2C7F             CMP      R4,#+127
   \   00000030   0xD302             BCC.N    ??write_6_8_string_2
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x0004             MOVS     R4,R0
   \   00000036   0x1C6D             ADDS     R5,R5,#+1
    506              LCD_Set_Pos(x,y);    
   \                     ??write_6_8_string_2:
   \   00000038   0x0029             MOVS     R1,R5
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x.... 0x....      BL       LCD_Set_Pos
    507            	for(i=0;i<6;i++)     
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x4680             MOV      R8,R0
   \                     ??write_6_8_string_3:
   \   00000048   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004C   0xF1B8 0x0F06      CMP      R8,#+6
   \   00000050   0xD20E             BCS.N    ??write_6_8_string_4
    508            	  LCD_WrDat(F6x8[c][i]);  
   \   00000052   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000056   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000058   0x2006             MOVS     R0,#+6
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable10
   \   0000005E   0xFB00 0x1007      MLA      R0,R0,R7,R1
   \   00000062   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   00000066   0x.... 0x....      BL       LCD_WrDat
   \   0000006A   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000006E   0xE7EB             B.N      ??write_6_8_string_3
    509            	x+=6;
   \                     ??write_6_8_string_4:
   \   00000070   0x1DA4             ADDS     R4,R4,#+6
    510            	j++;
   \   00000072   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000076   0xE7CD             B.N      ??write_6_8_string_0
    511            }
    512          }
   \                     ??write_6_8_string_1:
   \   00000078   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    513          /****************************************************************
    514                             写6*8点阵数字函数
    515          ****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    516          void write_6_8_number(unsigned char x,unsigned char y, float number)
    517          {
   \                     write_6_8_number:
   \   00000000   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x4691             MOV      R9,R2
    518            unsigned char i=0;
   \   0000000A   0x2500             MOVS     R5,#+0
    519            unsigned char temp[16];
    520            unsigned char *point=temp;
   \   0000000C   0xAE00             ADD      R6,SP,#+0
    521            float decimal;
    522            int data;
    523            
    524            if(number<0)
   \   0000000E   0x4648             MOV      R0,R9
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000016   0xD20E             BCS.N    ??write_6_8_number_0
    525              {
    526               temp[0]='-';
   \   00000018   0x202D             MOVS     R0,#+45
   \   0000001A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    527               write_6_8_char(x,y,temp[0]);
   \   0000001E   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x4640             MOV      R0,R8
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       write_6_8_char
    528               x+=6;
   \   0000002E   0xF118 0x0806      ADDS     R8,R8,#+6
    529               number=-number; 
   \   00000032   0xF099 0x4900      EORS     R9,R9,#0x80000000
    530              }
    531              
    532            data=(int)number;
   \                     ??write_6_8_number_0:
   \   00000036   0x4648             MOV      R0,R9
   \   00000038   0x.... 0x....      BL       __aeabi_f2iz
   \   0000003C   0x4682             MOV      R10,R0
    533            decimal=number-data;     //得到小数部分
   \   0000003E   0x4650             MOV      R0,R10
   \   00000040   0x.... 0x....      BL       __aeabi_i2f
   \   00000044   0x0001             MOVS     R1,R0
   \   00000046   0x4648             MOV      R0,R9
   \   00000048   0x.... 0x....      BL       __aeabi_fsub
   \   0000004C   0x0007             MOVS     R7,R0
    534            
    535             
    536            if(data>=1000)           //是否可被1000整除
   \   0000004E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000052   0x4582             CMP      R10,R0
   \   00000054   0xDB0E             BLT.N    ??write_6_8_number_1
    537              {
    538               temp[i]=48+data/1000;
   \   00000056   0xF44F 0x707A      MOV      R0,#+1000
   \   0000005A   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \   0000005E   0x3030             ADDS     R0,R0,#+48
   \   00000060   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000062   0xA900             ADD      R1,SP,#+0
   \   00000064   0x5468             STRB     R0,[R5, R1]
    539               data=data%1000;
   \   00000066   0xF44F 0x707A      MOV      R0,#+1000
   \   0000006A   0xFB9A 0xF1F0      SDIV     R1,R10,R0
   \   0000006E   0xFB00 0xAA11      MLS      R10,R0,R1,R10
    540               i++;
   \   00000072   0x1C6D             ADDS     R5,R5,#+1
    541              }
    542          
    543             
    544            if(data>=100)              //是否可被100整除
   \                     ??write_6_8_number_1:
   \   00000074   0xF1BA 0x0F64      CMP      R10,#+100
   \   00000078   0xDB0D             BLT.N    ??write_6_8_number_2
    545             {
    546              temp[i]=48+data/100;
   \   0000007A   0x2064             MOVS     R0,#+100
   \   0000007C   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \   00000080   0x3030             ADDS     R0,R0,#+48
   \   00000082   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000084   0xA900             ADD      R1,SP,#+0
   \   00000086   0x5468             STRB     R0,[R5, R1]
    547              data=data%100;
   \   00000088   0x2064             MOVS     R0,#+100
   \   0000008A   0xFB9A 0xF1F0      SDIV     R1,R10,R0
   \   0000008E   0xFB00 0xAA11      MLS      R10,R0,R1,R10
    548              i++;
   \   00000092   0x1C6D             ADDS     R5,R5,#+1
   \   00000094   0xE00A             B.N      ??write_6_8_number_3
    549             }
    550            else 
    551              if(data<100&&i!=0)
   \                     ??write_6_8_number_2:
   \   00000096   0xF1BA 0x0F64      CMP      R10,#+100
   \   0000009A   0xDA07             BGE.N    ??write_6_8_number_3
   \   0000009C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009E   0x2D00             CMP      R5,#+0
   \   000000A0   0xD004             BEQ.N    ??write_6_8_number_3
    552               {
    553               temp[i]=0+48;
   \   000000A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A4   0xA800             ADD      R0,SP,#+0
   \   000000A6   0x2130             MOVS     R1,#+48
   \   000000A8   0x5429             STRB     R1,[R5, R0]
    554               i++;
   \   000000AA   0x1C6D             ADDS     R5,R5,#+1
    555               }
    556             
    557            if(data>=10)                  //是否可被10整除
   \                     ??write_6_8_number_3:
   \   000000AC   0xF1BA 0x0F0A      CMP      R10,#+10
   \   000000B0   0xDB0D             BLT.N    ??write_6_8_number_4
    558              {
    559               temp[i]=48+data/10;
   \   000000B2   0x200A             MOVS     R0,#+10
   \   000000B4   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \   000000B8   0x3030             ADDS     R0,R0,#+48
   \   000000BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BC   0xA900             ADD      R1,SP,#+0
   \   000000BE   0x5468             STRB     R0,[R5, R1]
    560               data=data%10;
   \   000000C0   0x200A             MOVS     R0,#+10
   \   000000C2   0xFB9A 0xF1F0      SDIV     R1,R10,R0
   \   000000C6   0xFB00 0xAA11      MLS      R10,R0,R1,R10
    561               i++;
   \   000000CA   0x1C6D             ADDS     R5,R5,#+1
   \   000000CC   0xE00A             B.N      ??write_6_8_number_5
    562              }
    563            else 
    564              if(data<10&&i!=0)
   \                     ??write_6_8_number_4:
   \   000000CE   0xF1BA 0x0F0A      CMP      R10,#+10
   \   000000D2   0xDA07             BGE.N    ??write_6_8_number_5
   \   000000D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D6   0x2D00             CMP      R5,#+0
   \   000000D8   0xD004             BEQ.N    ??write_6_8_number_5
    565               {
    566               temp[i]=48;
   \   000000DA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000DC   0xA800             ADD      R0,SP,#+0
   \   000000DE   0x2130             MOVS     R1,#+48
   \   000000E0   0x5429             STRB     R1,[R5, R0]
    567               i++;
   \   000000E2   0x1C6D             ADDS     R5,R5,#+1
    568               }
    569               
    570            temp[i]=48+data;
   \                     ??write_6_8_number_5:
   \   000000E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E6   0xA800             ADD      R0,SP,#+0
   \   000000E8   0xF11A 0x0130      ADDS     R1,R10,#+48
   \   000000EC   0x5429             STRB     R1,[R5, R0]
    571             
    572                
    573            if(decimal>=0.0001)           //判断是否为小数
   \   000000EE   0x0038             MOVS     R0,R7
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable10_1  ;; 0x38d1b718
   \   000000F4   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000F8   0xD832             BHI.N    ??write_6_8_number_6
    574             {
    575              i++;
   \   000000FA   0x1C6D             ADDS     R5,R5,#+1
    576              temp[i]='.';                //加小数点
   \   000000FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FE   0xA800             ADD      R0,SP,#+0
   \   00000100   0x212E             MOVS     R1,#+46
   \   00000102   0x5429             STRB     R1,[R5, R0]
    577              i++;
   \   00000104   0x1C6D             ADDS     R5,R5,#+1
    578              
    579              data=(int)(decimal*1000);
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x447a0000
   \   0000010A   0x0039             MOVS     R1,R7
   \   0000010C   0x.... 0x....      BL       __aeabi_fmul
   \   00000110   0x.... 0x....      BL       __aeabi_f2iz
   \   00000114   0x4682             MOV      R10,R0
    580             
    581              temp[i]=48+data/100;
   \   00000116   0x2064             MOVS     R0,#+100
   \   00000118   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \   0000011C   0x3030             ADDS     R0,R0,#+48
   \   0000011E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000120   0xA900             ADD      R1,SP,#+0
   \   00000122   0x5468             STRB     R0,[R5, R1]
    582              
    583              data=data%100;
   \   00000124   0x2064             MOVS     R0,#+100
   \   00000126   0xFB9A 0xF1F0      SDIV     R1,R10,R0
   \   0000012A   0xFB00 0xAA11      MLS      R10,R0,R1,R10
    584              i++;
   \   0000012E   0x1C6D             ADDS     R5,R5,#+1
    585             
    586              if(data>0)
   \   00000130   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000134   0xDB0B             BLT.N    ??write_6_8_number_7
    587                {
    588                 temp[i]=48+data/10;
   \   00000136   0x200A             MOVS     R0,#+10
   \   00000138   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \   0000013C   0x3030             ADDS     R0,R0,#+48
   \   0000013E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000140   0xA900             ADD      R1,SP,#+0
   \   00000142   0x5468             STRB     R0,[R5, R1]
    589                 data=data%10;
   \   00000144   0x200A             MOVS     R0,#+10
   \   00000146   0xFB9A 0xF1F0      SDIV     R1,R10,R0
   \   0000014A   0xFB00 0xAA11      MLS      R10,R0,R1,R10
    590                 
    591                 
    592                }
    593              if(data>=0)
   \                     ??write_6_8_number_7:
   \   0000014E   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000152   0xD405             BMI.N    ??write_6_8_number_6
    594                {
    595                 i++;
   \   00000154   0x1C6D             ADDS     R5,R5,#+1
    596                 temp[i]=data+48; 
   \   00000156   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000158   0xA800             ADD      R0,SP,#+0
   \   0000015A   0xF11A 0x0130      ADDS     R1,R10,#+48
   \   0000015E   0x5429             STRB     R1,[R5, R0]
    597                }
    598              
    599             }     
    600          
    601            i++;
   \                     ??write_6_8_number_6:
   \   00000160   0x1C6D             ADDS     R5,R5,#+1
    602            temp[i]='\0';
   \   00000162   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000164   0xA800             ADD      R0,SP,#+0
   \   00000166   0x2100             MOVS     R1,#+0
   \   00000168   0x5429             STRB     R1,[R5, R0]
    603              write_6_8_string(x,y,point); 
   \   0000016A   0x0032             MOVS     R2,R6
   \   0000016C   0x0021             MOVS     R1,R4
   \   0000016E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000170   0x4640             MOV      R0,R8
   \   00000172   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000174   0x.... 0x....      BL       write_6_8_string
    604            
    605          }
   \   00000178   0xE8BD 0x87FF      POP      {R0-R10,PC}      ;; return
    606          //==============================================================
    607          //功能描述：写入一组标准ASCII字符
    608          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符
    609          //返回：无
    610          //==============================================================  

   \                                 In section .text, align 2, keep-with-next
    611          void write_8_16_char(byte x,byte y,byte ch)
    612          {
   \                     write_8_16_char:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x4689             MOV      R9,R1
   \   00000008   0x0015             MOVS     R5,R2
    613              byte c=0,i=0,j=0;   
   \   0000000A   0x2600             MOVS     R6,#+0
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
    614              c =ch-32;
   \   00000012   0xF1B5 0x0020      SUBS     R0,R5,#+32
   \   00000016   0x0006             MOVS     R6,R0
    615              if(x>120){x=0;y++;}
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2C79             CMP      R4,#+121
   \   0000001C   0xD303             BCC.N    ??write_8_16_char_0
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x0004             MOVS     R4,R0
   \   00000022   0xF119 0x0901      ADDS     R9,R9,#+1
    616              LCD_Set_Pos(x,y);    
   \                     ??write_8_16_char_0:
   \   00000026   0x4649             MOV      R1,R9
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x.... 0x....      BL       LCD_Set_Pos
    617            	for(i=0;i<8;i++)     
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x0007             MOVS     R7,R0
   \                     ??write_8_16_char_1:
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x2F08             CMP      R7,#+8
   \   0000003A   0xD20A             BCS.N    ??write_8_16_char_2
    618            	  LCD_WrDat(F8X16[c*16+i]);
   \   0000003C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003E   0x0130             LSLS     R0,R6,#+4
   \   00000040   0xFA50 0xF087      UXTAB    R0,R0,R7
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   00000048   0x5C40             LDRB     R0,[R0, R1]
   \   0000004A   0x.... 0x....      BL       LCD_WrDat
   \   0000004E   0x1C7F             ADDS     R7,R7,#+1
   \   00000050   0xE7F1             B.N      ??write_8_16_char_1
    619            	LCD_Set_Pos(x,y+1);    
   \                     ??write_8_16_char_2:
   \   00000052   0xF119 0x0101      ADDS     R1,R9,#+1
   \   00000056   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x.... 0x....      BL       LCD_Set_Pos
    620            	for(i=0;i<8;i++)     
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x0007             MOVS     R7,R0
   \                     ??write_8_16_char_3:
   \   00000064   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000066   0x2F08             CMP      R7,#+8
   \   00000068   0xD20B             BCS.N    ??write_8_16_char_4
    621            	  LCD_WrDat(F8X16[c*16+i+8]);  
   \   0000006A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000006C   0x0130             LSLS     R0,R6,#+4
   \   0000006E   0xFA50 0xF087      UXTAB    R0,R0,R7
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   00000076   0x1840             ADDS     R0,R0,R1
   \   00000078   0x7A00             LDRB     R0,[R0, #+8]
   \   0000007A   0x.... 0x....      BL       LCD_WrDat
   \   0000007E   0x1C7F             ADDS     R7,R7,#+1
   \   00000080   0xE7F0             B.N      ??write_8_16_char_3
    622            	x+=8;
   \                     ??write_8_16_char_4:
   \   00000082   0x3408             ADDS     R4,R4,#+8
    623            	j++;
   \   00000084   0xF118 0x0801      ADDS     R8,R8,#+1
    624           
    625          }
   \   00000088   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    626          //==============================================================
    627          //功能描述：写入一组标准ASCII字符串
    628          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
    629          //返回：无
    630          //==============================================================  

   \                                 In section .text, align 2, keep-with-next
    631          void write_8_16_string(byte x,byte y,byte ch[])
    632          {
   \                     write_8_16_string:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    633            byte c=0,i=0,j=0;
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
    634                  
    635            while (ch[j]!='\0')
   \                     ??write_8_16_string_0:
   \   00000014   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000018   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD042             BEQ.N    ??write_8_16_string_1
    636            {    
    637              c =ch[j]-32;
   \   00000020   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000024   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   00000028   0x3820             SUBS     R0,R0,#+32
   \   0000002A   0x0007             MOVS     R7,R0
    638              if(x>120){x=0;y++;}
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2C79             CMP      R4,#+121
   \   00000030   0xD302             BCC.N    ??write_8_16_string_2
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x0004             MOVS     R4,R0
   \   00000036   0x1C6D             ADDS     R5,R5,#+1
    639              LCD_Set_Pos(x,y);    
   \                     ??write_8_16_string_2:
   \   00000038   0x0029             MOVS     R1,R5
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x.... 0x....      BL       LCD_Set_Pos
    640            	for(i=0;i<8;i++)     
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x4680             MOV      R8,R0
   \                     ??write_8_16_string_3:
   \   00000048   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004C   0xF1B8 0x0F08      CMP      R8,#+8
   \   00000050   0xD20B             BCS.N    ??write_8_16_string_4
    641            	  LCD_WrDat(F8X16[c*16+i]);
   \   00000052   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000054   0x0138             LSLS     R0,R7,#+4
   \   00000056   0xFA50 0xF088      UXTAB    R0,R0,R8
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   0000005E   0x5C40             LDRB     R0,[R0, R1]
   \   00000060   0x.... 0x....      BL       LCD_WrDat
   \   00000064   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000068   0xE7EE             B.N      ??write_8_16_string_3
    642            	LCD_Set_Pos(x,y+1);    
   \                     ??write_8_16_string_4:
   \   0000006A   0x1C69             ADDS     R1,R5,#+1
   \   0000006C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x.... 0x....      BL       LCD_Set_Pos
    643            	for(i=0;i<8;i++)     
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x4680             MOV      R8,R0
   \                     ??write_8_16_string_5:
   \   0000007A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000007E   0xF1B8 0x0F08      CMP      R8,#+8
   \   00000082   0xD20C             BCS.N    ??write_8_16_string_6
    644            	  LCD_WrDat(F8X16[c*16+i+8]);  
   \   00000084   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000086   0x0138             LSLS     R0,R7,#+4
   \   00000088   0xFA50 0xF088      UXTAB    R0,R0,R8
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   00000090   0x1840             ADDS     R0,R0,R1
   \   00000092   0x7A00             LDRB     R0,[R0, #+8]
   \   00000094   0x.... 0x....      BL       LCD_WrDat
   \   00000098   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000009C   0xE7ED             B.N      ??write_8_16_string_5
    645            	x+=8;
   \                     ??write_8_16_string_6:
   \   0000009E   0x3408             ADDS     R4,R4,#+8
    646            	j++;
   \   000000A0   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000A4   0xE7B6             B.N      ??write_8_16_string_0
    647            }
    648          }
   \                     ??write_8_16_string_1:
   \   000000A6   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    649          /****************************************************************
    650                             写8*16点阵数字函数
    651          ****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    652          void write_8_16_number(unsigned char x,unsigned char y, float number)
    653          {
   \                     write_8_16_number:
   \   00000000   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x4691             MOV      R9,R2
    654            unsigned char i=0;
   \   0000000A   0x2500             MOVS     R5,#+0
    655            unsigned char temp[16];
    656            unsigned char *point=temp;
   \   0000000C   0xAE00             ADD      R6,SP,#+0
    657            float decimal;
    658            int data;
    659            
    660            if(number<0)
   \   0000000E   0x4648             MOV      R0,R9
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000016   0xD20E             BCS.N    ??write_8_16_number_0
    661              {
    662               temp[0]='-';
   \   00000018   0x202D             MOVS     R0,#+45
   \   0000001A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    663               write_8_16_char(x,y,temp[0]);
   \   0000001E   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x4640             MOV      R0,R8
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       write_8_16_char
    664               x+=1;
   \   0000002E   0xF118 0x0801      ADDS     R8,R8,#+1
    665               number=-number; 
   \   00000032   0xF099 0x4900      EORS     R9,R9,#0x80000000
    666              }
    667              
    668            data=(int)number;
   \                     ??write_8_16_number_0:
   \   00000036   0x4648             MOV      R0,R9
   \   00000038   0x.... 0x....      BL       __aeabi_f2iz
   \   0000003C   0x4682             MOV      R10,R0
    669            decimal=number-data;     //得到小数部分
   \   0000003E   0x4650             MOV      R0,R10
   \   00000040   0x.... 0x....      BL       __aeabi_i2f
   \   00000044   0x0001             MOVS     R1,R0
   \   00000046   0x4648             MOV      R0,R9
   \   00000048   0x.... 0x....      BL       __aeabi_fsub
   \   0000004C   0x0007             MOVS     R7,R0
    670            
    671             
    672            if(data>=1000)           //是否可被1000整除
   \   0000004E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000052   0x4582             CMP      R10,R0
   \   00000054   0xDB0E             BLT.N    ??write_8_16_number_1
    673              {
    674               temp[i]=48+data/1000;
   \   00000056   0xF44F 0x707A      MOV      R0,#+1000
   \   0000005A   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \   0000005E   0x3030             ADDS     R0,R0,#+48
   \   00000060   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000062   0xA900             ADD      R1,SP,#+0
   \   00000064   0x5468             STRB     R0,[R5, R1]
    675               data=data%1000;
   \   00000066   0xF44F 0x707A      MOV      R0,#+1000
   \   0000006A   0xFB9A 0xF1F0      SDIV     R1,R10,R0
   \   0000006E   0xFB00 0xAA11      MLS      R10,R0,R1,R10
    676               i++;
   \   00000072   0x1C6D             ADDS     R5,R5,#+1
    677              }
    678          
    679             
    680            if(data>=100)              //是否可被100整除
   \                     ??write_8_16_number_1:
   \   00000074   0xF1BA 0x0F64      CMP      R10,#+100
   \   00000078   0xDB0D             BLT.N    ??write_8_16_number_2
    681             {
    682              temp[i]=48+data/100;
   \   0000007A   0x2064             MOVS     R0,#+100
   \   0000007C   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \   00000080   0x3030             ADDS     R0,R0,#+48
   \   00000082   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000084   0xA900             ADD      R1,SP,#+0
   \   00000086   0x5468             STRB     R0,[R5, R1]
    683              data=data%100;
   \   00000088   0x2064             MOVS     R0,#+100
   \   0000008A   0xFB9A 0xF1F0      SDIV     R1,R10,R0
   \   0000008E   0xFB00 0xAA11      MLS      R10,R0,R1,R10
    684              i++;
   \   00000092   0x1C6D             ADDS     R5,R5,#+1
   \   00000094   0xE00A             B.N      ??write_8_16_number_3
    685             }
    686            else 
    687              if(data<100&&i!=0)
   \                     ??write_8_16_number_2:
   \   00000096   0xF1BA 0x0F64      CMP      R10,#+100
   \   0000009A   0xDA07             BGE.N    ??write_8_16_number_3
   \   0000009C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009E   0x2D00             CMP      R5,#+0
   \   000000A0   0xD004             BEQ.N    ??write_8_16_number_3
    688               {
    689               temp[i]=0+48;
   \   000000A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A4   0xA800             ADD      R0,SP,#+0
   \   000000A6   0x2130             MOVS     R1,#+48
   \   000000A8   0x5429             STRB     R1,[R5, R0]
    690               i++;
   \   000000AA   0x1C6D             ADDS     R5,R5,#+1
    691               }
    692             
    693            if(data>=10)                  //是否可被10整除
   \                     ??write_8_16_number_3:
   \   000000AC   0xF1BA 0x0F0A      CMP      R10,#+10
   \   000000B0   0xDB0D             BLT.N    ??write_8_16_number_4
    694              {
    695               temp[i]=48+data/10;
   \   000000B2   0x200A             MOVS     R0,#+10
   \   000000B4   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \   000000B8   0x3030             ADDS     R0,R0,#+48
   \   000000BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BC   0xA900             ADD      R1,SP,#+0
   \   000000BE   0x5468             STRB     R0,[R5, R1]
    696               data=data%10;
   \   000000C0   0x200A             MOVS     R0,#+10
   \   000000C2   0xFB9A 0xF1F0      SDIV     R1,R10,R0
   \   000000C6   0xFB00 0xAA11      MLS      R10,R0,R1,R10
    697               i++;
   \   000000CA   0x1C6D             ADDS     R5,R5,#+1
   \   000000CC   0xE00A             B.N      ??write_8_16_number_5
    698              }
    699            else 
    700              if(data<10&&i!=0)
   \                     ??write_8_16_number_4:
   \   000000CE   0xF1BA 0x0F0A      CMP      R10,#+10
   \   000000D2   0xDA07             BGE.N    ??write_8_16_number_5
   \   000000D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D6   0x2D00             CMP      R5,#+0
   \   000000D8   0xD004             BEQ.N    ??write_8_16_number_5
    701               {
    702               temp[i]=48;
   \   000000DA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000DC   0xA800             ADD      R0,SP,#+0
   \   000000DE   0x2130             MOVS     R1,#+48
   \   000000E0   0x5429             STRB     R1,[R5, R0]
    703               i++;
   \   000000E2   0x1C6D             ADDS     R5,R5,#+1
    704               }
    705               
    706            temp[i]=48+data;
   \                     ??write_8_16_number_5:
   \   000000E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E6   0xA800             ADD      R0,SP,#+0
   \   000000E8   0xF11A 0x0130      ADDS     R1,R10,#+48
   \   000000EC   0x5429             STRB     R1,[R5, R0]
    707             
    708                
    709            if(decimal>=0.0001)           //判断是否为小数
   \   000000EE   0x0038             MOVS     R0,R7
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable10_1  ;; 0x38d1b718
   \   000000F4   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000F8   0xD832             BHI.N    ??write_8_16_number_6
    710             {
    711              i++;
   \   000000FA   0x1C6D             ADDS     R5,R5,#+1
    712              temp[i]='.';                //加小数点
   \   000000FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FE   0xA800             ADD      R0,SP,#+0
   \   00000100   0x212E             MOVS     R1,#+46
   \   00000102   0x5429             STRB     R1,[R5, R0]
    713              i++;
   \   00000104   0x1C6D             ADDS     R5,R5,#+1
    714              
    715              data=(int)(decimal*1000);
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x447a0000
   \   0000010A   0x0039             MOVS     R1,R7
   \   0000010C   0x.... 0x....      BL       __aeabi_fmul
   \   00000110   0x.... 0x....      BL       __aeabi_f2iz
   \   00000114   0x4682             MOV      R10,R0
    716             
    717              temp[i]=48+data/100;
   \   00000116   0x2064             MOVS     R0,#+100
   \   00000118   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \   0000011C   0x3030             ADDS     R0,R0,#+48
   \   0000011E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000120   0xA900             ADD      R1,SP,#+0
   \   00000122   0x5468             STRB     R0,[R5, R1]
    718              
    719              data=data%100;
   \   00000124   0x2064             MOVS     R0,#+100
   \   00000126   0xFB9A 0xF1F0      SDIV     R1,R10,R0
   \   0000012A   0xFB00 0xAA11      MLS      R10,R0,R1,R10
    720              i++;
   \   0000012E   0x1C6D             ADDS     R5,R5,#+1
    721             
    722              if(data>0)
   \   00000130   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000134   0xDB0B             BLT.N    ??write_8_16_number_7
    723                {
    724                 temp[i]=48+data/10;
   \   00000136   0x200A             MOVS     R0,#+10
   \   00000138   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \   0000013C   0x3030             ADDS     R0,R0,#+48
   \   0000013E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000140   0xA900             ADD      R1,SP,#+0
   \   00000142   0x5468             STRB     R0,[R5, R1]
    725                 data=data%10;
   \   00000144   0x200A             MOVS     R0,#+10
   \   00000146   0xFB9A 0xF1F0      SDIV     R1,R10,R0
   \   0000014A   0xFB00 0xAA11      MLS      R10,R0,R1,R10
    726                 
    727                 
    728                }
    729              if(data>=0)
   \                     ??write_8_16_number_7:
   \   0000014E   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000152   0xD405             BMI.N    ??write_8_16_number_6
    730                {
    731                 i++;
   \   00000154   0x1C6D             ADDS     R5,R5,#+1
    732                 temp[i]=data+48; 
   \   00000156   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000158   0xA800             ADD      R0,SP,#+0
   \   0000015A   0xF11A 0x0130      ADDS     R1,R10,#+48
   \   0000015E   0x5429             STRB     R1,[R5, R0]
    733                }
    734              
    735             }     
    736          
    737            i++;
   \                     ??write_8_16_number_6:
   \   00000160   0x1C6D             ADDS     R5,R5,#+1
    738            temp[i]='\0';
   \   00000162   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000164   0xA800             ADD      R0,SP,#+0
   \   00000166   0x2100             MOVS     R1,#+0
   \   00000168   0x5429             STRB     R1,[R5, R0]
    739              write_8_16_string(x,y,point); 
   \   0000016A   0x0032             MOVS     R2,R6
   \   0000016C   0x0021             MOVS     R1,R4
   \   0000016E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000170   0x4640             MOV      R0,R8
   \   00000172   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000174   0x.... 0x....      BL       write_8_16_string
    740            
    741          }
   \   00000178   0xE8BD 0x87FF      POP      {R0-R10,PC}      ;; return
    742          
    743          //==============================================================
    744          //函数名： void Draw_BMP(byte x,byte y)
    745          //功能描述：显示BMP图片128×64
    746          //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
    747          //返回：无
    748          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    749          void Draw_BMP(byte x0,byte y0,byte x1,byte y1,byte bmp[])
    750          { 	
   \                     Draw_BMP:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8028      LDR      R8,[SP, #+40]
    751            word ii=0;
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
    752            byte x,y;
    753            
    754            if(y1%8==0) y=y1/8;      
   \   00000014   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   0x2008             MOVS     R0,#+8
   \   00000018   0xFB97 0xF1F0      SDIV     R1,R7,R0
   \   0000001C   0xFB01 0x7110      MLS      R1,R1,R0,R7
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD105             BNE.N    ??Draw_BMP_0
   \   00000024   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000026   0x2008             MOVS     R0,#+8
   \   00000028   0xFB97 0xF0F0      SDIV     R0,R7,R0
   \   0000002C   0x4683             MOV      R11,R0
   \   0000002E   0xE005             B.N      ??Draw_BMP_1
    755            else y=y1/8+1;
   \                     ??Draw_BMP_0:
   \   00000030   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000032   0x2008             MOVS     R0,#+8
   \   00000034   0xFB97 0xF0F0      SDIV     R0,R7,R0
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0x4683             MOV      R11,R0
    756          	for(y=y0;y<=y1;y++)
   \                     ??Draw_BMP_1:
   \   0000003C   0x46AB             MOV      R11,R5
   \                     ??Draw_BMP_2:
   \   0000003E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000040   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000044   0x455F             CMP      R7,R11
   \   00000046   0xD319             BCC.N    ??Draw_BMP_3
    757          	{
    758          		LCD_Set_Pos(x0,y);				
   \   00000048   0x4659             MOV      R1,R11
   \   0000004A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x.... 0x....      BL       LCD_Set_Pos
    759              for(x=x0;x<x1;x++)
   \   00000054   0x46A2             MOV      R10,R4
   \                     ??Draw_BMP_4:
   \   00000056   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000005A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005C   0x45B2             CMP      R10,R6
   \   0000005E   0xD20A             BCS.N    ??Draw_BMP_5
    760          	    {      
    761          	    	LCD_WrDat(bmp[ii++]);	    	
   \   00000060   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000064   0xF819 0x0008      LDRB     R0,[R9, R8]
   \   00000068   0x.... 0x....      BL       LCD_WrDat
   \   0000006C   0xF119 0x0901      ADDS     R9,R9,#+1
    762          	    }
   \   00000070   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000074   0xE7EF             B.N      ??Draw_BMP_4
    763          	}
   \                     ??Draw_BMP_5:
   \   00000076   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   0000007A   0xE7E0             B.N      ??Draw_BMP_2
    764          }
   \                     ??Draw_BMP_3:
   \   0000007C   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    765          /*****************************************************************************
    766           函 数 名  : MAIN_ConvertData
    767           功能描述  : 将数据转换为可以在OLED屏上显示的格式
    768           输入参数  : UCHAR8 *pInputImageData  
    769                       UCHAR8 *pOutputImageBuf  
    770           输出参数  : NONE
    771           返 回 值  : NONE
    772          *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    773          void MAIN_ConvertData(uint16 *pInputImageData, uint8 *pOutputImageBuf)
    774          {
   \                     MAIN_ConvertData:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0A1             SUB      SP,SP,#+132
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    775           //   uint8 ucTmpData;
    776              uint8 i, usRowIdx;
    777              uint8 temp[128]={0};
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x2180             MOVS     R1,#+128
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
    778          
    779          	//清空pOutputImageBuf指向的缓存， memset库函数在string.h中
    780              memset(pOutputImageBuf, 0x00, 128*60);
   \   00000010   0xF44F 0x52F0      MOV      R2,#+7680
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x.... 0x....      BL       memset
    781          
    782              for (i = 0; i < 128; i++)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x0006             MOVS     R6,R0
   \                     ??MAIN_ConvertData_0:
   \   00000020   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0x2E80             CMP      R6,#+128
   \   00000024   0xD21A             BCS.N    ??MAIN_ConvertData_1
    783              {
    784                   temp[i]=(uint8)(pInputImageData[i]*60/800);
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0xF834 0x0016      LDRH     R0,[R4, R6, LSL #+1]
   \   0000002C   0x213C             MOVS     R1,#+60
   \   0000002E   0x4348             MULS     R0,R1,R0
   \   00000030   0xF44F 0x7148      MOV      R1,#+800
   \   00000034   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000038   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003A   0xA900             ADD      R1,SP,#+0
   \   0000003C   0x5470             STRB     R0,[R6, R1]
    785                   
    786                 // ucTmpData = temp[i] < (60 - 1) ? temp[i] : (60 - 1);
    787                  
    788                   usRowIdx = (60 - 1) - temp[i];//ucTmpData;
   \   0000003E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000040   0xA800             ADD      R0,SP,#+0
   \   00000042   0x5C30             LDRB     R0,[R6, R0]
   \   00000044   0xF1D0 0x003B      RSBS     R0,R0,#+59
   \   00000048   0x0007             MOVS     R7,R0
    789          
    790                  (pOutputImageBuf + usRowIdx * 128)[i] = 1;
   \   0000004A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004E   0x2080             MOVS     R0,#+128
   \   00000050   0xFB00 0x5007      MLA      R0,R0,R7,R5
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x5431             STRB     R1,[R6, R0]
    791              }
   \   00000058   0x1C76             ADDS     R6,R6,#+1
   \   0000005A   0xE7E1             B.N      ??MAIN_ConvertData_0
    792          }
   \                     ??MAIN_ConvertData_1:
   \   0000005C   0xB021             ADD      SP,SP,#+132
   \   0000005E   0xBDF0             POP      {R4-R7,PC}       ;; return
    793          
    794          /*****************************************************************************
    795           函 数 名  : LED_PrintImage
    796           功能描述  : 将图像显示出来
    797           输入参数  : UCHAR8 *pucTable     二维图像数组的地址
    798                       USHORT16 usRowNum    二维图像的行数1~64
    799                       USHORT16 usColumnNum 二维图像的列数1~128
    800           输出参数  : none
    801           返 回 值  : none
    802          *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    803          void LED_PrintImage(uint8 *pucTable, uint16 usRowNum, uint16 usColumnNum)
    804          {
   \                     LED_PrintImage:
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x0015             MOVS     R5,R2
    805              uint8 ucData;
    806              uint16 i,j,k,m,n;
    807              uint16 usRowTmp;
    808          
    809              m = usRowNum >> 3;   //计算图片行数以8位为一组完整的组数
   \   0000000A   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x08C0             LSRS     R0,R0,#+3
   \   00000012   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    810              n = usRowNum % 8;    //计算分完组后剩下的行数
   \   00000016   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000001A   0x2108             MOVS     R1,#+8
   \   0000001C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000020   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000024   0x4692             MOV      R10,R2
    811              
    812              for(i = 0; i < m; i++) //完整组行扫描
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x0007             MOVS     R7,R0
   \                     ??LED_PrintImage_0:
   \   0000002A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000002E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000030   0x4287             CMP      R7,R0
   \   00000032   0xD233             BCS.N    ??LED_PrintImage_1
    813              {
    814                  LCD_Set_Pos(0,(uint8) i);
   \   00000034   0x0039             MOVS     R1,R7
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       LCD_Set_Pos
    815                  usRowTmp = i << 3;    //计算当前所在行的下标                  
   \   0000003E   0x00F8             LSLS     R0,R7,#+3
   \   00000040   0x4683             MOV      R11,R0
    816                  for(j = 0; j < usColumnNum; j++) //列扫描        
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x4680             MOV      R8,R0
   \                     ??LED_PrintImage_2:
   \   00000046   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000004A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   0x45A8             CMP      R8,R5
   \   0000004E   0xD223             BCS.N    ??LED_PrintImage_3
    817                  {
    818                      ucData = 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x0006             MOVS     R6,R0
    819                      for(k = 0; k < 8; k++) //在i组中对这8行扫描
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x4681             MOV      R9,R0
   \                     ??LED_PrintImage_4:
   \   00000058   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000005C   0xF1B9 0x0F08      CMP      R9,#+8
   \   00000060   0xD213             BCS.N    ??LED_PrintImage_5
    820                      {
    821                          ucData = ucData >> 1;
   \   00000062   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000064   0x0876             LSRS     R6,R6,#+1
    822                          if((pucTable + (usRowTmp + k) * usColumnNum)[j] == 1)
   \   00000066   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000006A   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000006E   0xFA19 0xF08B      UXTAH    R0,R9,R11
   \   00000072   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000074   0xFB05 0x4000      MLA      R0,R5,R0,R4
   \   00000078   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   0000007C   0x2801             CMP      R0,#+1
   \   0000007E   0xD101             BNE.N    ??LED_PrintImage_6
    823                          {
    824                              ucData = ucData | 0x80;
   \   00000080   0xF056 0x0680      ORRS     R6,R6,#0x80
    825                          }
    826                          
    827                      }
   \                     ??LED_PrintImage_6:
   \   00000084   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000088   0xE7E6             B.N      ??LED_PrintImage_4
    828                      LCD_WrDat(ucData);
   \                     ??LED_PrintImage_5:
   \   0000008A   0x0030             MOVS     R0,R6
   \   0000008C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008E   0x.... 0x....      BL       LCD_WrDat
    829                  }
   \   00000092   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000096   0xE7D6             B.N      ??LED_PrintImage_2
    830              }
   \                     ??LED_PrintImage_3:
   \   00000098   0x1C7F             ADDS     R7,R7,#+1
   \   0000009A   0xE7C6             B.N      ??LED_PrintImage_0
    831              
    832              LCD_Set_Pos(0,(uint8) i); //设置剩下的行显示的起始坐标
   \                     ??LED_PrintImage_1:
   \   0000009C   0x0039             MOVS     R1,R7
   \   0000009E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x.... 0x....      BL       LCD_Set_Pos
    833              usRowTmp = i << 3;       //计算当前所在行的下标                  
   \   000000A6   0x00F8             LSLS     R0,R7,#+3
   \   000000A8   0x4683             MOV      R11,R0
    834              for(j = 0; j < usColumnNum; j++) //列扫描        
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x4680             MOV      R8,R0
   \                     ??LED_PrintImage_7:
   \   000000AE   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000B2   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B4   0x45A8             CMP      R8,R5
   \   000000B6   0xD228             BCS.N    ??LED_PrintImage_8
    835              {
    836                  ucData = 0;
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x0006             MOVS     R6,R0
    837                  for(k = 0; k < n; k++) //对剩下的行扫描
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x4681             MOV      R9,R0
   \                     ??LED_PrintImage_9:
   \   000000C0   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000C4   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000C8   0x45D1             CMP      R9,R10
   \   000000CA   0xD213             BCS.N    ??LED_PrintImage_10
    838                  {
    839                      ucData = ucData >> 1;
   \   000000CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000CE   0x0876             LSRS     R6,R6,#+1
    840                      if((pucTable + (usRowTmp + k) * usColumnNum)[j] ==1)
   \   000000D0   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000D4   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000D8   0xFA19 0xF08B      UXTAH    R0,R9,R11
   \   000000DC   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000DE   0xFB05 0x4000      MLA      R0,R5,R0,R4
   \   000000E2   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   000000E6   0x2801             CMP      R0,#+1
   \   000000E8   0xD101             BNE.N    ??LED_PrintImage_11
    841                      {
    842                          ucData = ucData | 0x80;
   \   000000EA   0xF056 0x0680      ORRS     R6,R6,#0x80
    843                      }
    844                      
    845                  }
   \                     ??LED_PrintImage_11:
   \   000000EE   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000F2   0xE7E5             B.N      ??LED_PrintImage_9
    846                  ucData = ucData >> (8 - n);
   \                     ??LED_PrintImage_10:
   \   000000F4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000F6   0xF1DA 0x0008      RSBS     R0,R10,#+8
   \   000000FA   0x4106             ASRS     R6,R6,R0
    847                  LCD_WrDat(ucData);
   \   000000FC   0x0030             MOVS     R0,R6
   \   000000FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000100   0x.... 0x....      BL       LCD_WrDat
    848              }
   \   00000104   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000108   0xE7D1             B.N      ??LED_PrintImage_7
    849          
    850              return;
   \                     ??LED_PrintImage_8:
   \   0000010A   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    851          }
    852          
    853          
    854          ///////////////////////////////////////////////////////////////////////////////////
    855          /***********************************预显示**********************************/

   \                                 In section .text, align 2, keep-with-next
    856          void pre_show(void)
    857          {  
   \                     pre_show:
   \   00000000   0xB580             PUSH     {R7,LR}
    858             //int8 i;
    859             LCD_CLS();
   \   00000002   0x.... 0x....      BL       LCD_CLS
    860             switch(page_num)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD00A             BEQ.N    ??pre_show_0
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xF000 0x812A      BEQ.W    ??pre_show_1
   \   00000016   0xF0C0 0x80C1      BCC.W    ??pre_show_2
   \   0000001A   0x2804             CMP      R0,#+4
   \   0000001C   0xF000 0x81AF      BEQ.W    ??pre_show_3
   \   00000020   0xF0C0 0x8157      BCC.W    ??pre_show_4
   \   00000024   0xE1B7             B.N      ??pre_show_5
    861               {
    862               case 0: 
    863                      write_6_8_number(0,0,Pixel[15]); 
   \                     ??pre_show_0:
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   0000002A   0x8BC0             LDRH     R0,[R0, #+30]
   \   0000002C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000030   0x0002             MOVS     R2,R0
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       write_6_8_number
    864                      write_6_8_number(50,0,Pixel[64]); 
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   0000003E   0xF8B0 0x0080      LDRH     R0,[R0, #+128]
   \   00000042   0x.... 0x....      BL       __aeabi_ui2f
   \   00000046   0x0002             MOVS     R2,R0
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x2032             MOVS     R0,#+50
   \   0000004C   0x.... 0x....      BL       write_6_8_number
    865                      write_6_8_number(100,0,Pixel[105]); 
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   00000054   0xF8B0 0x00D2      LDRH     R0,[R0, #+210]
   \   00000058   0x.... 0x....      BL       __aeabi_ui2f
   \   0000005C   0x0002             MOVS     R2,R0
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x2064             MOVS     R0,#+100
   \   00000062   0x.... 0x....      BL       write_6_8_number
    866                  
    867                      
    868                      write_6_8_string(0,1,"V:");     
   \   00000066   0x....             ADR.N    R2,??DataTable9  ;; 0x56, 0x3A, 0x00, 0x00
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       write_6_8_string
    869                      write_6_8_number(20,1,V);
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000074   0x6802             LDR      R2,[R0, #+0]
   \   00000076   0x2101             MOVS     R1,#+1
   \   00000078   0x2014             MOVS     R0,#+20
   \   0000007A   0x.... 0x....      BL       write_6_8_number
    870                     
    871                      write_6_8_string(50,1,"W:");     //第二行，角速度
   \   0000007E   0x....             ADR.N    R2,??DataTable9_1  ;; 0x57, 0x3A, 0x00, 0x00
   \   00000080   0x2101             MOVS     R1,#+1
   \   00000082   0x2032             MOVS     R0,#+50
   \   00000084   0x.... 0x....      BL       write_6_8_string
    872                      write_6_8_number(70,1,w); 
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000008C   0x6802             LDR      R2,[R0, #+0]
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0x2046             MOVS     R0,#+70
   \   00000092   0x.... 0x....      BL       write_6_8_number
    873           
    874                     
    875                      write_6_8_string(0,2,"acce:");      //第三行，加速度计值
   \   00000096   0x.... 0x....      LDR.W    R2,??DataTable12_4
   \   0000009A   0x2102             MOVS     R1,#+2
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x.... 0x....      BL       write_6_8_string
    876                      write_6_8_number(50,2,acce);
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   000000A6   0x6802             LDR      R2,[R0, #+0]
   \   000000A8   0x2102             MOVS     R1,#+2
   \   000000AA   0x2032             MOVS     R0,#+50
   \   000000AC   0x.... 0x....      BL       write_6_8_number
    877            
    878                      write_6_8_string(0,3,"L_c:");
   \   000000B0   0x.... 0x....      LDR.W    R2,??DataTable12_6
   \   000000B4   0x2103             MOVS     R1,#+3
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x.... 0x....      BL       write_6_8_string
    879                      write_6_8_number(24,3,Left_cnt);   
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable12_7
   \   000000C0   0x7800             LDRB     R0,[R0, #+0]
   \   000000C2   0x.... 0x....      BL       __aeabi_ui2f
   \   000000C6   0x0002             MOVS     R2,R0
   \   000000C8   0x2103             MOVS     R1,#+3
   \   000000CA   0x2018             MOVS     R0,#+24
   \   000000CC   0x.... 0x....      BL       write_6_8_number
    880                      write_6_8_string(50,3,"R_c:");      
   \   000000D0   0x.... 0x....      LDR.W    R2,??DataTable12_8
   \   000000D4   0x2103             MOVS     R1,#+3
   \   000000D6   0x2032             MOVS     R0,#+50
   \   000000D8   0x.... 0x....      BL       write_6_8_string
    881                      write_6_8_number(74,3,Right_cnt);
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   000000E0   0x7800             LDRB     R0,[R0, #+0]
   \   000000E2   0x.... 0x....      BL       __aeabi_ui2f
   \   000000E6   0x0002             MOVS     R2,R0
   \   000000E8   0x2103             MOVS     R1,#+3
   \   000000EA   0x204A             MOVS     R0,#+74
   \   000000EC   0x.... 0x....      BL       write_6_8_number
    882                      
    883                      write_6_8_string(0,4,"p_d:");    //
   \   000000F0   0x.... 0x....      LDR.W    R2,??DataTable12_10
   \   000000F4   0x2104             MOVS     R1,#+4
   \   000000F6   0x2000             MOVS     R0,#+0
   \   000000F8   0x.... 0x....      BL       write_6_8_string
    884                      write_6_8_number(24,4,p_distance);
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   00000100   0x6802             LDR      R2,[R0, #+0]
   \   00000102   0x2104             MOVS     R1,#+4
   \   00000104   0x2018             MOVS     R0,#+24
   \   00000106   0x.... 0x....      BL       write_6_8_number
    885                  
    886                      write_6_8_string(50,4,"w_c:");    //
   \   0000010A   0x.... 0x....      LDR.W    R2,??DataTable12_12
   \   0000010E   0x2104             MOVS     R1,#+4
   \   00000110   0x2032             MOVS     R0,#+50
   \   00000112   0x.... 0x....      BL       write_6_8_string
    887                      write_6_8_number(74,4,white_center);
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable12_13
   \   0000011A   0x6802             LDR      R2,[R0, #+0]
   \   0000011C   0x2104             MOVS     R1,#+4
   \   0000011E   0x204A             MOVS     R0,#+74
   \   00000120   0x.... 0x....      BL       write_6_8_number
    888                  
    889                       
    890                      write_6_8_string(0,5,"Sp:");     
   \   00000124   0x....             ADR.N    R2,??DataTable9_2  ;; "Sp:"
   \   00000126   0x2105             MOVS     R1,#+5
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x.... 0x....      BL       write_6_8_string
    891                      write_6_8_number(50,5,Speed_set);
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable12_14
   \   00000132   0x7800             LDRB     R0,[R0, #+0]
   \   00000134   0x.... 0x....      BL       __aeabi_ui2f
   \   00000138   0x0002             MOVS     R2,R0
   \   0000013A   0x2105             MOVS     R1,#+5
   \   0000013C   0x2032             MOVS     R0,#+50
   \   0000013E   0x.... 0x....      BL       write_6_8_number
    892          
    893                  
    894                      write_6_8_number(0,6,g_nCarAngle); 
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable12_15
   \   00000146   0x6802             LDR      R2,[R0, #+0]
   \   00000148   0x2106             MOVS     R1,#+6
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0x.... 0x....      BL       write_6_8_number
    895                      write_6_8_number(50,6,acce_angle);
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable12_16
   \   00000154   0x6802             LDR      R2,[R0, #+0]
   \   00000156   0x2106             MOVS     R1,#+6
   \   00000158   0x2032             MOVS     R0,#+50
   \   0000015A   0x.... 0x....      BL       write_6_8_number
    896                  
    897                  
    898                  
    899                      write_6_8_number(0,7,white_latch);
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable12_17
   \   00000162   0x8800             LDRH     R0,[R0, #+0]
   \   00000164   0x.... 0x....      BL       __aeabi_ui2f
   \   00000168   0x0002             MOVS     R2,R0
   \   0000016A   0x2107             MOVS     R1,#+7
   \   0000016C   0x2000             MOVS     R0,#+0
   \   0000016E   0x.... 0x....      BL       write_6_8_number
    900                  
    901                      write_6_8_number(50,7,latch);
   \   00000172   0x.... 0x....      LDR.W    R0,??DataTable12_18
   \   00000176   0x8800             LDRH     R0,[R0, #+0]
   \   00000178   0x.... 0x....      BL       __aeabi_ui2f
   \   0000017C   0x0002             MOVS     R2,R0
   \   0000017E   0x2107             MOVS     R1,#+7
   \   00000180   0x2032             MOVS     R0,#+50
   \   00000182   0x.... 0x....      BL       write_6_8_number
    902                  
    903                      write_6_8_number(100,7,black_latch);
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable12_19
   \   0000018A   0x8800             LDRH     R0,[R0, #+0]
   \   0000018C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000190   0x0002             MOVS     R2,R0
   \   00000192   0x2107             MOVS     R1,#+7
   \   00000194   0x2064             MOVS     R0,#+100
   \   00000196   0x.... 0x....      BL       write_6_8_number
    904                  
    905                 
    906                      
    907                      break;
   \   0000019A   0xE0FC             B.N      ??pre_show_5
    908                       
    909                case 1:
    910                       
    911                       write_6_8_number(0,0,g_nLeftCount);
   \                     ??pre_show_2:
   \   0000019C   0x.... 0x....      LDR.W    R0,??DataTable12_20
   \   000001A0   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001A4   0x.... 0x....      BL       __aeabi_i2f
   \   000001A8   0x0002             MOVS     R2,R0
   \   000001AA   0x2100             MOVS     R1,#+0
   \   000001AC   0x2000             MOVS     R0,#+0
   \   000001AE   0x.... 0x....      BL       write_6_8_number
    912                       write_6_8_number(60,0,g_nRightCount);
   \   000001B2   0x.... 0x....      LDR.W    R0,??DataTable12_21
   \   000001B6   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001BA   0x.... 0x....      BL       __aeabi_i2f
   \   000001BE   0x0002             MOVS     R2,R0
   \   000001C0   0x2100             MOVS     R1,#+0
   \   000001C2   0x203C             MOVS     R0,#+60
   \   000001C4   0x.... 0x....      BL       write_6_8_number
    913                       
    914                       write_6_8_string(0,1,"Rsp:");     
   \   000001C8   0x.... 0x....      LDR.W    R2,??DataTable12_22
   \   000001CC   0x2101             MOVS     R1,#+1
   \   000001CE   0x2000             MOVS     R0,#+0
   \   000001D0   0x.... 0x....      BL       write_6_8_string
    915                       write_6_8_number(60,1,RealSpeed);
   \   000001D4   0x.... 0x....      LDR.W    R0,??DataTable12_23
   \   000001D8   0x6802             LDR      R2,[R0, #+0]
   \   000001DA   0x2101             MOVS     R1,#+1
   \   000001DC   0x203C             MOVS     R0,#+60
   \   000001DE   0x.... 0x....      BL       write_6_8_number
    916          
    917                       
    918                       write_6_8_string(0,2,"L_PWM:");    //
   \   000001E2   0x.... 0x....      LDR.W    R2,??DataTable12_24
   \   000001E6   0x2102             MOVS     R1,#+2
   \   000001E8   0x2000             MOVS     R0,#+0
   \   000001EA   0x.... 0x....      BL       write_6_8_string
    919                       write_6_8_number(60,2,LeftSpeedPwm);
   \   000001EE   0x.... 0x....      LDR.W    R0,??DataTable12_25
   \   000001F2   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001F6   0x.... 0x....      BL       __aeabi_i2f
   \   000001FA   0x0002             MOVS     R2,R0
   \   000001FC   0x2102             MOVS     R1,#+2
   \   000001FE   0x203C             MOVS     R0,#+60
   \   00000200   0x.... 0x....      BL       write_6_8_number
    920                       
    921                       write_6_8_string(0,3,"R_PWM:");    //
   \   00000204   0x.... 0x....      LDR.W    R2,??DataTable12_26
   \   00000208   0x2103             MOVS     R1,#+3
   \   0000020A   0x2000             MOVS     R0,#+0
   \   0000020C   0x.... 0x....      BL       write_6_8_string
    922                       write_6_8_number(60,3,RightSpeedPwm);
   \   00000210   0x.... 0x....      LDR.W    R0,??DataTable12_27
   \   00000214   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000218   0x.... 0x....      BL       __aeabi_i2f
   \   0000021C   0x0002             MOVS     R2,R0
   \   0000021E   0x2103             MOVS     R1,#+3
   \   00000220   0x203C             MOVS     R0,#+60
   \   00000222   0x.... 0x....      BL       write_6_8_number
    923                       
    924                       write_6_8_number(0,4,anglePD);
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable12_28
   \   0000022A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000022E   0x.... 0x....      BL       __aeabi_i2f
   \   00000232   0x0002             MOVS     R2,R0
   \   00000234   0x2104             MOVS     R1,#+4
   \   00000236   0x2000             MOVS     R0,#+0
   \   00000238   0x.... 0x....      BL       write_6_8_number
    925                       write_6_8_number(50,4,steerpwm);
   \   0000023C   0x.... 0x....      LDR.W    R0,??DataTable12_29
   \   00000240   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000244   0x.... 0x....      BL       __aeabi_i2f
   \   00000248   0x0002             MOVS     R2,R0
   \   0000024A   0x2104             MOVS     R1,#+4
   \   0000024C   0x2032             MOVS     R0,#+50
   \   0000024E   0x.... 0x....      BL       write_6_8_number
    926                       write_6_8_number(100,4,SpeedPID);
   \   00000252   0x.... 0x....      LDR.W    R0,??DataTable12_30
   \   00000256   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000025A   0x.... 0x....      BL       __aeabi_i2f
   \   0000025E   0x0002             MOVS     R2,R0
   \   00000260   0x2104             MOVS     R1,#+4
   \   00000262   0x2064             MOVS     R0,#+100
   \   00000264   0x.... 0x....      BL       write_6_8_number
    927                       
    928                       
    929                       break;
   \   00000268   0xE095             B.N      ??pre_show_5
    930                       
    931                       
    932                 
    933                case 2:write_6_8_char(0,line_num,'*');
   \                     ??pre_show_1:
   \   0000026A   0x222A             MOVS     R2,#+42
   \   0000026C   0x.... 0x....      LDR.W    R0,??DataTable12_31
   \   00000270   0x7801             LDRB     R1,[R0, #+0]
   \   00000272   0x2000             MOVS     R0,#+0
   \   00000274   0x.... 0x....      BL       write_6_8_char
    934                
    935                       write_6_8_string(6,0,"ACCE:");    //加速度计静态值
   \   00000278   0x.... 0x....      LDR.W    R2,??DataTable12_32
   \   0000027C   0x2100             MOVS     R1,#+0
   \   0000027E   0x2006             MOVS     R0,#+6
   \   00000280   0x.... 0x....      BL       write_6_8_string
    936                       write_6_8_number(60,0,ACCE_STATIC); 
   \   00000284   0x.... 0x....      LDR.W    R0,??DataTable12_33
   \   00000288   0x6802             LDR      R2,[R0, #+0]
   \   0000028A   0x2100             MOVS     R1,#+0
   \   0000028C   0x203C             MOVS     R0,#+60
   \   0000028E   0x.... 0x....      BL       write_6_8_number
    937                         
    938                       write_6_8_string(6,1,"Sp:");    //
   \   00000292   0x....             ADR.N    R2,??DataTable9_2  ;; "Sp:"
   \   00000294   0x2101             MOVS     R1,#+1
   \   00000296   0x2006             MOVS     R0,#+6
   \   00000298   0x.... 0x....      BL       write_6_8_string
    939                       write_6_8_number(60,1,Speed_set);
   \   0000029C   0x.... 0x....      LDR.W    R0,??DataTable12_14
   \   000002A0   0x7800             LDRB     R0,[R0, #+0]
   \   000002A2   0x.... 0x....      BL       __aeabi_ui2f
   \   000002A6   0x0002             MOVS     R2,R0
   \   000002A8   0x2101             MOVS     R1,#+1
   \   000002AA   0x203C             MOVS     R0,#+60
   \   000002AC   0x.... 0x....      BL       write_6_8_number
    940                         
    941                       write_6_8_string(6,2,"WHITE_C:");    //
   \   000002B0   0x.... 0x....      LDR.W    R2,??DataTable12_34
   \   000002B4   0x2102             MOVS     R1,#+2
   \   000002B6   0x2006             MOVS     R0,#+6
   \   000002B8   0x.... 0x....      BL       write_6_8_string
    942                       write_6_8_number(60,2,WHITE_CENTER);
   \   000002BC   0x.... 0x....      LDR.W    R0,??DataTable12_35
   \   000002C0   0x7800             LDRB     R0,[R0, #+0]
   \   000002C2   0x.... 0x....      BL       __aeabi_ui2f
   \   000002C6   0x0002             MOVS     R2,R0
   \   000002C8   0x2102             MOVS     R1,#+2
   \   000002CA   0x203C             MOVS     R0,#+60
   \   000002CC   0x.... 0x....      BL       write_6_8_number
    943                       
    944                     //  LCD_Set_Pos(0, 5) ;
    945                       //for(i=22;i<106;i++){
    946                         //if(CCD_value[i])  LCD_write_byte(0xfe,1);       
    947                         //else LCD_write_byte(0x80,1);      
    948                       //}
    949                       break;
   \   000002D0   0xE061             B.N      ??pre_show_5
    950                       
    951                       
    952                case 3:write_6_8_char(0,line_num,'*');
   \                     ??pre_show_4:
   \   000002D2   0x222A             MOVS     R2,#+42
   \   000002D4   0x.... 0x....      LDR.W    R0,??DataTable12_31
   \   000002D8   0x7801             LDRB     R1,[R0, #+0]
   \   000002DA   0x2000             MOVS     R0,#+0
   \   000002DC   0x.... 0x....      BL       write_6_8_char
    953                       
    954                       write_6_8_string(6,0,"ang_kp:");    //
   \   000002E0   0x.... 0x....      LDR.W    R2,??DataTable12_36
   \   000002E4   0x2100             MOVS     R1,#+0
   \   000002E6   0x2006             MOVS     R0,#+6
   \   000002E8   0x.... 0x....      BL       write_6_8_string
    955                       write_6_8_number(60,0,angle_kp); 
   \   000002EC   0x.... 0x....      LDR.W    R0,??DataTable12_37
   \   000002F0   0x6802             LDR      R2,[R0, #+0]
   \   000002F2   0x2100             MOVS     R1,#+0
   \   000002F4   0x203C             MOVS     R0,#+60
   \   000002F6   0x.... 0x....      BL       write_6_8_number
    956                       
    957                       write_6_8_string(6,1,"ang_kd:");    //
   \   000002FA   0x.... 0x....      LDR.W    R2,??DataTable12_38
   \   000002FE   0x2101             MOVS     R1,#+1
   \   00000300   0x2006             MOVS     R0,#+6
   \   00000302   0x.... 0x....      BL       write_6_8_string
    958                       write_6_8_number(60,1,angle_kd);
   \   00000306   0x.... 0x....      LDR.W    R0,??DataTable12_39
   \   0000030A   0x6802             LDR      R2,[R0, #+0]
   \   0000030C   0x2101             MOVS     R1,#+1
   \   0000030E   0x203C             MOVS     R0,#+60
   \   00000310   0x.... 0x....      BL       write_6_8_number
    959          
    960                       write_6_8_string(6,2,"sped_kp:");    //
   \   00000314   0x.... 0x....      LDR.W    R2,??DataTable12_40
   \   00000318   0x2102             MOVS     R1,#+2
   \   0000031A   0x2006             MOVS     R0,#+6
   \   0000031C   0x.... 0x....      BL       write_6_8_string
    961                       write_6_8_number(60,2,speed_kp); 
   \   00000320   0x.... 0x....      LDR.W    R0,??DataTable12_41
   \   00000324   0x6802             LDR      R2,[R0, #+0]
   \   00000326   0x2102             MOVS     R1,#+2
   \   00000328   0x203C             MOVS     R0,#+60
   \   0000032A   0x.... 0x....      BL       write_6_8_number
    962                       
    963                       write_6_8_string(6,3,"sped_ki:");    //
   \   0000032E   0x.... 0x....      LDR.W    R2,??DataTable12_42
   \   00000332   0x2103             MOVS     R1,#+3
   \   00000334   0x2006             MOVS     R0,#+6
   \   00000336   0x.... 0x....      BL       write_6_8_string
    964                       write_6_8_number(60,3,speed_ki); 
   \   0000033A   0x.... 0x....      LDR.W    R0,??DataTable12_43
   \   0000033E   0x6802             LDR      R2,[R0, #+0]
   \   00000340   0x2103             MOVS     R1,#+3
   \   00000342   0x203C             MOVS     R0,#+60
   \   00000344   0x.... 0x....      BL       write_6_8_number
    965                       
    966                       write_6_8_string(6,4,"ster_kp:");    //
   \   00000348   0x.... 0x....      LDR.W    R2,??DataTable12_44
   \   0000034C   0x2104             MOVS     R1,#+4
   \   0000034E   0x2006             MOVS     R0,#+6
   \   00000350   0x.... 0x....      BL       write_6_8_string
    967                       write_6_8_number(60,4,steer_kp);
   \   00000354   0x.... 0x....      LDR.W    R0,??DataTable12_45
   \   00000358   0x6802             LDR      R2,[R0, #+0]
   \   0000035A   0x2104             MOVS     R1,#+4
   \   0000035C   0x203C             MOVS     R0,#+60
   \   0000035E   0x.... 0x....      BL       write_6_8_number
    968                       
    969                       write_6_8_string(6,5,"ster_kd:");    //
   \   00000362   0x.... 0x....      LDR.W    R2,??DataTable12_46
   \   00000366   0x2105             MOVS     R1,#+5
   \   00000368   0x2006             MOVS     R0,#+6
   \   0000036A   0x.... 0x....      BL       write_6_8_string
    970                       write_6_8_number(60,5,steer_kd);  
   \   0000036E   0x.... 0x....      LDR.W    R0,??DataTable12_47
   \   00000372   0x6802             LDR      R2,[R0, #+0]
   \   00000374   0x2105             MOVS     R1,#+5
   \   00000376   0x203C             MOVS     R0,#+60
   \   00000378   0x.... 0x....      BL       write_6_8_number
    971                       
    972                       break;
   \   0000037C   0xE00B             B.N      ??pre_show_5
    973                       
    974               case 4:
    975                      MAIN_ConvertData(Pixel, *g_aucImageTable); //将数据转换为可以在OLED屏上显示的格式
   \                     ??pre_show_3:
   \   0000037E   0x.... 0x....      LDR.W    R1,??DataTable12_48
   \   00000382   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   00000386   0x.... 0x....      BL       MAIN_ConvertData
    976                  
    977                      LED_PrintImage(*g_aucImageTable, 60, 128); //在OLED上显示图像波形图
   \   0000038A   0x2280             MOVS     R2,#+128
   \   0000038C   0x213C             MOVS     R1,#+60
   \   0000038E   0x.... 0x....      LDR.W    R0,??DataTable12_48
   \   00000392   0x.... 0x....      BL       LED_PrintImage
    978                      break;
    979                       
    980               }
    981          
    982          }
   \                     ??pre_show_5:
   \   00000396   0xBD01             POP      {R0,PC}          ;; return
    983          
    984          /**************************************刷屏，显示时变变量*********************************/

   \                                 In section .text, align 2, keep-with-next
    985          void redraw()
    986          {
   \                     redraw:
   \   00000000   0xB580             PUSH     {R7,LR}
    987               
    988            //if(page_num==0&&redraw_control==0)     //第一页
    989            switch(page_num)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD006             BEQ.N    ??redraw_0
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xF000 0x80C9      BEQ.W    ??redraw_1
   \   00000012   0x2804             CMP      R0,#+4
   \   00000014   0xF000 0x812F      BEQ.W    ??redraw_2
   \   00000018   0xE139             B.N      ??redraw_3
    990            {
    991            case 0:
    992                  LCD_clear_L(0,0);
   \                     ??redraw_0:
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       LCD_clear_L
    993                  write_6_8_number(0,0,Pixel[10]); 
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   00000026   0x8A80             LDRH     R0,[R0, #+20]
   \   00000028   0x.... 0x....      BL       __aeabi_ui2f
   \   0000002C   0x0002             MOVS     R2,R0
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       write_6_8_number
    994                  write_6_8_number(50,0,Pixel[64]); 
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   0000003A   0xF8B0 0x0080      LDRH     R0,[R0, #+128]
   \   0000003E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000042   0x0002             MOVS     R2,R0
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x2032             MOVS     R0,#+50
   \   00000048   0x.... 0x....      BL       write_6_8_number
    995                  write_6_8_number(100,0,Pixel[115]);
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   00000050   0xF8B0 0x00E6      LDRH     R0,[R0, #+230]
   \   00000054   0x.... 0x....      BL       __aeabi_ui2f
   \   00000058   0x0002             MOVS     R2,R0
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x2064             MOVS     R0,#+100
   \   0000005E   0x.... 0x....      BL       write_6_8_number
    996                  
    997                  LCD_clear_L(70,1);
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x2046             MOVS     R0,#+70
   \   00000066   0x.... 0x....      BL       LCD_clear_L
    998                  
    999                  write_6_8_number(70,1,w); 
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000006E   0x6802             LDR      R2,[R0, #+0]
   \   00000070   0x2101             MOVS     R1,#+1
   \   00000072   0x2046             MOVS     R0,#+70
   \   00000074   0x.... 0x....      BL       write_6_8_number
   1000                     
   1001                  LCD_clear_L(50,2);
   \   00000078   0x2102             MOVS     R1,#+2
   \   0000007A   0x2032             MOVS     R0,#+50
   \   0000007C   0x.... 0x....      BL       LCD_clear_L
   1002                  write_6_8_number(50,2,acce);
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   00000084   0x6802             LDR      R2,[R0, #+0]
   \   00000086   0x2102             MOVS     R1,#+2
   \   00000088   0x2032             MOVS     R0,#+50
   \   0000008A   0x.... 0x....      BL       write_6_8_number
   1003                  
   1004                  LCD_clear_L(0,3);
   \   0000008E   0x2103             MOVS     R1,#+3
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x.... 0x....      BL       LCD_clear_L
   1005                  write_6_8_string(0,3,"L_c:");
   \   00000096   0x.... 0x....      LDR.W    R2,??DataTable12_6
   \   0000009A   0x2103             MOVS     R1,#+3
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x.... 0x....      BL       write_6_8_string
   1006                  write_6_8_number(24,3,Left_cnt);   
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable12_7
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x.... 0x....      BL       __aeabi_ui2f
   \   000000AC   0x0002             MOVS     R2,R0
   \   000000AE   0x2103             MOVS     R1,#+3
   \   000000B0   0x2018             MOVS     R0,#+24
   \   000000B2   0x.... 0x....      BL       write_6_8_number
   1007                  write_6_8_string(50,3,"R_c:");      
   \   000000B6   0x.... 0x....      LDR.W    R2,??DataTable12_8
   \   000000BA   0x2103             MOVS     R1,#+3
   \   000000BC   0x2032             MOVS     R0,#+50
   \   000000BE   0x.... 0x....      BL       write_6_8_string
   1008                  write_6_8_number(74,3,Right_cnt);
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   000000C6   0x7800             LDRB     R0,[R0, #+0]
   \   000000C8   0x.... 0x....      BL       __aeabi_ui2f
   \   000000CC   0x0002             MOVS     R2,R0
   \   000000CE   0x2103             MOVS     R1,#+3
   \   000000D0   0x204A             MOVS     R0,#+74
   \   000000D2   0x.... 0x....      BL       write_6_8_number
   1009                  
   1010                 
   1011                  
   1012                  LCD_clear_L(30,4);     
   \   000000D6   0x2104             MOVS     R1,#+4
   \   000000D8   0x201E             MOVS     R0,#+30
   \   000000DA   0x.... 0x....      BL       LCD_clear_L
   1013                  write_6_8_string(0,4,"p_d:");    //
   \   000000DE   0x.... 0x....      LDR.W    R2,??DataTable12_10
   \   000000E2   0x2104             MOVS     R1,#+4
   \   000000E4   0x2000             MOVS     R0,#+0
   \   000000E6   0x.... 0x....      BL       write_6_8_string
   1014                  write_6_8_number(30,4,p_distance);
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   000000EE   0x6802             LDR      R2,[R0, #+0]
   \   000000F0   0x2104             MOVS     R1,#+4
   \   000000F2   0x201E             MOVS     R0,#+30
   \   000000F4   0x.... 0x....      BL       write_6_8_number
   1015                  
   1016                  write_6_8_string(60,4,"w_c:");    //
   \   000000F8   0x.... 0x....      LDR.W    R2,??DataTable12_12
   \   000000FC   0x2104             MOVS     R1,#+4
   \   000000FE   0x203C             MOVS     R0,#+60
   \   00000100   0x.... 0x....      BL       write_6_8_string
   1017                  write_6_8_number(80,4,(uint16) white_center);
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable12_13
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000010E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000110   0x.... 0x....      BL       __aeabi_ui2f
   \   00000114   0x0002             MOVS     R2,R0
   \   00000116   0x2104             MOVS     R1,#+4
   \   00000118   0x2050             MOVS     R0,#+80
   \   0000011A   0x.... 0x....      BL       write_6_8_number
   1018                  
   1019                  
   1020                  LCD_clear_L(50,5);
   \   0000011E   0x2105             MOVS     R1,#+5
   \   00000120   0x2032             MOVS     R0,#+50
   \   00000122   0x.... 0x....      BL       LCD_clear_L
   1021          
   1022                 // write_6_8_string(0,5,"Sp:");     
   1023                  write_6_8_number(50,5,Speed_set);
   \   00000126   0x.... 0x....      LDR.W    R0,??DataTable12_14
   \   0000012A   0x7800             LDRB     R0,[R0, #+0]
   \   0000012C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000130   0x0002             MOVS     R2,R0
   \   00000132   0x2105             MOVS     R1,#+5
   \   00000134   0x2032             MOVS     R0,#+50
   \   00000136   0x.... 0x....      BL       write_6_8_number
   1024          
   1025                  
   1026                  LCD_clear_L(0,6);
   \   0000013A   0x2106             MOVS     R1,#+6
   \   0000013C   0x2000             MOVS     R0,#+0
   \   0000013E   0x.... 0x....      BL       LCD_clear_L
   1027                  write_6_8_number(0,6,g_nCarAngle); 
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable12_15
   \   00000146   0x6802             LDR      R2,[R0, #+0]
   \   00000148   0x2106             MOVS     R1,#+6
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0x.... 0x....      BL       write_6_8_number
   1028                  write_6_8_number(50,6,acce_angle);
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable12_16
   \   00000154   0x6802             LDR      R2,[R0, #+0]
   \   00000156   0x2106             MOVS     R1,#+6
   \   00000158   0x2032             MOVS     R0,#+50
   \   0000015A   0x.... 0x....      BL       write_6_8_number
   1029                  
   1030                  LCD_clear_L(0,7);
   \   0000015E   0x2107             MOVS     R1,#+7
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x.... 0x....      BL       LCD_clear_L
   1031                  write_6_8_number(0,7,white_latch);
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable12_17
   \   0000016A   0x8800             LDRH     R0,[R0, #+0]
   \   0000016C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000170   0x0002             MOVS     R2,R0
   \   00000172   0x2107             MOVS     R1,#+7
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x.... 0x....      BL       write_6_8_number
   1032                  
   1033                  write_6_8_number(50,7,latch);
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable12_18
   \   0000017E   0x8800             LDRH     R0,[R0, #+0]
   \   00000180   0x.... 0x....      BL       __aeabi_ui2f
   \   00000184   0x0002             MOVS     R2,R0
   \   00000186   0x2107             MOVS     R1,#+7
   \   00000188   0x2032             MOVS     R0,#+50
   \   0000018A   0x.... 0x....      BL       write_6_8_number
   1034                  
   1035                  write_6_8_number(100,7,black_latch);
   \   0000018E   0x.... 0x....      LDR.W    R0,??DataTable12_19
   \   00000192   0x8800             LDRH     R0,[R0, #+0]
   \   00000194   0x.... 0x....      BL       __aeabi_ui2f
   \   00000198   0x0002             MOVS     R2,R0
   \   0000019A   0x2107             MOVS     R1,#+7
   \   0000019C   0x2064             MOVS     R0,#+100
   \   0000019E   0x.... 0x....      BL       write_6_8_number
   1036                  
   1037                  break;
   \   000001A2   0xE074             B.N      ??redraw_3
   1038                  
   1039            case 1:     //第二页
   1040                  LCD_clear_L(0,0);
   \                     ??redraw_1:
   \   000001A4   0x2100             MOVS     R1,#+0
   \   000001A6   0x2000             MOVS     R0,#+0
   \   000001A8   0x.... 0x....      BL       LCD_clear_L
   1041                  write_6_8_number(0,0,g_nLeftCount);
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable12_20
   \   000001B0   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001B4   0x.... 0x....      BL       __aeabi_i2f
   \   000001B8   0x0002             MOVS     R2,R0
   \   000001BA   0x2100             MOVS     R1,#+0
   \   000001BC   0x2000             MOVS     R0,#+0
   \   000001BE   0x.... 0x....      BL       write_6_8_number
   1042                  write_6_8_number(60,0,g_nRightCount);
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable12_21
   \   000001C6   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001CA   0x.... 0x....      BL       __aeabi_i2f
   \   000001CE   0x0002             MOVS     R2,R0
   \   000001D0   0x2100             MOVS     R1,#+0
   \   000001D2   0x203C             MOVS     R0,#+60
   \   000001D4   0x.... 0x....      BL       write_6_8_number
   1043                  
   1044                  LCD_clear_L(60,1);     
   \   000001D8   0x2101             MOVS     R1,#+1
   \   000001DA   0x203C             MOVS     R0,#+60
   \   000001DC   0x.... 0x....      BL       LCD_clear_L
   1045                  write_6_8_number(60,1,RealSpeed);
   \   000001E0   0x.... 0x....      LDR.W    R0,??DataTable12_23
   \   000001E4   0x6802             LDR      R2,[R0, #+0]
   \   000001E6   0x2101             MOVS     R1,#+1
   \   000001E8   0x203C             MOVS     R0,#+60
   \   000001EA   0x.... 0x....      BL       write_6_8_number
   1046          
   1047                  
   1048                  LCD_clear_L(60,2);
   \   000001EE   0x2102             MOVS     R1,#+2
   \   000001F0   0x203C             MOVS     R0,#+60
   \   000001F2   0x.... 0x....      BL       LCD_clear_L
   1049                  write_6_8_number(60,2,LeftSpeedPwm);
   \   000001F6   0x.... 0x....      LDR.W    R0,??DataTable12_25
   \   000001FA   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001FE   0x.... 0x....      BL       __aeabi_i2f
   \   00000202   0x0002             MOVS     R2,R0
   \   00000204   0x2102             MOVS     R1,#+2
   \   00000206   0x203C             MOVS     R0,#+60
   \   00000208   0x.... 0x....      BL       write_6_8_number
   1050                  
   1051                  LCD_clear_L(60,3);
   \   0000020C   0x2103             MOVS     R1,#+3
   \   0000020E   0x203C             MOVS     R0,#+60
   \   00000210   0x.... 0x....      BL       LCD_clear_L
   1052                  write_6_8_number(60,3,RightSpeedPwm);
   \   00000214   0x.... 0x....      LDR.W    R0,??DataTable12_27
   \   00000218   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000021C   0x.... 0x....      BL       __aeabi_i2f
   \   00000220   0x0002             MOVS     R2,R0
   \   00000222   0x2103             MOVS     R1,#+3
   \   00000224   0x203C             MOVS     R0,#+60
   \   00000226   0x.... 0x....      BL       write_6_8_number
   1053                  
   1054                  LCD_clear_L(60,4);        
   \   0000022A   0x2104             MOVS     R1,#+4
   \   0000022C   0x203C             MOVS     R0,#+60
   \   0000022E   0x.... 0x....      BL       LCD_clear_L
   1055                  write_6_8_number(0,4,anglePD);
   \   00000232   0x.... 0x....      LDR.W    R0,??DataTable12_28
   \   00000236   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000023A   0x.... 0x....      BL       __aeabi_i2f
   \   0000023E   0x0002             MOVS     R2,R0
   \   00000240   0x2104             MOVS     R1,#+4
   \   00000242   0x2000             MOVS     R0,#+0
   \   00000244   0x.... 0x....      BL       write_6_8_number
   1056                  write_6_8_number(50,4,steerpwm);
   \   00000248   0x.... 0x....      LDR.W    R0,??DataTable12_29
   \   0000024C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000250   0x.... 0x....      BL       __aeabi_i2f
   \   00000254   0x0002             MOVS     R2,R0
   \   00000256   0x2104             MOVS     R1,#+4
   \   00000258   0x2032             MOVS     R0,#+50
   \   0000025A   0x.... 0x....      BL       write_6_8_number
   1057                  write_6_8_number(100,4,SpeedPID);
   \   0000025E   0x.... 0x....      LDR.W    R0,??DataTable12_30
   \   00000262   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000266   0x.... 0x....      BL       __aeabi_i2f
   \   0000026A   0x0002             MOVS     R2,R0
   \   0000026C   0x2104             MOVS     R1,#+4
   \   0000026E   0x2064             MOVS     R0,#+100
   \   00000270   0x.... 0x....      BL       write_6_8_number
   1058                  
   1059                  
   1060                  break;
   \   00000274   0xE00B             B.N      ??redraw_3
   1061               
   1062            case 4:
   1063                  MAIN_ConvertData(Pixel, *g_aucImageTable); //将数据转换为可以在OLED屏上显示的格式
   \                     ??redraw_2:
   \   00000276   0x.... 0x....      LDR.W    R1,??DataTable12_48
   \   0000027A   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   0000027E   0x.... 0x....      BL       MAIN_ConvertData
   1064                  
   1065                  LED_PrintImage(*g_aucImageTable, 60, 128); //在OLED上显示图像波形图
   \   00000282   0x2280             MOVS     R2,#+128
   \   00000284   0x213C             MOVS     R1,#+60
   \   00000286   0x.... 0x....      LDR.W    R0,??DataTable12_48
   \   0000028A   0x.... 0x....      BL       LED_PrintImage
   1066                  break;
   1067            } 
   1068          }
   \                     ??redraw_3:
   \   0000028E   0xBD01             POP      {R0,PC}          ;; return
   1069          
   1070          
   1071          
   1072          /*********************************修改变量数值***********************************/

   \                                 In section .text, align 2, keep-with-next
   1073          void change_value(unsigned char page,unsigned char m,float i)
   1074          {  
   \                     change_value:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0016             MOVS     R6,R2
   1075            switch (page)
   \   0000000A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000000E   0x4640             MOV      R0,R8
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD002             BEQ.N    ??change_value_0
   \   00000014   0x2803             CMP      R0,#+3
   \   00000016   0xD063             BEQ.N    ??change_value_1
   \   00000018   0xE141             B.N      ??change_value_2
   1076            {  
   1077            case 2:
   1078               switch(m)
   \                     ??change_value_0:
   \   0000001A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001C   0x2F00             CMP      R7,#+0
   \   0000001E   0xD003             BEQ.N    ??change_value_3
   \   00000020   0x2F02             CMP      R7,#+2
   \   00000022   0xD03C             BEQ.N    ??change_value_4
   \   00000024   0xD31A             BCC.N    ??change_value_5
   \   00000026   0xE05A             B.N      ??change_value_6
   1079                  {         
   1080                       
   1081                   case 0:ACCE_STATIC+=i;       
   \                     ??change_value_3:
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable12_33
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x0031             MOVS     R1,R6
   \   00000030   0x.... 0x....      BL       __aeabi_fadd
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable12_33
   \   00000038   0x6008             STR      R0,[R1, #+0]
   1082                          LCD_clear_L(60,0);
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x203C             MOVS     R0,#+60
   \   0000003E   0x.... 0x....      BL       LCD_clear_L
   1083                          write_6_8_char(0,0,'*');
   \   00000042   0x222A             MOVS     R2,#+42
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      BL       write_6_8_char
   1084                          write_6_8_number(60,0,ACCE_STATIC);  
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable12_33
   \   00000050   0x6802             LDR      R2,[R0, #+0]
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x203C             MOVS     R0,#+60
   \   00000056   0x.... 0x....      BL       write_6_8_number
   1085                          break;
   \   0000005A   0xE040             B.N      ??change_value_6
   1086                   case 1:Speed_set+=i;
   \                     ??change_value_5:
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable12_14
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x.... 0x....      BL       __aeabi_ui2f
   \   00000066   0x0031             MOVS     R1,R6
   \   00000068   0x.... 0x....      BL       __aeabi_fadd
   \   0000006C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable12_14
   \   00000074   0x7008             STRB     R0,[R1, #+0]
   1087                          LCD_clear_L(60,1);
   \   00000076   0x2101             MOVS     R1,#+1
   \   00000078   0x203C             MOVS     R0,#+60
   \   0000007A   0x.... 0x....      BL       LCD_clear_L
   1088                          write_6_8_char(0,1,'*');
   \   0000007E   0x222A             MOVS     R2,#+42
   \   00000080   0x2101             MOVS     R1,#+1
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x.... 0x....      BL       write_6_8_char
   1089                          write_6_8_number(60,1,Speed_set);
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable12_14
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000092   0x0002             MOVS     R2,R0
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x203C             MOVS     R0,#+60
   \   00000098   0x.... 0x....      BL       write_6_8_number
   1090                          break;
   \   0000009C   0xE01F             B.N      ??change_value_6
   1091                    case 2:WHITE_CENTER+=i;
   \                     ??change_value_4:
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable12_35
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0x.... 0x....      BL       __aeabi_ui2f
   \   000000A8   0x0031             MOVS     R1,R6
   \   000000AA   0x.... 0x....      BL       __aeabi_fadd
   \   000000AE   0x.... 0x....      BL       __aeabi_f2iz
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable12_35
   \   000000B6   0x7008             STRB     R0,[R1, #+0]
   1092                          LCD_clear_L(60,2);
   \   000000B8   0x2102             MOVS     R1,#+2
   \   000000BA   0x203C             MOVS     R0,#+60
   \   000000BC   0x.... 0x....      BL       LCD_clear_L
   1093                          write_6_8_char(0,2,'*');
   \   000000C0   0x222A             MOVS     R2,#+42
   \   000000C2   0x2102             MOVS     R1,#+2
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x.... 0x....      BL       write_6_8_char
   1094                          write_6_8_number(60,2,WHITE_CENTER);
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable12_35
   \   000000CE   0x7800             LDRB     R0,[R0, #+0]
   \   000000D0   0x.... 0x....      BL       __aeabi_ui2f
   \   000000D4   0x0002             MOVS     R2,R0
   \   000000D6   0x2102             MOVS     R1,#+2
   \   000000D8   0x203C             MOVS     R0,#+60
   \   000000DA   0x.... 0x....      BL       write_6_8_number
   1095                          break;
   1096                   /*
   1097                  case 3:pixel_max+=i;
   1098                          LCD_clear_L(9,3);
   1099                          write_6_8_char(0,3,'*');
   1100                          write_6_8_number(11,3,pixel_max);
   1101                          break;
   1102                          
   1103                   case 4:angle_kp+=i;
   1104                          LCD_clear_L(8,4);
   1105                          write_6_8_char(0,4,'*');
   1106                          write_6_8_number(8,4,angle_kp);
   1107                          break;   
   1108                   case 5:angle_kd+=0.1*i;
   1109                          LCD_clear_L(8,5);
   1110                          write_6_8_char(0,5,'*');
   1111                          write_6_8_number(8,5,angle_kd);
   1112                          break;
   1113                     */
   1114          	      }
   1115               break;
   \                     ??change_value_6:
   \   000000DE   0xE0DE             B.N      ??change_value_2
   1116            case 3:
   1117               switch(m)
   \                     ??change_value_1:
   \   000000E0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000E2   0x2F00             CMP      R7,#+0
   \   000000E4   0xD00A             BEQ.N    ??change_value_7
   \   000000E6   0x2F02             CMP      R7,#+2
   \   000000E8   0xD04E             BEQ.N    ??change_value_8
   \   000000EA   0xD321             BCC.N    ??change_value_9
   \   000000EC   0x2F04             CMP      R7,#+4
   \   000000EE   0xF000 0x8089      BEQ.W    ??change_value_10
   \   000000F2   0xD360             BCC.N    ??change_value_11
   \   000000F4   0x2F05             CMP      R7,#+5
   \   000000F6   0xF000 0x80AC      BEQ.W    ??change_value_12
   \   000000FA   0xE0D0             B.N      ??change_value_13
   1118                  {
   1119                    
   1120                   case 0:angle_kp+=i;       
   \                     ??change_value_7:
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable12_37
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0x0031             MOVS     R1,R6
   \   00000104   0x.... 0x....      BL       __aeabi_fadd
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable12_37
   \   0000010C   0x6008             STR      R0,[R1, #+0]
   1121                          LCD_clear_L(60,0);
   \   0000010E   0x2100             MOVS     R1,#+0
   \   00000110   0x203C             MOVS     R0,#+60
   \   00000112   0x.... 0x....      BL       LCD_clear_L
   1122                          write_6_8_char(0,0,'*');
   \   00000116   0x222A             MOVS     R2,#+42
   \   00000118   0x2100             MOVS     R1,#+0
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0x.... 0x....      BL       write_6_8_char
   1123                          write_6_8_number(60,0,angle_kp); 
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable12_37
   \   00000124   0x6802             LDR      R2,[R0, #+0]
   \   00000126   0x2100             MOVS     R1,#+0
   \   00000128   0x203C             MOVS     R0,#+60
   \   0000012A   0x.... 0x....      BL       write_6_8_number
   1124                          break;
   \   0000012E   0xE0B6             B.N      ??change_value_13
   1125                   case 1:angle_kd+=0.1*i;
   \                     ??change_value_9:
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable12_39
   \   00000134   0x6800             LDR      R0,[R0, #+0]
   \   00000136   0x.... 0x....      BL       __aeabi_f2d
   \   0000013A   0x0004             MOVS     R4,R0
   \   0000013C   0x000D             MOVS     R5,R1
   \   0000013E   0x0030             MOVS     R0,R6
   \   00000140   0x.... 0x....      BL       __aeabi_f2d
   \   00000144   0x0002             MOVS     R2,R0
   \   00000146   0x000B             MOVS     R3,R1
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable12_49  ;; 0x9999999a
   \   0000014C   0x.... 0x....      LDR.W    R1,??DataTable12_50  ;; 0x3fb99999
   \   00000150   0x.... 0x....      BL       __aeabi_dmul
   \   00000154   0x0022             MOVS     R2,R4
   \   00000156   0x002B             MOVS     R3,R5
   \   00000158   0x.... 0x....      BL       __aeabi_dadd
   \   0000015C   0x.... 0x....      BL       __aeabi_d2f
   \   00000160   0x.... 0x....      LDR.W    R1,??DataTable12_39
   \   00000164   0x6008             STR      R0,[R1, #+0]
   1126                          LCD_clear_L(60,1);
   \   00000166   0x2101             MOVS     R1,#+1
   \   00000168   0x203C             MOVS     R0,#+60
   \   0000016A   0x.... 0x....      BL       LCD_clear_L
   1127                          write_6_8_char(0,1,'*');
   \   0000016E   0x222A             MOVS     R2,#+42
   \   00000170   0x2101             MOVS     R1,#+1
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0x.... 0x....      BL       write_6_8_char
   1128                          write_6_8_number(60,1,angle_kd); 
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable12_39
   \   0000017C   0x6802             LDR      R2,[R0, #+0]
   \   0000017E   0x2101             MOVS     R1,#+1
   \   00000180   0x203C             MOVS     R0,#+60
   \   00000182   0x.... 0x....      BL       write_6_8_number
   1129                          break;
   \   00000186   0xE08A             B.N      ??change_value_13
   1130                          
   1131                   case 2:speed_kp+=i;
   \                     ??change_value_8:
   \   00000188   0x....             LDR.N    R0,??DataTable12_41
   \   0000018A   0x6800             LDR      R0,[R0, #+0]
   \   0000018C   0x0031             MOVS     R1,R6
   \   0000018E   0x.... 0x....      BL       __aeabi_fadd
   \   00000192   0x....             LDR.N    R1,??DataTable12_41
   \   00000194   0x6008             STR      R0,[R1, #+0]
   1132                          LCD_clear_L(60,2);
   \   00000196   0x2102             MOVS     R1,#+2
   \   00000198   0x203C             MOVS     R0,#+60
   \   0000019A   0x.... 0x....      BL       LCD_clear_L
   1133                          write_6_8_char(0,2,'*');
   \   0000019E   0x222A             MOVS     R2,#+42
   \   000001A0   0x2102             MOVS     R1,#+2
   \   000001A2   0x2000             MOVS     R0,#+0
   \   000001A4   0x.... 0x....      BL       write_6_8_char
   1134                          write_6_8_number(60,2,speed_kp); 
   \   000001A8   0x....             LDR.N    R0,??DataTable12_41
   \   000001AA   0x6802             LDR      R2,[R0, #+0]
   \   000001AC   0x2102             MOVS     R1,#+2
   \   000001AE   0x203C             MOVS     R0,#+60
   \   000001B0   0x.... 0x....      BL       write_6_8_number
   1135                          break;
   \   000001B4   0xE073             B.N      ??change_value_13
   1136                          
   1137                   case 3:speed_ki+=0.01*i;
   \                     ??change_value_11:
   \   000001B6   0x....             LDR.N    R0,??DataTable12_43
   \   000001B8   0x6800             LDR      R0,[R0, #+0]
   \   000001BA   0x.... 0x....      BL       __aeabi_f2d
   \   000001BE   0x0004             MOVS     R4,R0
   \   000001C0   0x000D             MOVS     R5,R1
   \   000001C2   0x0030             MOVS     R0,R6
   \   000001C4   0x.... 0x....      BL       __aeabi_f2d
   \   000001C8   0x0002             MOVS     R2,R0
   \   000001CA   0x000B             MOVS     R3,R1
   \   000001CC   0x....             LDR.N    R0,??DataTable12_51  ;; 0x47ae147b
   \   000001CE   0x....             LDR.N    R1,??DataTable12_52  ;; 0x3f847ae1
   \   000001D0   0x.... 0x....      BL       __aeabi_dmul
   \   000001D4   0x0022             MOVS     R2,R4
   \   000001D6   0x002B             MOVS     R3,R5
   \   000001D8   0x.... 0x....      BL       __aeabi_dadd
   \   000001DC   0x.... 0x....      BL       __aeabi_d2f
   \   000001E0   0x....             LDR.N    R1,??DataTable12_43
   \   000001E2   0x6008             STR      R0,[R1, #+0]
   1138                          LCD_clear_L(60,3);
   \   000001E4   0x2103             MOVS     R1,#+3
   \   000001E6   0x203C             MOVS     R0,#+60
   \   000001E8   0x.... 0x....      BL       LCD_clear_L
   1139                          write_6_8_char(0,3,'*');
   \   000001EC   0x222A             MOVS     R2,#+42
   \   000001EE   0x2103             MOVS     R1,#+3
   \   000001F0   0x2000             MOVS     R0,#+0
   \   000001F2   0x.... 0x....      BL       write_6_8_char
   1140                          write_6_8_number(60,3,speed_ki); 
   \   000001F6   0x....             LDR.N    R0,??DataTable12_43
   \   000001F8   0x6802             LDR      R2,[R0, #+0]
   \   000001FA   0x2103             MOVS     R1,#+3
   \   000001FC   0x203C             MOVS     R0,#+60
   \   000001FE   0x.... 0x....      BL       write_6_8_number
   1141                          break; 
   \   00000202   0xE04C             B.N      ??change_value_13
   1142                          
   1143                   case 4:steer_kp+=0.1*i;
   \                     ??change_value_10:
   \   00000204   0x....             LDR.N    R0,??DataTable12_45
   \   00000206   0x6800             LDR      R0,[R0, #+0]
   \   00000208   0x.... 0x....      BL       __aeabi_f2d
   \   0000020C   0x0004             MOVS     R4,R0
   \   0000020E   0x000D             MOVS     R5,R1
   \   00000210   0x0030             MOVS     R0,R6
   \   00000212   0x.... 0x....      BL       __aeabi_f2d
   \   00000216   0x0002             MOVS     R2,R0
   \   00000218   0x000B             MOVS     R3,R1
   \   0000021A   0x....             LDR.N    R0,??DataTable12_49  ;; 0x9999999a
   \   0000021C   0x....             LDR.N    R1,??DataTable12_50  ;; 0x3fb99999
   \   0000021E   0x.... 0x....      BL       __aeabi_dmul
   \   00000222   0x0022             MOVS     R2,R4
   \   00000224   0x002B             MOVS     R3,R5
   \   00000226   0x.... 0x....      BL       __aeabi_dadd
   \   0000022A   0x.... 0x....      BL       __aeabi_d2f
   \   0000022E   0x....             LDR.N    R1,??DataTable12_45
   \   00000230   0x6008             STR      R0,[R1, #+0]
   1144                          LCD_clear_L(60,4);
   \   00000232   0x2104             MOVS     R1,#+4
   \   00000234   0x203C             MOVS     R0,#+60
   \   00000236   0x.... 0x....      BL       LCD_clear_L
   1145                          write_6_8_char(0,4,'*');
   \   0000023A   0x222A             MOVS     R2,#+42
   \   0000023C   0x2104             MOVS     R1,#+4
   \   0000023E   0x2000             MOVS     R0,#+0
   \   00000240   0x.... 0x....      BL       write_6_8_char
   1146                          write_6_8_number(60,4,steer_kp); 
   \   00000244   0x....             LDR.N    R0,??DataTable12_45
   \   00000246   0x6802             LDR      R2,[R0, #+0]
   \   00000248   0x2104             MOVS     R1,#+4
   \   0000024A   0x203C             MOVS     R0,#+60
   \   0000024C   0x.... 0x....      BL       write_6_8_number
   1147                          break;
   \   00000250   0xE025             B.N      ??change_value_13
   1148                          
   1149                   case 5:steer_kd+=0.1*i;
   \                     ??change_value_12:
   \   00000252   0x....             LDR.N    R0,??DataTable12_47
   \   00000254   0x6800             LDR      R0,[R0, #+0]
   \   00000256   0x.... 0x....      BL       __aeabi_f2d
   \   0000025A   0x0004             MOVS     R4,R0
   \   0000025C   0x000D             MOVS     R5,R1
   \   0000025E   0x0030             MOVS     R0,R6
   \   00000260   0x.... 0x....      BL       __aeabi_f2d
   \   00000264   0x0002             MOVS     R2,R0
   \   00000266   0x000B             MOVS     R3,R1
   \   00000268   0x....             LDR.N    R0,??DataTable12_49  ;; 0x9999999a
   \   0000026A   0x....             LDR.N    R1,??DataTable12_50  ;; 0x3fb99999
   \   0000026C   0x.... 0x....      BL       __aeabi_dmul
   \   00000270   0x0022             MOVS     R2,R4
   \   00000272   0x002B             MOVS     R3,R5
   \   00000274   0x.... 0x....      BL       __aeabi_dadd
   \   00000278   0x.... 0x....      BL       __aeabi_d2f
   \   0000027C   0x....             LDR.N    R1,??DataTable12_47
   \   0000027E   0x6008             STR      R0,[R1, #+0]
   1150                          LCD_clear_L(60,5);
   \   00000280   0x2105             MOVS     R1,#+5
   \   00000282   0x203C             MOVS     R0,#+60
   \   00000284   0x.... 0x....      BL       LCD_clear_L
   1151                          write_6_8_char(0,5,'*');
   \   00000288   0x222A             MOVS     R2,#+42
   \   0000028A   0x2105             MOVS     R1,#+5
   \   0000028C   0x2000             MOVS     R0,#+0
   \   0000028E   0x.... 0x....      BL       write_6_8_char
   1152                          write_6_8_number(60,5,steer_kd); 
   \   00000292   0x....             LDR.N    R0,??DataTable12_47
   \   00000294   0x6802             LDR      R2,[R0, #+0]
   \   00000296   0x2105             MOVS     R1,#+5
   \   00000298   0x203C             MOVS     R0,#+60
   \   0000029A   0x.... 0x....      BL       write_6_8_number
   1153                          break; 
   1154                  }
   1155             break;
   1156            }
   1157          }	 		    
   \                     ??change_value_13:
   \                     ??change_value_2:
   \   0000029E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1158            
   1159          /****************************************************
   1160                               按键扫描函数
   1161          *****************************************************/
   1162          

   \                                 In section .text, align 2, keep-with-next
   1163          void KeyScan(void)
   1164          {                  
   \                     KeyScan:
   \   00000000   0xB580             PUSH     {R7,LR}
   1165           //if(scan_control==0)        //循环扫描
   1166            //{
   1167            
   1168            /////////////////////////////////////////////////////切屏
   1169            if(!change_page)  //如果检测到低电平，说明按键按下
   \   00000002   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x04C0             LSLS     R0,R0,#+19
   \   00000008   0xD41C             BMI.N    ??KeyScan_0
   1170              {
   1171                LCD_DLY_ms(10); //延时去抖，一般10-20ms
   \   0000000A   0x200A             MOVS     R0,#+10
   \   0000000C   0x.... 0x....      BL       LCD_DLY_ms
   1172                if(!change_page)     //再次确认按键是否按下，没有按下则退出
   \   00000010   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x04C0             LSLS     R0,R0,#+19
   \   00000016   0xD415             BMI.N    ??KeyScan_0
   1173          	     {
   1174                 while(!change_page);//如果确认按下按键等待按键释放，没有释放则一直等待
   \                     ??KeyScan_1:
   \   00000018   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x04C0             LSLS     R0,R0,#+19
   \   0000001E   0xD5FB             BPL.N    ??KeyScan_1
   1175          	           
   1176          		   if(page_num<4)    //页序号加操作
   \   00000020   0x....             LDR.N    R0,??DataTable12
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x2804             CMP      R0,#+4
   \   00000026   0xD205             BCS.N    ??KeyScan_2
   1177          	         page_num++;
   \   00000028   0x....             LDR.N    R0,??DataTable12
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x....             LDR.N    R1,??DataTable12
   \   00000030   0x7008             STRB     R0,[R1, #+0]
   \   00000032   0xE002             B.N      ??KeyScan_3
   1178          		   else
   1179          		       page_num=0;
   \                     ??KeyScan_2:
   \   00000034   0x....             LDR.N    R0,??DataTable12
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x7001             STRB     R1,[R0, #+0]
   1180          		   
   1181          		   line_num=0;
   \                     ??KeyScan_3:
   \   0000003A   0x....             LDR.N    R0,??DataTable12_31
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x7001             STRB     R1,[R0, #+0]
   1182          		   pre_show();
   \   00000040   0x.... 0x....      BL       pre_show
   1183          
   1184          	     }  
   1185               }
   1186              
   1187          
   1188           if(page_num==2||page_num==3)     //如不为第一页，则进行下一步扫描
   \                     ??KeyScan_0:
   \   00000044   0x....             LDR.N    R0,??DataTable12
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x2802             CMP      R0,#+2
   \   0000004A   0xD004             BEQ.N    ??KeyScan_4
   \   0000004C   0x....             LDR.N    R0,??DataTable12
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x2803             CMP      R0,#+3
   \   00000052   0xF040 0x8089      BNE.W    ??KeyScan_5
   1189           {
   1190            /////////////////////////////////////////////////////切行
   1191            if(!change_line)  //如果检测到低电平，说明按键按下
   \                     ??KeyScan_4:
   \   00000056   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0400             LSLS     R0,R0,#+16
   \   0000005C   0xD42B             BMI.N    ??KeyScan_6
   1192              {
   1193                LCD_DLY_ms(10); //延时去抖，一般10-20ms
   \   0000005E   0x200A             MOVS     R0,#+10
   \   00000060   0x.... 0x....      BL       LCD_DLY_ms
   1194               if(!change_line)     //再次确认按键是否按下，没有按下则退出
   \   00000064   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x0400             LSLS     R0,R0,#+16
   \   0000006A   0xD424             BMI.N    ??KeyScan_6
   1195          	     {
   1196                 while(!change_line);//如果确认按下按键等待按键释放，没有释放则一直等待
   \                     ??KeyScan_7:
   \   0000006C   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x0400             LSLS     R0,R0,#+16
   \   00000072   0xD5FB             BPL.N    ??KeyScan_7
   1197          	     
   1198          	     if(page_num!=0)
   \   00000074   0x....             LDR.N    R0,??DataTable12
   \   00000076   0x7800             LDRB     R0,[R0, #+0]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD005             BEQ.N    ??KeyScan_8
   1199          	        write_6_8_char(0,line_num,' ');
   \   0000007C   0x2220             MOVS     R2,#+32
   \   0000007E   0x....             LDR.N    R0,??DataTable12_31
   \   00000080   0x7801             LDRB     R1,[R0, #+0]
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x.... 0x....      BL       write_6_8_char
   1200          	           
   1201          		   if(line_num<6)    //行序号加操作
   \                     ??KeyScan_8:
   \   00000088   0x....             LDR.N    R0,??DataTable12_31
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x2806             CMP      R0,#+6
   \   0000008E   0xD205             BCS.N    ??KeyScan_9
   1202          	         line_num++;
   \   00000090   0x....             LDR.N    R0,??DataTable12_31
   \   00000092   0x7800             LDRB     R0,[R0, #+0]
   \   00000094   0x1C40             ADDS     R0,R0,#+1
   \   00000096   0x....             LDR.N    R1,??DataTable12_31
   \   00000098   0x7008             STRB     R0,[R1, #+0]
   \   0000009A   0xE002             B.N      ??KeyScan_10
   1203          		   else
   1204          		       line_num=0;
   \                     ??KeyScan_9:
   \   0000009C   0x....             LDR.N    R0,??DataTable12_31
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x7001             STRB     R1,[R0, #+0]
   1205          		   
   1206          		   if(page_num!=0)
   \                     ??KeyScan_10:
   \   000000A2   0x....             LDR.N    R0,??DataTable12
   \   000000A4   0x7800             LDRB     R0,[R0, #+0]
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD005             BEQ.N    ??KeyScan_6
   1207          	        write_6_8_char(0,line_num,'*');
   \   000000AA   0x222A             MOVS     R2,#+42
   \   000000AC   0x....             LDR.N    R0,??DataTable12_31
   \   000000AE   0x7801             LDRB     R1,[R0, #+0]
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x.... 0x....      BL       write_6_8_char
   1208          	     } 
   1209          	     
   1210             }
   1211          /*对应参数加十*/
   1212          
   1213           if(!Add_10)  //如果检测到低电平，说明按键按下
   \                     ??KeyScan_6:
   \   000000B6   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x0480             LSLS     R0,R0,#+18
   \   000000BC   0xD411             BMI.N    ??KeyScan_11
   1214              {
   1215                 LCD_DLY_ms(10); //延时去抖，一般10-20ms
   \   000000BE   0x200A             MOVS     R0,#+10
   \   000000C0   0x.... 0x....      BL       LCD_DLY_ms
   1216               if(!Add_10)     //再次确认按键是否按下，没有按下则退出
   \   000000C4   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0x0480             LSLS     R0,R0,#+18
   \   000000CA   0xD40A             BMI.N    ??KeyScan_11
   1217          	   {
   1218                while(!Add_10);//如果确认按下按键等待按键释放，没有释放则一直等待
   \                     ??KeyScan_12:
   \   000000CC   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x0480             LSLS     R0,R0,#+18
   \   000000D2   0xD5FB             BPL.N    ??KeyScan_12
   1219                  change_value(page_num,line_num,10);
   \   000000D4   0x....             LDR.N    R2,??DataTable12_54  ;; 0x41200000
   \   000000D6   0x....             LDR.N    R0,??DataTable12_31
   \   000000D8   0x7801             LDRB     R1,[R0, #+0]
   \   000000DA   0x....             LDR.N    R0,??DataTable12
   \   000000DC   0x7800             LDRB     R0,[R0, #+0]
   \   000000DE   0x.... 0x....      BL       change_value
   1220          	   }
   1221          	  }
   1222          /*对应参数加一*/
   1223          if(!Add_1)  
   \                     ??KeyScan_11:
   \   000000E2   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x03C0             LSLS     R0,R0,#+15
   \   000000E8   0xD412             BMI.N    ??KeyScan_13
   1224              {
   1225          	 LCD_DLY_ms(10); 
   \   000000EA   0x200A             MOVS     R0,#+10
   \   000000EC   0x.... 0x....      BL       LCD_DLY_ms
   1226               if(!Add_1)
   \   000000F0   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0x03C0             LSLS     R0,R0,#+15
   \   000000F6   0xD40B             BMI.N    ??KeyScan_13
   1227          	   {
   1228                  while(!Add_1);
   \                     ??KeyScan_14:
   \   000000F8   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0x03C0             LSLS     R0,R0,#+15
   \   000000FE   0xD5FB             BPL.N    ??KeyScan_14
   1229                  change_value(page_num,line_num,1);  
   \   00000100   0xF05F 0x527E      MOVS     R2,#+1065353216
   \   00000104   0x....             LDR.N    R0,??DataTable12_31
   \   00000106   0x7801             LDRB     R1,[R0, #+0]
   \   00000108   0x....             LDR.N    R0,??DataTable12
   \   0000010A   0x7800             LDRB     R0,[R0, #+0]
   \   0000010C   0x.... 0x....      BL       change_value
   1230          	   }
   1231          	  }
   1232          /*对应参数减一*/
   1233          if(!Sub_1)
   \                     ??KeyScan_13:
   \   00000110   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0x0380             LSLS     R0,R0,#+14
   \   00000116   0xD411             BMI.N    ??KeyScan_15
   1234             {
   1235            	 LCD_DLY_ms(10);  
   \   00000118   0x200A             MOVS     R0,#+10
   \   0000011A   0x.... 0x....      BL       LCD_DLY_ms
   1236               if(!Sub_1)     
   \   0000011E   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   00000120   0x6800             LDR      R0,[R0, #+0]
   \   00000122   0x0380             LSLS     R0,R0,#+14
   \   00000124   0xD40A             BMI.N    ??KeyScan_15
   1237          	   {
   1238                  while(!Sub_1);
   \                     ??KeyScan_16:
   \   00000126   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   00000128   0x6800             LDR      R0,[R0, #+0]
   \   0000012A   0x0380             LSLS     R0,R0,#+14
   \   0000012C   0xD5FB             BPL.N    ??KeyScan_16
   1239                  change_value(page_num,line_num,-1);
   \   0000012E   0x....             LDR.N    R2,??DataTable12_55  ;; 0xbf800000
   \   00000130   0x....             LDR.N    R0,??DataTable12_31
   \   00000132   0x7801             LDRB     R1,[R0, #+0]
   \   00000134   0x....             LDR.N    R0,??DataTable12
   \   00000136   0x7800             LDRB     R0,[R0, #+0]
   \   00000138   0x.... 0x....      BL       change_value
   1240          	 	 }
   1241          	  }
   1242          /*对应参数减十*/
   1243          if(!Sub_10){
   \                     ??KeyScan_15:
   \   0000013C   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   0000013E   0x6800             LDR      R0,[R0, #+0]
   \   00000140   0x0440             LSLS     R0,R0,#+17
   \   00000142   0xD411             BMI.N    ??KeyScan_5
   1244            LCD_DLY_ms(10); 
   \   00000144   0x200A             MOVS     R0,#+10
   \   00000146   0x.... 0x....      BL       LCD_DLY_ms
   1245            if(!Sub_10){
   \   0000014A   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   0000014C   0x6800             LDR      R0,[R0, #+0]
   \   0000014E   0x0440             LSLS     R0,R0,#+17
   \   00000150   0xD40A             BMI.N    ??KeyScan_5
   1246              while(!Sub_10);
   \                     ??KeyScan_17:
   \   00000152   0x....             LDR.N    R0,??DataTable12_53  ;; 0x400ff090
   \   00000154   0x6800             LDR      R0,[R0, #+0]
   \   00000156   0x0440             LSLS     R0,R0,#+17
   \   00000158   0xD5FB             BPL.N    ??KeyScan_17
   1247              change_value(page_num,line_num,-10);
   \   0000015A   0x....             LDR.N    R2,??DataTable12_56  ;; 0xc1200000
   \   0000015C   0x....             LDR.N    R0,??DataTable12_31
   \   0000015E   0x7801             LDRB     R1,[R0, #+0]
   \   00000160   0x....             LDR.N    R0,??DataTable12
   \   00000162   0x7800             LDRB     R0,[R0, #+0]
   \   00000164   0x.... 0x....      BL       change_value
   1248            }
   1249           }
   1250          	  
   1251          
   1252           }
   1253          }
   \                     ??KeyScan_5:
   \   00000168   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x4004B028         DC32     0x4004b028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x4004B024         DC32     0x4004b024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x4004B020         DC32     0x4004b020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x4004B01C         DC32     0x4004b01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x400FF094         DC32     0x400ff094

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x56 0x3A          DC8      0x56, 0x3A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x57 0x3A          DC8      0x57, 0x3A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x53 0x70          DC8      "Sp:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     F6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x38D1B718         DC32     0x38d1b718

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     F8X16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     page_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     Pixel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     V

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     w

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     `?<Constant "acce:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     acce

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     `?<Constant "L_c:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     Left_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     `?<Constant "R_c:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x........         DC32     Right_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     `?<Constant "p_d:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     p_distance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x........         DC32     `?<Constant "w_c:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x........         DC32     white_center

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x........         DC32     Speed_set

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x........         DC32     g_nCarAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     acce_angle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x........         DC32     white_latch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x........         DC32     latch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x........         DC32     black_latch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x........         DC32     g_nLeftCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x........         DC32     g_nRightCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x........         DC32     `?<Constant "Rsp:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x........         DC32     RealSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x........         DC32     `?<Constant "L_PWM:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x........         DC32     LeftSpeedPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_26:
   \   00000000   0x........         DC32     `?<Constant "R_PWM:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_27:
   \   00000000   0x........         DC32     RightSpeedPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_28:
   \   00000000   0x........         DC32     anglePD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_29:
   \   00000000   0x........         DC32     steerpwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_30:
   \   00000000   0x........         DC32     SpeedPID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_31:
   \   00000000   0x........         DC32     line_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_32:
   \   00000000   0x........         DC32     `?<Constant "ACCE:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_33:
   \   00000000   0x........         DC32     ACCE_STATIC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_34:
   \   00000000   0x........         DC32     `?<Constant "WHITE_C:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_35:
   \   00000000   0x........         DC32     WHITE_CENTER

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_36:
   \   00000000   0x........         DC32     `?<Constant "ang_kp:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_37:
   \   00000000   0x........         DC32     angle_kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_38:
   \   00000000   0x........         DC32     `?<Constant "ang_kd:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_39:
   \   00000000   0x........         DC32     angle_kd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_40:
   \   00000000   0x........         DC32     `?<Constant "sped_kp:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_41:
   \   00000000   0x........         DC32     speed_kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_42:
   \   00000000   0x........         DC32     `?<Constant "sped_ki:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_43:
   \   00000000   0x........         DC32     speed_ki

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_44:
   \   00000000   0x........         DC32     `?<Constant "ster_kp:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_45:
   \   00000000   0x........         DC32     steer_kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_46:
   \   00000000   0x........         DC32     `?<Constant "ster_kd:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_47:
   \   00000000   0x........         DC32     steer_kd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_48:
   \   00000000   0x........         DC32     g_aucImageTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_49:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_50:
   \   00000000   0x3FB99999         DC32     0x3fb99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_51:
   \   00000000   0x47AE147B         DC32     0x47ae147b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_52:
   \   00000000   0x3F847AE1         DC32     0x3f847ae1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_53:
   \   00000000   0x400FF090         DC32     0x400ff090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_54:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_55:
   \   00000000   0xBF800000         DC32     0xbf800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_56:
   \   00000000   0xC1200000         DC32     0xc1200000

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000061   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000071   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x56 0x3A          DC8 "V:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x57 0x3A          DC8 "W:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "acce:">`:
   \   00000000   0x61 0x63          DC8 "acce:"
   \              0x63 0x65    
   \              0x3A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "L_c:">`:
   \   00000000   0x4C 0x5F          DC8 "L_c:"
   \              0x63 0x3A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "R_c:">`:
   \   00000000   0x52 0x5F          DC8 "R_c:"
   \              0x63 0x3A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "p_d:">`:
   \   00000000   0x70 0x5F          DC8 "p_d:"
   \              0x64 0x3A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "w_c:">`:
   \   00000000   0x77 0x5F          DC8 "w_c:"
   \              0x63 0x3A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x53 0x70          DC8 "Sp:"
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Rsp:">`:
   \   00000000   0x52 0x73          DC8 "Rsp:"
   \              0x70 0x3A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "L_PWM:">`:
   \   00000000   0x4C 0x5F          DC8 "L_PWM:"
   \              0x50 0x57    
   \              0x4D 0x3A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "R_PWM:">`:
   \   00000000   0x52 0x5F          DC8 "R_PWM:"
   \              0x50 0x57    
   \              0x4D 0x3A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "ACCE:">`:
   \   00000000   0x41 0x43          DC8 "ACCE:"
   \              0x43 0x45    
   \              0x3A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WHITE_C:">`:
   \   00000000   0x57 0x48          DC8 "WHITE_C:"
   \              0x49 0x54    
   \              0x45 0x5F    
   \              0x43 0x3A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "ang_kp:">`:
   \   00000000   0x61 0x6E          DC8 "ang_kp:"
   \              0x67 0x5F    
   \              0x6B 0x70    
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "ang_kd:">`:
   \   00000000   0x61 0x6E          DC8 "ang_kd:"
   \              0x67 0x5F    
   \              0x6B 0x64    
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "sped_kp:">`:
   \   00000000   0x73 0x70          DC8 "sped_kp:"
   \              0x65 0x64    
   \              0x5F 0x6B    
   \              0x70 0x3A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "sped_ki:">`:
   \   00000000   0x73 0x70          DC8 "sped_ki:"
   \              0x65 0x64    
   \              0x5F 0x6B    
   \              0x69 0x3A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "ster_kp:">`:
   \   00000000   0x73 0x74          DC8 "ster_kp:"
   \              0x65 0x72    
   \              0x5F 0x6B    
   \              0x70 0x3A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "ster_kd:">`:
   \   00000000   0x73 0x74          DC8 "ster_kd:"
   \              0x65 0x72    
   \              0x5F 0x6B    
   \              0x64 0x3A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       40  Draw_BMP
              40 -> LCD_Set_Pos
              40 -> LCD_WrDat
        8  KeyScan
               8 -> LCD_DLY_ms
               8 -> change_value
               8 -> pre_show
               8 -> write_6_8_char
       16  LCD_CLS
              16 -> LCD_WrCmd
              16 -> LCD_WrDat
        0  LCD_DLY_ms
       16  LCD_Fill
              16 -> LCD_WrCmd
              16 -> LCD_WrDat
        8  LCD_Init
               8 -> LCD_DLY_ms
               8 -> LCD_Fill
               8 -> LCD_Set_Pos
               8 -> LCD_WrCmd
               8 -> gpio_init
       16  LCD_PutPixel
              16 -> LCD_Set_Pos
              16 -> LCD_WrCmd
              16 -> LCD_WrDat
       32  LCD_Rectangle
              32 -> LCD_DLY_ms
              32 -> LCD_Set_Pos
              32 -> LCD_WrDat
       16  LCD_Set_Pos
              16 -> LCD_WrCmd
        0  LCD_WrCmd
        0  LCD_WrDat
       16  LCD_clear_L
              16 -> LCD_Set_Pos
              16 -> LCD_WrCmd
              16 -> LCD_WrDat
       48  LED_PrintImage
              48 -> LCD_Set_Pos
              48 -> LCD_WrDat
      152  MAIN_ConvertData
             152 -> __aeabi_memclr4
             152 -> memset
       24  change_value
              24 -> LCD_clear_L
              24 -> __aeabi_d2f
              24 -> __aeabi_dadd
              24 -> __aeabi_dmul
              24 -> __aeabi_f2d
              24 -> __aeabi_f2iz
              24 -> __aeabi_fadd
              24 -> __aeabi_ui2f
              24 -> write_6_8_char
              24 -> write_6_8_number
       16  memset
              16 -> __aeabi_memset
        8  pre_show
               8 -> LCD_CLS
               8 -> LED_PrintImage
               8 -> MAIN_ConvertData
               8 -> __aeabi_i2f
               8 -> __aeabi_ui2f
               8 -> write_6_8_char
               8 -> write_6_8_number
               8 -> write_6_8_string
        8  redraw
               8 -> LCD_clear_L
               8 -> LED_PrintImage
               8 -> MAIN_ConvertData
               8 -> __aeabi_f2iz
               8 -> __aeabi_i2f
               8 -> __aeabi_ui2f
               8 -> write_6_8_number
               8 -> write_6_8_string
       24  write_6_8_char
              24 -> LCD_Set_Pos
              24 -> LCD_WrDat
       48  write_6_8_number
              48 -> __aeabi_cfcmple
              48 -> __aeabi_cfrcmple
              48 -> __aeabi_f2iz
              48 -> __aeabi_fmul
              48 -> __aeabi_fsub
              48 -> __aeabi_i2f
              48 -> write_6_8_char
              48 -> write_6_8_string
       32  write_6_8_string
              32 -> LCD_Set_Pos
              32 -> LCD_WrDat
       32  write_8_16_char
              32 -> LCD_Set_Pos
              32 -> LCD_WrDat
       48  write_8_16_number
              48 -> __aeabi_cfcmple
              48 -> __aeabi_cfrcmple
              48 -> __aeabi_f2iz
              48 -> __aeabi_fmul
              48 -> __aeabi_fsub
              48 -> __aeabi_i2f
              48 -> write_8_16_char
              48 -> write_8_16_string
       32  write_8_16_string
              32 -> LCD_Set_Pos
              32 -> LCD_WrDat


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "ACCE:">
       8  ?<Constant "L_PWM:">
       8  ?<Constant "L_c:">
       8  ?<Constant "R_PWM:">
       8  ?<Constant "R_c:">
       8  ?<Constant "Rsp:">
       4  ?<Constant "Sp:">
       4  ?<Constant "V:">
       4  ?<Constant "W:">
      12  ?<Constant "WHITE_C:">
       8  ?<Constant "acce:">
       8  ?<Constant "ang_kd:">
       8  ?<Constant "ang_kp:">
       8  ?<Constant "p_d:">
      12  ?<Constant "sped_ki:">
      12  ?<Constant "sped_kp:">
      12  ?<Constant "ster_kd:">
      12  ?<Constant "ster_kp:">
       8  ?<Constant "w_c:">
     128  ?<Constant {0}>
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_35
       4  ??DataTable12_36
       4  ??DataTable12_37
       4  ??DataTable12_38
       4  ??DataTable12_39
       4  ??DataTable12_4
       4  ??DataTable12_40
       4  ??DataTable12_41
       4  ??DataTable12_42
       4  ??DataTable12_43
       4  ??DataTable12_44
       4  ??DataTable12_45
       4  ??DataTable12_46
       4  ??DataTable12_47
       4  ??DataTable12_48
       4  ??DataTable12_49
       4  ??DataTable12_5
       4  ??DataTable12_50
       4  ??DataTable12_51
       4  ??DataTable12_52
       4  ??DataTable12_53
       4  ??DataTable12_54
       4  ??DataTable12_55
       4  ??DataTable12_56
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
     128  Draw_BMP
     552  F6x8
    1520  F8X16
     362  KeyScan
      60  LCD_CLS
      28  LCD_DLY_ms
      64  LCD_Fill
     388  LCD_Init
      80  LCD_PutPixel
     152  LCD_Rectangle
      46  LCD_Set_Pos
     132  LCD_WrCmd
     152  LCD_WrDat
      58  LCD_clear_L
     270  LED_PrintImage
      96  MAIN_ConvertData
     674  change_value
    7680  g_aucImageTable
       1  line_num
      22  memset
       1  page_num
     920  pre_show
       1  re_display
     656  redraw
      80  write_6_8_char
     380  write_6_8_number
     124  write_6_8_string
     140  write_8_16_char
     380  write_8_16_number
     170  write_8_16_string

 
 7 682 bytes in section .bss
     1 byte  in section .data
 2 360 bytes in section .rodata
 5 842 bytes in section .text
 
 5 820 bytes of CODE  memory (+ 22 bytes shared)
 2 360 bytes of CONST memory
 7 683 bytes of DATA  memory

Errors: none
Warnings: none
