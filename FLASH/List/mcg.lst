###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        21/Jun/2014  20:40:00
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  L:\6.21\src\Sources\Drivers\mcg\mcg.c
#    Command line =  
#        L:\6.21\src\Sources\Drivers\mcg\mcg.c -D IAR -D TWR_K60N512 -D DEBUG
#        -lCN L:\6.21\FLASH\List\ -lB L:\6.21\FLASH\List\ -o L:\6.21\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        D:\dowload\iark60\arm\INC\c\DLib_Config_Normal.h -I
#        L:\6.21\src\Sources\Cpu\ -I L:\6.21\src\Sources\App\ -I
#        L:\6.21\src\Sources\Drivers\adc\ -I L:\6.21\src\Sources\Drivers\delay\
#        -I L:\6.21\src\Sources\Drivers\FTM\ -I
#        L:\6.21\src\Sources\Drivers\gpio\ -I
#        L:\6.21\src\Sources\Drivers\lptmr\ -I L:\6.21\src\Sources\Drivers\mcg\
#        -I L:\6.21\src\Sources\Drivers\PIT\ -I
#        L:\6.21\src\Sources\Drivers\uart\ -I L:\6.21\src\Sources\Drivers\oled\
#        -I L:\6.21\src\Sources\Drivers\spi\ -On --use_c++_inline
#    List file    =  L:\6.21\FLASH\List\mcg.lst
#    Object file  =  L:\6.21\FLASH\Obj\mcg.o
#
###############################################################################

L:\6.21\src\Sources\Drivers\mcg\mcg.c
      1          /******************** (C) COPYRIGHT 2011      ********************
      2           * 文件名       ：mcg.c
      3           * 描述         ：工作时钟模式设置，锁相环。
      4           * 备注         ：官方例程上修改
      5           *                                                  
      6          **********************************************************************************/
      7          
      8          #include "common.h"
      9          #include "mcg.h"
     10          
     11          
     12          
     13          
     14          //锁相环频率为50/15*54=180M测试函数

   \                                 In section .text, align 4, keep-with-next
     15          void pll_init(void)
     16          {
     17          	uint32_t temp_reg;
     18                  //使能IO端口时钟    
     19              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
     20                                        | SIM_SCGC5_PORTB_MASK
     21                                        | SIM_SCGC5_PORTC_MASK
     22                                        | SIM_SCGC5_PORTD_MASK
     23                                        | SIM_SCGC5_PORTE_MASK );
   \                     pll_init: (+1)
   \   00000000   0x4931             LDR.N    R1,??pll_init_0  ;; 0x40048038
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF451 0x5178      ORRS     R1,R1,#0x3E00
   \   00000008   0x4A2F             LDR.N    R2,??pll_init_0  ;; 0x40048038
   \   0000000A   0x6011             STR      R1,[R2, #+0]
     24              //这里处在默认的FEI模式
     25              //首先移动到FBE模式
     26              MCG_C2 = 0;  
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x4A2F             LDR.N    R2,??pll_init_0+0x4  ;; 0x40064001
   \   00000010   0x7011             STRB     R1,[R2, #+0]
     27              //MCG_C2 = MCG_C2_RANGE(2) | MCG_C2_HGO_MASK | MCG_C2_EREFS_MASK;
     28              //初始化晶振后释放锁定状态的振荡器和GPIO
     29              SIM_SCGC4 |= SIM_SCGC4_LLWU_MASK;
   \   00000012   0x492F             LDR.N    R1,??pll_init_0+0x8  ;; 0x40048034
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0xF051 0x5180      ORRS     R1,R1,#0x10000000
   \   0000001A   0x4A2D             LDR.N    R2,??pll_init_0+0x8  ;; 0x40048034
   \   0000001C   0x6011             STR      R1,[R2, #+0]
     30              LLWU_CS |= LLWU_CS_ACKISO_MASK;
   \   0000001E   0x492D             LDR.N    R1,??pll_init_0+0xC  ;; 0x4007c008
   \   00000020   0x7809             LDRB     R1,[R1, #+0]
   \   00000022   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000026   0x4A2B             LDR.N    R2,??pll_init_0+0xC  ;; 0x4007c008
   \   00000028   0x7011             STRB     R1,[R2, #+0]
     31              
     32              //选择外部晶振，参考分频器，清IREFS来启动外部晶振
     33              //011 If RANGE = 0, Divide Factor is 8; for all other RANGE values, Divide Factor is 256.
     34              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
   \   0000002A   0x2198             MOVS     R1,#+152
   \   0000002C   0x4A2A             LDR.N    R2,??pll_init_0+0x10  ;; 0x40064000
   \   0000002E   0x7011             STRB     R1,[R2, #+0]
     35              
     36              //等待晶振稳定	    
     37              //while (!(MCG_S & MCG_S_OSCINIT_MASK)){}              //等待锁相环初始化结束
     38              while (MCG_S & MCG_S_IREFST_MASK){}                  //等待时钟切换到外部参考时钟
   \                     ??pll_init_1: (+1)
   \   00000030   0x492A             LDR.N    R1,??pll_init_0+0x14  ;; 0x40064006
   \   00000032   0x7809             LDRB     R1,[R1, #+0]
   \   00000034   0x06C9             LSLS     R1,R1,#+27
   \   00000036   0xD4FB             BMI.N    ??pll_init_1
     39              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2){}
   \                     ??pll_init_2: (+1)
   \   00000038   0x4928             LDR.N    R1,??pll_init_0+0x14  ;; 0x40064006
   \   0000003A   0x7809             LDRB     R1,[R1, #+0]
   \   0000003C   0xF3C1 0x0181      UBFX     R1,R1,#+2,#+2
   \   00000040   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000042   0x2902             CMP      R1,#+2
   \   00000044   0xD1F8             BNE.N    ??pll_init_2
     40              
     41              //进入FBE模式,
     42            
     43              MCG_C5 = MCG_C5_PRDIV(0x0e);        //c        
   \   00000046   0x210E             MOVS     R1,#+14
   \   00000048   0x4A25             LDR.N    R2,??pll_init_0+0x18  ;; 0x40064004
   \   0000004A   0x7011             STRB     R1,[R2, #+0]
     44              
     45              //确保MCG_C6处于复位状态，禁止LOLIE、PLL、和时钟控制器，清PLL VCO分频器
     46              MCG_C6 = 0x0;
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x4A25             LDR.N    R2,??pll_init_0+0x1C  ;; 0x40064005
   \   00000050   0x7011             STRB     R1,[R2, #+0]
     47              
     48              //保存FMC_PFAPR当前的值
     49              temp_reg = FMC_PFAPR;
   \   00000052   0x4925             LDR.N    R1,??pll_init_0+0x20  ;; 0x4001f000
   \   00000054   0x6809             LDR      R1,[R1, #+0]
   \   00000056   0x0008             MOVS     R0,R1
     50              
     51              //通过M&PFD置位M0PFD来禁止预取功能
     52              FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
     53                               | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
     54                               | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;    
   \   00000058   0x4923             LDR.N    R1,??pll_init_0+0x20  ;; 0x4001f000
   \   0000005A   0x6809             LDR      R1,[R1, #+0]
   \   0000005C   0xF451 0x017F      ORRS     R1,R1,#0xFF0000
   \   00000060   0x4A21             LDR.N    R2,??pll_init_0+0x20  ;; 0x4001f000
   \   00000062   0x6011             STR      R1,[R2, #+0]
     55              ///设置系统分频器
     56              //MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/8
     57              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) 
     58                           | SIM_CLKDIV1_OUTDIV3(1) | SIM_CLKDIV1_OUTDIV4(7);       
   \   00000064   0x4921             LDR.N    R1,??pll_init_0+0x24  ;; 0x1170000
   \   00000066   0x4A22             LDR.N    R2,??pll_init_0+0x28  ;; 0x40048044
   \   00000068   0x6011             STR      R1,[R2, #+0]
     59              
     60              //从新存FMC_PFAPR的原始值
     61              FMC_PFAPR = temp_reg; 
   \   0000006A   0x491F             LDR.N    R1,??pll_init_0+0x20  ;; 0x4001f000
   \   0000006C   0x6008             STR      R0,[R1, #+0]
     62              
     63              //设置VCO分频器，使能PLL为100MHz, LOLIE=0, PLLS=1, CME=0, VDIV=26
     64              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(30);  //VDIV = 31 (x54)  //28
   \   0000006E   0x215E             MOVS     R1,#+94
   \   00000070   0x4A1C             LDR.N    R2,??pll_init_0+0x1C  ;; 0x40064005
   \   00000072   0x7011             STRB     R1,[R2, #+0]
     65                                                            //VDIV = 26 (x50)
     66              while (!(MCG_S & MCG_S_PLLST_MASK)){}; // wait for PLL status bit to set    
   \                     ??pll_init_3: (+1)
   \   00000074   0x4919             LDR.N    R1,??pll_init_0+0x14  ;; 0x40064006
   \   00000076   0x7809             LDRB     R1,[R1, #+0]
   \   00000078   0x0689             LSLS     R1,R1,#+26
   \   0000007A   0xD5FB             BPL.N    ??pll_init_3
     67              while (!(MCG_S & MCG_S_LOCK_MASK)){}; // Wait for LOCK bit to set    
   \                     ??pll_init_4: (+1)
   \   0000007C   0x4917             LDR.N    R1,??pll_init_0+0x14  ;; 0x40064006
   \   0000007E   0x7809             LDRB     R1,[R1, #+0]
   \   00000080   0x0649             LSLS     R1,R1,#+25
   \   00000082   0xD5FB             BPL.N    ??pll_init_4
     68              
     69              //进入PBE模式    
     70              //通过清零CLKS位来进入PEE模式
     71              // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
     72              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   00000084   0x4914             LDR.N    R1,??pll_init_0+0x10  ;; 0x40064000
   \   00000086   0x7809             LDRB     R1,[R1, #+0]
   \   00000088   0xF011 0x013F      ANDS     R1,R1,#0x3F
   \   0000008C   0x4A12             LDR.N    R2,??pll_init_0+0x10  ;; 0x40064000
   \   0000008E   0x7011             STRB     R1,[R2, #+0]
     73              
     74              //等待时钟状态位更新
     75              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3){};
   \                     ??pll_init_5: (+1)
   \   00000090   0x4912             LDR.N    R1,??pll_init_0+0x14  ;; 0x40064006
   \   00000092   0x7809             LDRB     R1,[R1, #+0]
   \   00000094   0xF3C1 0x0181      UBFX     R1,R1,#+2,#+2
   \   00000098   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009A   0x2903             CMP      R1,#+3
   \   0000009C   0xD1F8             BNE.N    ??pll_init_5
     76              //SIM_CLKDIV2 |= SIM_CLKDIV2_USBDIV(1);  
     77              
     78              //设置跟踪时钟为内核时钟
     79              SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;	
   \   0000009E   0x4915             LDR.N    R1,??pll_init_0+0x2C  ;; 0x40048004
   \   000000A0   0x6809             LDR      R1,[R1, #+0]
   \   000000A2   0xF451 0x5180      ORRS     R1,R1,#0x1000
   \   000000A6   0x4A13             LDR.N    R2,??pll_init_0+0x2C  ;; 0x40048004
   \   000000A8   0x6011             STR      R1,[R2, #+0]
     80              //在PTA6引脚上使能TRACE_CLKOU功能
     81              PORTA_PCR6 = ( PORT_PCR_MUX(0x7));  
   \   000000AA   0xF44F 0x61E0      MOV      R1,#+1792
   \   000000AE   0x4A12             LDR.N    R2,??pll_init_0+0x30  ;; 0x40049018
   \   000000B0   0x6011             STR      R1,[R2, #+0]
     82              //使能FlexBus模块时钟
     83              SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
   \   000000B2   0x4912             LDR.N    R1,??pll_init_0+0x34  ;; 0x40048040
   \   000000B4   0x6809             LDR      R1,[R1, #+0]
   \   000000B6   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   000000BA   0x4A10             LDR.N    R2,??pll_init_0+0x34  ;; 0x40048040
   \   000000BC   0x6011             STR      R1,[R2, #+0]
     84              //在PTA6引脚上使能FB_CLKOUT功能
     85              PORTC_PCR3 = ( PORT_PCR_MUX(0x5));
   \   000000BE   0xF44F 0x61A0      MOV      R1,#+1280
   \   000000C2   0x4A0F             LDR.N    R2,??pll_init_0+0x38  ;; 0x4004b00c
   \   000000C4   0x6011             STR      R1,[R2, #+0]
     86          }
   \   000000C6   0x4770             BX       LR               ;; return
   \                     ??pll_init_0:
   \   000000C8   0x40048038         DC32     0x40048038
   \   000000CC   0x40064001         DC32     0x40064001
   \   000000D0   0x40048034         DC32     0x40048034
   \   000000D4   0x4007C008         DC32     0x4007c008
   \   000000D8   0x40064000         DC32     0x40064000
   \   000000DC   0x40064006         DC32     0x40064006
   \   000000E0   0x40064004         DC32     0x40064004
   \   000000E4   0x40064005         DC32     0x40064005
   \   000000E8   0x4001F000         DC32     0x4001f000
   \   000000EC   0x01170000         DC32     0x1170000
   \   000000F0   0x40048044         DC32     0x40048044
   \   000000F4   0x40048004         DC32     0x40048004
   \   000000F8   0x40049018         DC32     0x40049018
   \   000000FC   0x40048040         DC32     0x40048040
   \   00000100   0x4004B00C         DC32     0x4004b00c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   pll_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     260  pll_init

 
 260 bytes in section .text
 
 260 bytes of CODE memory

Errors: none
Warnings: none
