###############################################################################
#                                                                             #
#                                                       02/Mar/2013  13:28:49 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\1\src\Sources\Cpu\sysinit #
#                    .c                                                       #
#    Command line =  C:\Users\Administrator\Desktop\1\src\Sources\Cpu\sysinit #
#                    .c -D IAR -D TWR_K60N512 -D DEBUG -lCN                   #
#                    C:\Users\Administrator\Desktop\1\FLASH\List\ -lB         #
#                    C:\Users\Administrator\Desktop\1\FLASH\List\ -o          #
#                    C:\Users\Administrator\Desktop\1\FLASH\Obj\ --no_cse     #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\Administrator\Desktop\1\src\Sources\Cpu\ -I     #
#                    C:\Users\Administrator\Desktop\1\src\Users\ -I           #
#                    C:\Users\Administrator\Desktop\1\src\Sources\Drivers\adc #
#                    \ -I C:\Users\Administrator\Desktop\1\src\Sources\Driver #
#                    s\delay\ -I C:\Users\Administrator\Desktop\1\src\Sources #
#                    \Drivers\FTM\ -I C:\Users\Administrator\Desktop\1\src\So #
#                    urces\Drivers\gpio\ -I C:\Users\Administrator\Desktop\1\ #
#                    src\Sources\Drivers\lptmr\ -I                            #
#                    C:\Users\Administrator\Desktop\1\src\Sources\Drivers\mcg #
#                    \ -I C:\Users\Administrator\Desktop\1\src\Sources\Driver #
#                    s\PIT\ -I C:\Users\Administrator\Desktop\1\src\Sources\D #
#                    rivers\uart\ -On --use_c++_inline                        #
#    List file    =  C:\Users\Administrator\Desktop\1\FLASH\List\sysinit.lst  #
#    Object file  =  C:\Users\Administrator\Desktop\1\FLASH\Obj\sysinit.o     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\1\src\Sources\Cpu\sysinit.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名:sysinit.c                                                        *
      3          // 说  明: 系统配置文件                                                    *
      4          //-------------------------------------------------------------------------*
      5          
      6          #include "sysinit.h"	//头文件
      7          
      8          //全局变量声明

   \                                 In section .bss, align 4
      9          int core_clk_khz;
   \                     core_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     10          int core_clk_mhz;
   \                     core_clk_mhz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          int periph_clk_khz;
   \                     periph_clk_khz:
   \   00000000                      DS8 4
     12          
     13          //-------------------------------------------------------------------------*
     14          //函数名: sysinit                                                          *
     15          //功  能: 系统设置                                                         * 
     16          //参  数: 无						  	           *	
     17          //返  回: 无                                                               *
     18          //说  明: 无                                                               *
     19          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     20          void sysinit (void)
     21          {
   \                     sysinit:
   \   00000000   0xB580             PUSH     {R7,LR}
     22              //使能IO端口时钟    
     23              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
     24                                        | SIM_SCGC5_PORTB_MASK
     25                                        | SIM_SCGC5_PORTC_MASK
     26                                        | SIM_SCGC5_PORTD_MASK
     27                                        | SIM_SCGC5_PORTE_MASK );
   \   00000002   0x....             LDR.N    R0,??DataTable3  ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x5078      ORRS     R0,R0,#0x3E00
   \   0000000A   0x....             LDR.N    R1,??DataTable3  ;; 0x40048038
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     28          
     29              //开启系统时钟
     30              core_clk_mhz = pll_init(CORE_CLK_MHZ, REF_CLK);
   \   0000000E   0x2103             MOVS     R1,#+3
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x.... 0x....      BL       pll_init
   \   00000016   0x....             LDR.N    R1,??DataTable3_1
   \   00000018   0x6008             STR      R0,[R1, #+0]
     31              //通过pll_init函数的返回值来计算内核时钟和外设时钟
     32              core_clk_khz = core_clk_mhz * 1000;
   \   0000001A   0x....             LDR.N    R0,??DataTable3_1
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF44F 0x717A      MOV      R1,#+1000
   \   00000022   0x4348             MULS     R0,R1,R0
   \   00000024   0x....             LDR.N    R1,??DataTable3_2
   \   00000026   0x6008             STR      R0,[R1, #+0]
     33              periph_clk_khz = core_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV2_MASK) >> 24)+ 1);
   \   00000028   0x....             LDR.N    R0,??DataTable3_2
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40048044
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0xF3C1 0x6103      UBFX     R1,R1,#+24,#+4
   \   00000034   0x1C49             ADDS     R1,R1,#+1
   \   00000036   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000003A   0x....             LDR.N    R1,??DataTable3_4
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     34              //使能跟踪时钟，用于调试
     35              trace_clk_init();	
   \   0000003E   0x.... 0x....      BL       trace_clk_init
     36              //FlexBus时钟初始化
     37              fb_clk_init();
   \   00000042   0x.... 0x....      BL       fb_clk_init
     38          
     39          }
   \   00000046   0xBD01             POP      {R0,PC}          ;; return
     40          
     41          //-------------------------------------------------------------------------*
     42          //函数名: trace_clk_init                                                   *
     43          //功  能: 跟踪时钟初始化                                                   * 
     44          //参  数: 无							  	   *	
     45          //返  回: 无                                                               *
     46          //说  明: 用于调试                                                         *
     47          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     48          void trace_clk_init(void)
     49          {
     50              //设置跟踪时钟为内核时钟
     51              SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;	
   \                     trace_clk_init:
   \   00000000   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40048004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000008   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40048004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     52              //在PTA6引脚上使能TRACE_CLKOU功能
     53              PORTA_PCR6 = ( PORT_PCR_MUX(0x7));
   \   0000000C   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40049018
   \   0000000E   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000012   0x6001             STR      R1,[R0, #+0]
     54          }
   \   00000014   0x4770             BX       LR               ;; return
     55          
     56          //-------------------------------------------------------------------------*
     57          //函数名: fb_clk_init                                                      *
     58          //功  能: FlexBus时钟初始化                                                * 
     59          //参  数: 无								   *	
     60          //返  回: 无                                                               *
     61          //说  明:                                                                  *
     62          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     63          void fb_clk_init(void)
     64          {
     65              //使能FlexBus模块时钟
     66              SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
   \                     fb_clk_init:
   \   00000000   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40048040
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000008   0x....             LDR.N    R1,??DataTable3_7  ;; 0x40048040
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     67              //在PTA6引脚上使能FB_CLKOUT功能
     68              PORTC_PCR3 = ( PORT_PCR_MUX(0x5));
   \   0000000C   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4004b00c
   \   0000000E   0xF44F 0x61A0      MOV      R1,#+1280
   \   00000012   0x6001             STR      R1,[R0, #+0]
     69          }
   \   00000014   0x4770             BX       LR               ;; return
     70          
     71          //-------------------------------------------------------------------------*
     72          //函数名: pll_init                                                         *
     73          //功  能: pll初始化                                                        * 
     74          //参  数: clk_option:时钟选项						   * 
     75          //		  crystal_val:时钟值                                       *	
     76          //返  回: 时钟频率值                                                       *
     77          //说  明:                                                                  *
     78          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     79          unsigned char pll_init(unsigned char clk_option, unsigned char crystal_val)
     80          {
   \                     pll_init:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     81              unsigned char pll_freq;
     82              
     83              if (clk_option > 3) {return 0;}   //如果没有选择可用的选项则返回0
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C04             CMP      R4,#+4
   \   0000000A   0xD301             BCC.N    ??pll_init_0
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE076             B.N      ??pll_init_1
     84              if (crystal_val > 15) {return 1;} // 如果如果可用的晶体选项不可用则返回1
   \                     ??pll_init_0:
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0x2D10             CMP      R5,#+16
   \   00000014   0xD301             BCC.N    ??pll_init_2
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE071             B.N      ??pll_init_1
     85              
     86              //这里处在默认的FEI模式
     87              //首先移动到FBE模式
     88              #if (defined(K60_CLK) || defined(ASB817))
     89                       MCG_C2 = 0;
   \                     ??pll_init_2:
   \   0000001A   0x....             LDR.N    R0,??DataTable3_9  ;; 0x40064001
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x7001             STRB     R1,[R0, #+0]
     90              #else
     91                       //使能外部晶振
     92                       MCG_C2 = MCG_C2_RANGE(2) | MCG_C2_HGO_MASK | MCG_C2_EREFS_MASK;
     93              #endif
     94              
     95              //初始化晶振后释放锁定状态的振荡器和GPIO
     96              SIM_SCGC4 |= SIM_SCGC4_LLWU_MASK;
   \   00000020   0x....             LDR.N    R0,??DataTable3_10  ;; 0x40048034
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000028   0x....             LDR.N    R1,??DataTable3_10  ;; 0x40048034
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     97              LLWU_CS |= LLWU_CS_ACKISO_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable3_11  ;; 0x4007c008
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000034   0x....             LDR.N    R1,??DataTable3_11  ;; 0x4007c008
   \   00000036   0x7008             STRB     R0,[R1, #+0]
     98              
     99              //选择外部晶振，参考分频器，清IREFS来启动外部晶振
    100              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
   \   00000038   0x....             LDR.N    R0,??DataTable3_12  ;; 0x40064000
   \   0000003A   0x2198             MOVS     R1,#+152
   \   0000003C   0x7001             STRB     R1,[R0, #+0]
    101              
    102              //等待晶振稳定	
    103              #if (!defined(K60_CLK) && !defined(ASB817))
    104              while (!(MCG_S & MCG_S_OSCINIT_MASK)){};  
    105              #endif
    106              
    107              //等待参考时钟状态位清零
    108              while (MCG_S & MCG_S_IREFST_MASK){}; 
   \                     ??pll_init_3:
   \   0000003E   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x06C0             LSLS     R0,R0,#+27
   \   00000044   0xD4FB             BMI.N    ??pll_init_3
    109              //等待时钟状态位显示时钟源来自外部参考时钟
    110              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2){}; 
   \                     ??pll_init_4:
   \   00000046   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x2802             CMP      R0,#+2
   \   00000052   0xD1F8             BNE.N    ??pll_init_4
    111              
    112              //进入FBE模式
    113              #if (defined(K60_CLK))
    114              MCG_C5 = MCG_C5_PRDIV(0x18);
   \   00000054   0x....             LDR.N    R0,??DataTable3_14  ;; 0x40064004
   \   00000056   0x2118             MOVS     R1,#+24
   \   00000058   0x7001             STRB     R1,[R0, #+0]
    115              #else
    116              
    117              //配置PLL分频器来匹配所用的晶振
    118              MCG_C5 = MCG_C5_PRDIV(crystal_val); 
    119              #endif
    120              
    121              //确保MCG_C6处于复位状态，禁止LOLIE、PLL、和时钟控制器，清PLL VCO分频器
    122              MCG_C6 = 0x0;
   \   0000005A   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x7001             STRB     R1,[R0, #+0]
    123              //选择PLL VCO分频器，系统时钟分频器取决于时钟选项
    124              switch (clk_option) {
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0x2C00             CMP      R4,#+0
   \   00000064   0xD005             BEQ.N    ??pll_init_5
   \   00000066   0x2C02             CMP      R4,#+2
   \   00000068   0xD01B             BEQ.N    ??pll_init_6
   \   0000006A   0xD30E             BCC.N    ??pll_init_7
   \   0000006C   0x2C03             CMP      R4,#+3
   \   0000006E   0xD024             BEQ.N    ??pll_init_8
   \   00000070   0xE02E             B.N      ??pll_init_9
    125              case 0:
    126                //设置系统分频器
    127                //MCG=PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2
    128                set_sys_dividers(0,0,0,1);
   \                     ??pll_init_5:
   \   00000072   0x2301             MOVS     R3,#+1
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x.... 0x....      BL       set_sys_dividers
    129                //设置VCO分频器，使能PLL为50MHz, LOLIE=0, PLLS=1, CME=0, VDIV=1
    130                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(1); //VDIV = 1 (x25)
   \   0000007E   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   00000080   0x2141             MOVS     R1,#+65
   \   00000082   0x7001             STRB     R1,[R0, #+0]
    131                pll_freq = 50;
   \   00000084   0x2032             MOVS     R0,#+50
   \   00000086   0x0006             MOVS     R6,R0
    132                break;
   \   00000088   0xE022             B.N      ??pll_init_9
    133              case 1:
    134                //设置系统分频器
    135                //MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/4
    136                set_sys_dividers(0,1,1,3);
   \                     ??pll_init_7:
   \   0000008A   0x2303             MOVS     R3,#+3
   \   0000008C   0x2201             MOVS     R2,#+1
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x.... 0x....      BL       set_sys_dividers
    137                //设置VCO分频器，使能PLL为100MHz, LOLIE=0, PLLS=1, CME=0, VDIV=26
    138                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(26); //VDIV = 26 (x50)
   \   00000096   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   00000098   0x215A             MOVS     R1,#+90
   \   0000009A   0x7001             STRB     R1,[R0, #+0]
    139                pll_freq = 100;
   \   0000009C   0x2064             MOVS     R0,#+100
   \   0000009E   0x0006             MOVS     R6,R0
    140                break;
   \   000000A0   0xE016             B.N      ??pll_init_9
    141              case 2:
    142                //设置系统分频器
    143                //MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/4
    144                set_sys_dividers(0,1,1,3);
   \                     ??pll_init_6:
   \   000000A2   0x2303             MOVS     R3,#+3
   \   000000A4   0x2201             MOVS     R2,#+1
   \   000000A6   0x2101             MOVS     R1,#+1
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x.... 0x....      BL       set_sys_dividers
    145                //设置VCO分频器，使能PLL为96MHz, LOLIE=0, PLLS=1, CME=0, VDIV=24
    146                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(24); //VDIV = 24 (x48)
   \   000000AE   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000B0   0x2158             MOVS     R1,#+88
   \   000000B2   0x7001             STRB     R1,[R0, #+0]
    147                pll_freq = 96;
   \   000000B4   0x2060             MOVS     R0,#+96
   \   000000B6   0x0006             MOVS     R6,R0
    148                break;
   \   000000B8   0xE00A             B.N      ??pll_init_9
    149              case 3:
    150                //设置系统分频器
    151                //MCG=PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2
    152                set_sys_dividers(0,0,0,1);
   \                     ??pll_init_8:
   \   000000BA   0x2301             MOVS     R3,#+1
   \   000000BC   0x2200             MOVS     R2,#+0
   \   000000BE   0x2100             MOVS     R1,#+0
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0x.... 0x....      BL       set_sys_dividers
    153                //设置VCO分频器，使能PLL为48MHz, LOLIE=0, PLLS=1, CME=0, VDIV=0
    154                MCG_C6 = MCG_C6_PLLS_MASK; //VDIV = 0 (x24)
   \   000000C6   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000C8   0x2140             MOVS     R1,#+64
   \   000000CA   0x7001             STRB     R1,[R0, #+0]
    155                pll_freq = 48;
   \   000000CC   0x2030             MOVS     R0,#+48
   \   000000CE   0x0006             MOVS     R6,R0
    156                break;
    157              }
    158              while (!(MCG_S & MCG_S_PLLST_MASK)){}; // wait for PLL status bit to set
   \                     ??pll_init_9:
   \   000000D0   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   000000D2   0x7800             LDRB     R0,[R0, #+0]
   \   000000D4   0x0680             LSLS     R0,R0,#+26
   \   000000D6   0xD5FB             BPL.N    ??pll_init_9
    159              
    160              while (!(MCG_S & MCG_S_LOCK_MASK)){}; // Wait for LOCK bit to set
   \                     ??pll_init_10:
   \   000000D8   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x0640             LSLS     R0,R0,#+25
   \   000000DE   0xD5FB             BPL.N    ??pll_init_10
    161              
    162              //进入PBE模式
    163              
    164              //通过清零CLKS位来进入PEE模式
    165              // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    166              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   000000E0   0x....             LDR.N    R0,??DataTable3_12  ;; 0x40064000
   \   000000E2   0x7800             LDRB     R0,[R0, #+0]
   \   000000E4   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   000000E8   0x....             LDR.N    R1,??DataTable3_12  ;; 0x40064000
   \   000000EA   0x7008             STRB     R0,[R1, #+0]
    167              
    168              //等待时钟状态位更新
    169              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3){};
   \                     ??pll_init_11:
   \   000000EC   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   000000EE   0x7800             LDRB     R0,[R0, #+0]
   \   000000F0   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   000000F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F6   0x2803             CMP      R0,#+3
   \   000000F8   0xD1F8             BNE.N    ??pll_init_11
    170              
    171              //开始进入PEE模式
    172              
    173              return pll_freq;
   \   000000FA   0x0030             MOVS     R0,R6
   \   000000FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??pll_init_1:
   \   000000FE   0xBD70             POP      {R4-R6,PC}       ;; return
    174          }
    175          
    176          //-------------------------------------------------------------------------*
    177          //函数名: set_sys_dividers                                                 *
    178          //功  能: 设置系系统分频器                                                 * 
    179          //参  数: 预分频值   							   *	
    180          //返  回: 无                                                               *
    181          //说  明: 此函数必须放在RAM里执行，否则会产生错误e2448。当FLASH时钟分频改变* 
    182          //        时，必须禁止FLASH的预取功能。在时钟分频改变之后，必须延时一小段时*
    183          //	 间才可以从新使能预取功能。                                        * 
    184          //-------------------------------------------------------------------------*

   \                                 In section .textrw, align 4, keep-with-next
    185          __ramfunc void set_sys_dividers(uint32 outdiv1, uint32 outdiv2, uint32 outdiv3, uint32 outdiv4)
    186          {
   \                     set_sys_dividers:
   \   00000000   0xB4F0             PUSH     {R4-R7}
    187              uint32 temp_reg;
    188              uint8 i;
    189              //保存FMC_PFAPR当前的值
    190              temp_reg = FMC_PFAPR;
   \   00000002   0x4E11             LDR.N    R6,??set_sys_dividers_0  ;; 0x4001f000
   \   00000004   0x6836             LDR      R6,[R6, #+0]
   \   00000006   0x0034             MOVS     R4,R6
    191              
    192              //通过M&PFD置位M0PFD来禁止预取功能
    193              FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    194                               | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    195                               | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
   \   00000008   0x4E0F             LDR.N    R6,??set_sys_dividers_0  ;; 0x4001f000
   \   0000000A   0x6836             LDR      R6,[R6, #+0]
   \   0000000C   0xF456 0x067F      ORRS     R6,R6,#0xFF0000
   \   00000010   0x4F0D             LDR.N    R7,??set_sys_dividers_0  ;; 0x4001f000
   \   00000012   0x603E             STR      R6,[R7, #+0]
    196              
    197              //给时钟分频器设置期望值  
    198              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(outdiv1) | SIM_CLKDIV1_OUTDIV2(outdiv2) 
    199                                | SIM_CLKDIV1_OUTDIV3(outdiv3) | SIM_CLKDIV1_OUTDIV4(outdiv4);
   \   00000014   0x060E             LSLS     R6,R1,#+24
   \   00000016   0xF016 0x6670      ANDS     R6,R6,#0xF000000
   \   0000001A   0xEA56 0x7600      ORRS     R6,R6,R0, LSL #+28
   \   0000001E   0x0517             LSLS     R7,R2,#+20
   \   00000020   0xF417 0x0770      ANDS     R7,R7,#0xF00000
   \   00000024   0x433E             ORRS     R6,R7,R6
   \   00000026   0x041F             LSLS     R7,R3,#+16
   \   00000028   0xF417 0x2770      ANDS     R7,R7,#0xF0000
   \   0000002C   0x433E             ORRS     R6,R7,R6
   \   0000002E   0x4F07             LDR.N    R7,??set_sys_dividers_0+0x4  ;; 0x40048044
   \   00000030   0x603E             STR      R6,[R7, #+0]
    200              
    201              //等待分频器改变
    202              for (i = 0 ; i < outdiv4 ; i++)
   \   00000032   0x2600             MOVS     R6,#+0
   \   00000034   0x0035             MOVS     R5,R6
   \                     ??set_sys_dividers_1:
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x429D             CMP      R5,R3
   \   0000003A   0xD201             BCS.N    ??set_sys_dividers_2
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
   \   0000003E   0xE7FA             B.N      ??set_sys_dividers_1
    203              {}
    204              
    205              //从新存FMC_PFAPR的原始值
    206              FMC_PFAPR = temp_reg; 
   \                     ??set_sys_dividers_2:
   \   00000040   0x4E01             LDR.N    R6,??set_sys_dividers_0  ;; 0x4001f000
   \   00000042   0x6034             STR      R4,[R6, #+0]
    207              
    208              return;
   \   00000044   0xBCF0             POP      {R4-R7}
   \   00000046   0x4770             BX       LR               ;; return
   \                     ??set_sys_dividers_0:
   \   00000048   0x4001F000         DC32     0x4001f000
   \   0000004C   0x40048044         DC32     0x40048044
    209          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     core_clk_mhz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     core_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     periph_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40048004         DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x40064001         DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x4007C008         DC32     0x4007c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x40064000         DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x40064006         DC32     0x40064006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x40064004         DC32     0x40064004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x40064005         DC32     0x40064005
    210          
    211          
    212          
    213          
    214          
    215          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  fb_clk_init
       16  pll_init
             16 -> set_sys_dividers
       16  set_sys_dividers
        8  sysinit
              8 -> fb_clk_init
              8 -> pll_init
              8 -> trace_clk_init
        0  trace_clk_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  core_clk_khz
       4  core_clk_mhz
      22  fb_clk_init
       4  periph_clk_khz
     256  pll_init
      80  set_sys_dividers
      72  sysinit
      22  trace_clk_init

 
  12 bytes in section .bss
 436 bytes in section .text
  80 bytes in section .textrw
 
 516 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
